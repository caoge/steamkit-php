<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer.CMsgClientLogon
 */
class CMsgClientLogon extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * protocol_version optional uint32 = 1
     *
     * @var int
     */
    protected $protocol_version = null;

    /**
     * obfustucated_private_ip optional uint32 = 2
     *
     * @var int
     */
    protected $obfustucated_private_ip = null;

    /**
     * cell_id optional uint32 = 3
     *
     * @var int
     */
    protected $cell_id = null;

    /**
     * last_session_id optional uint32 = 4
     *
     * @var int
     */
    protected $last_session_id = null;

    /**
     * client_package_version optional uint32 = 5
     *
     * @var int
     */
    protected $client_package_version = null;

    /**
     * client_language optional string = 6
     *
     * @var string
     */
    protected $client_language = null;

    /**
     * client_os_type optional uint32 = 7
     *
     * @var int
     */
    protected $client_os_type = null;

    /**
     * should_remember_password optional bool = 8
     *
     * @var bool
     */
    protected $should_remember_password = null;

    /**
     * wine_version optional string = 9
     *
     * @var string
     */
    protected $wine_version = null;

    /**
     * ping_ms_from_cell_search optional uint32 = 10
     *
     * @var int
     */
    protected $ping_ms_from_cell_search = null;

    /**
     * public_ip optional uint32 = 20
     *
     * @var int
     */
    protected $public_ip = null;

    /**
     * qos_level optional uint32 = 21
     *
     * @var int
     */
    protected $qos_level = null;

    /**
     * client_supplied_steam_id optional fixed64 = 22
     *
     * @var int
     */
    protected $client_supplied_steam_id = null;

    /**
     * machine_id optional bytes = 30
     *
     * @var \Protobuf\Stream
     */
    protected $machine_id = null;

    /**
     * launcher_type optional uint32 = 31
     *
     * @var int
     */
    protected $launcher_type = null;

    /**
     * ui_mode optional uint32 = 32
     *
     * @var int
     */
    protected $ui_mode = null;

    /**
     * steam2_auth_ticket optional bytes = 41
     *
     * @var \Protobuf\Stream
     */
    protected $steam2_auth_ticket = null;

    /**
     * email_address optional string = 42
     *
     * @var string
     */
    protected $email_address = null;

    /**
     * rtime32_account_creation optional fixed32 = 43
     *
     * @var int
     */
    protected $rtime32_account_creation = null;

    /**
     * account_name optional string = 50
     *
     * @var string
     */
    protected $account_name = null;

    /**
     * password optional string = 51
     *
     * @var string
     */
    protected $password = null;

    /**
     * game_server_token optional string = 52
     *
     * @var string
     */
    protected $game_server_token = null;

    /**
     * login_key optional string = 60
     *
     * @var string
     */
    protected $login_key = null;

    /**
     * was_converted_deprecated_msg optional bool = 70
     *
     * @var bool
     */
    protected $was_converted_deprecated_msg = null;

    /**
     * anon_user_target_account_name optional string = 80
     *
     * @var string
     */
    protected $anon_user_target_account_name = null;

    /**
     * resolved_user_steam_id optional fixed64 = 81
     *
     * @var int
     */
    protected $resolved_user_steam_id = null;

    /**
     * eresult_sentryfile optional int32 = 82
     *
     * @var int
     */
    protected $eresult_sentryfile = null;

    /**
     * sha_sentryfile optional bytes = 83
     *
     * @var \Protobuf\Stream
     */
    protected $sha_sentryfile = null;

    /**
     * auth_code optional string = 84
     *
     * @var string
     */
    protected $auth_code = null;

    /**
     * otp_type optional int32 = 85
     *
     * @var int
     */
    protected $otp_type = null;

    /**
     * otp_value optional uint32 = 86
     *
     * @var int
     */
    protected $otp_value = null;

    /**
     * otp_identifier optional string = 87
     *
     * @var string
     */
    protected $otp_identifier = null;

    /**
     * steam2_ticket_request optional bool = 88
     *
     * @var bool
     */
    protected $steam2_ticket_request = null;

    /**
     * sony_psn_ticket optional bytes = 90
     *
     * @var \Protobuf\Stream
     */
    protected $sony_psn_ticket = null;

    /**
     * sony_psn_service_id optional string = 91
     *
     * @var string
     */
    protected $sony_psn_service_id = null;

    /**
     * create_new_psn_linked_account_if_needed optional bool = 92
     *
     * @var bool
     */
    protected $create_new_psn_linked_account_if_needed = null;

    /**
     * sony_psn_name optional string = 93
     *
     * @var string
     */
    protected $sony_psn_name = null;

    /**
     * game_server_app_id optional int32 = 94
     *
     * @var int
     */
    protected $game_server_app_id = null;

    /**
     * steamguard_dont_remember_computer optional bool = 95
     *
     * @var bool
     */
    protected $steamguard_dont_remember_computer = null;

    /**
     * machine_name optional string = 96
     *
     * @var string
     */
    protected $machine_name = null;

    /**
     * machine_name_userchosen optional string = 97
     *
     * @var string
     */
    protected $machine_name_userchosen = null;

    /**
     * country_override optional string = 98
     *
     * @var string
     */
    protected $country_override = null;

    /**
     * is_steam_box optional bool = 99
     *
     * @var bool
     */
    protected $is_steam_box = null;

    /**
     * client_instance_id optional uint64 = 100
     *
     * @var int
     */
    protected $client_instance_id = null;

    /**
     * two_factor_code optional string = 101
     *
     * @var string
     */
    protected $two_factor_code = null;

    /**
     * supports_rate_limit_response optional bool = 102
     *
     * @var bool
     */
    protected $supports_rate_limit_response = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->should_remember_password = false;
        $this->launcher_type = '0';
        $this->ui_mode = '0';
        $this->was_converted_deprecated_msg = false;
        $this->create_new_psn_linked_account_if_needed = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'protocol_version' has a value
     *
     * @return bool
     */
    public function hasProtocolVersion()
    {
        return $this->protocol_version !== null;
    }

    /**
     * Get 'protocol_version' value
     *
     * @return int
     */
    public function getProtocolVersion()
    {
        return $this->protocol_version;
    }

    /**
     * Set 'protocol_version' value
     *
     * @param int $value
     */
    public function setProtocolVersion($value = null)
    {
        $this->protocol_version = $value;
    }

    /**
     * Check if 'obfustucated_private_ip' has a value
     *
     * @return bool
     */
    public function hasObfustucatedPrivateIp()
    {
        return $this->obfustucated_private_ip !== null;
    }

    /**
     * Get 'obfustucated_private_ip' value
     *
     * @return int
     */
    public function getObfustucatedPrivateIp()
    {
        return $this->obfustucated_private_ip;
    }

    /**
     * Set 'obfustucated_private_ip' value
     *
     * @param int $value
     */
    public function setObfustucatedPrivateIp($value = null)
    {
        $this->obfustucated_private_ip = $value;
    }

    /**
     * Check if 'cell_id' has a value
     *
     * @return bool
     */
    public function hasCellId()
    {
        return $this->cell_id !== null;
    }

    /**
     * Get 'cell_id' value
     *
     * @return int
     */
    public function getCellId()
    {
        return $this->cell_id;
    }

    /**
     * Set 'cell_id' value
     *
     * @param int $value
     */
    public function setCellId($value = null)
    {
        $this->cell_id = $value;
    }

    /**
     * Check if 'last_session_id' has a value
     *
     * @return bool
     */
    public function hasLastSessionId()
    {
        return $this->last_session_id !== null;
    }

    /**
     * Get 'last_session_id' value
     *
     * @return int
     */
    public function getLastSessionId()
    {
        return $this->last_session_id;
    }

    /**
     * Set 'last_session_id' value
     *
     * @param int $value
     */
    public function setLastSessionId($value = null)
    {
        $this->last_session_id = $value;
    }

    /**
     * Check if 'client_package_version' has a value
     *
     * @return bool
     */
    public function hasClientPackageVersion()
    {
        return $this->client_package_version !== null;
    }

    /**
     * Get 'client_package_version' value
     *
     * @return int
     */
    public function getClientPackageVersion()
    {
        return $this->client_package_version;
    }

    /**
     * Set 'client_package_version' value
     *
     * @param int $value
     */
    public function setClientPackageVersion($value = null)
    {
        $this->client_package_version = $value;
    }

    /**
     * Check if 'client_language' has a value
     *
     * @return bool
     */
    public function hasClientLanguage()
    {
        return $this->client_language !== null;
    }

    /**
     * Get 'client_language' value
     *
     * @return string
     */
    public function getClientLanguage()
    {
        return $this->client_language;
    }

    /**
     * Set 'client_language' value
     *
     * @param string $value
     */
    public function setClientLanguage($value = null)
    {
        $this->client_language = $value;
    }

    /**
     * Check if 'client_os_type' has a value
     *
     * @return bool
     */
    public function hasClientOsType()
    {
        return $this->client_os_type !== null;
    }

    /**
     * Get 'client_os_type' value
     *
     * @return int
     */
    public function getClientOsType()
    {
        return $this->client_os_type;
    }

    /**
     * Set 'client_os_type' value
     *
     * @param int $value
     */
    public function setClientOsType($value = null)
    {
        $this->client_os_type = $value;
    }

    /**
     * Check if 'should_remember_password' has a value
     *
     * @return bool
     */
    public function hasShouldRememberPassword()
    {
        return $this->should_remember_password !== null;
    }

    /**
     * Get 'should_remember_password' value
     *
     * @return bool
     */
    public function getShouldRememberPassword()
    {
        return $this->should_remember_password;
    }

    /**
     * Set 'should_remember_password' value
     *
     * @param bool $value
     */
    public function setShouldRememberPassword($value = null)
    {
        $this->should_remember_password = $value;
    }

    /**
     * Check if 'wine_version' has a value
     *
     * @return bool
     */
    public function hasWineVersion()
    {
        return $this->wine_version !== null;
    }

    /**
     * Get 'wine_version' value
     *
     * @return string
     */
    public function getWineVersion()
    {
        return $this->wine_version;
    }

    /**
     * Set 'wine_version' value
     *
     * @param string $value
     */
    public function setWineVersion($value = null)
    {
        $this->wine_version = $value;
    }

    /**
     * Check if 'ping_ms_from_cell_search' has a value
     *
     * @return bool
     */
    public function hasPingMsFromCellSearch()
    {
        return $this->ping_ms_from_cell_search !== null;
    }

    /**
     * Get 'ping_ms_from_cell_search' value
     *
     * @return int
     */
    public function getPingMsFromCellSearch()
    {
        return $this->ping_ms_from_cell_search;
    }

    /**
     * Set 'ping_ms_from_cell_search' value
     *
     * @param int $value
     */
    public function setPingMsFromCellSearch($value = null)
    {
        $this->ping_ms_from_cell_search = $value;
    }

    /**
     * Check if 'public_ip' has a value
     *
     * @return bool
     */
    public function hasPublicIp()
    {
        return $this->public_ip !== null;
    }

    /**
     * Get 'public_ip' value
     *
     * @return int
     */
    public function getPublicIp()
    {
        return $this->public_ip;
    }

    /**
     * Set 'public_ip' value
     *
     * @param int $value
     */
    public function setPublicIp($value = null)
    {
        $this->public_ip = $value;
    }

    /**
     * Check if 'qos_level' has a value
     *
     * @return bool
     */
    public function hasQosLevel()
    {
        return $this->qos_level !== null;
    }

    /**
     * Get 'qos_level' value
     *
     * @return int
     */
    public function getQosLevel()
    {
        return $this->qos_level;
    }

    /**
     * Set 'qos_level' value
     *
     * @param int $value
     */
    public function setQosLevel($value = null)
    {
        $this->qos_level = $value;
    }

    /**
     * Check if 'client_supplied_steam_id' has a value
     *
     * @return bool
     */
    public function hasClientSuppliedSteamId()
    {
        return $this->client_supplied_steam_id !== null;
    }

    /**
     * Get 'client_supplied_steam_id' value
     *
     * @return int
     */
    public function getClientSuppliedSteamId()
    {
        return $this->client_supplied_steam_id;
    }

    /**
     * Set 'client_supplied_steam_id' value
     *
     * @param int $value
     */
    public function setClientSuppliedSteamId($value = null)
    {
        $this->client_supplied_steam_id = $value;
    }

    /**
     * Check if 'machine_id' has a value
     *
     * @return bool
     */
    public function hasMachineId()
    {
        return $this->machine_id !== null;
    }

    /**
     * Get 'machine_id' value
     *
     * @return \Protobuf\Stream
     */
    public function getMachineId()
    {
        return $this->machine_id;
    }

    /**
     * Set 'machine_id' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setMachineId($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->machine_id = $value;
    }

    /**
     * Check if 'launcher_type' has a value
     *
     * @return bool
     */
    public function hasLauncherType()
    {
        return $this->launcher_type !== null;
    }

    /**
     * Get 'launcher_type' value
     *
     * @return int
     */
    public function getLauncherType()
    {
        return $this->launcher_type;
    }

    /**
     * Set 'launcher_type' value
     *
     * @param int $value
     */
    public function setLauncherType($value = null)
    {
        $this->launcher_type = $value;
    }

    /**
     * Check if 'ui_mode' has a value
     *
     * @return bool
     */
    public function hasUiMode()
    {
        return $this->ui_mode !== null;
    }

    /**
     * Get 'ui_mode' value
     *
     * @return int
     */
    public function getUiMode()
    {
        return $this->ui_mode;
    }

    /**
     * Set 'ui_mode' value
     *
     * @param int $value
     */
    public function setUiMode($value = null)
    {
        $this->ui_mode = $value;
    }

    /**
     * Check if 'steam2_auth_ticket' has a value
     *
     * @return bool
     */
    public function hasSteam2AuthTicket()
    {
        return $this->steam2_auth_ticket !== null;
    }

    /**
     * Get 'steam2_auth_ticket' value
     *
     * @return \Protobuf\Stream
     */
    public function getSteam2AuthTicket()
    {
        return $this->steam2_auth_ticket;
    }

    /**
     * Set 'steam2_auth_ticket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSteam2AuthTicket($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->steam2_auth_ticket = $value;
    }

    /**
     * Check if 'email_address' has a value
     *
     * @return bool
     */
    public function hasEmailAddress()
    {
        return $this->email_address !== null;
    }

    /**
     * Get 'email_address' value
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->email_address;
    }

    /**
     * Set 'email_address' value
     *
     * @param string $value
     */
    public function setEmailAddress($value = null)
    {
        $this->email_address = $value;
    }

    /**
     * Check if 'rtime32_account_creation' has a value
     *
     * @return bool
     */
    public function hasRtime32AccountCreation()
    {
        return $this->rtime32_account_creation !== null;
    }

    /**
     * Get 'rtime32_account_creation' value
     *
     * @return int
     */
    public function getRtime32AccountCreation()
    {
        return $this->rtime32_account_creation;
    }

    /**
     * Set 'rtime32_account_creation' value
     *
     * @param int $value
     */
    public function setRtime32AccountCreation($value = null)
    {
        $this->rtime32_account_creation = $value;
    }

    /**
     * Check if 'account_name' has a value
     *
     * @return bool
     */
    public function hasAccountName()
    {
        return $this->account_name !== null;
    }

    /**
     * Get 'account_name' value
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->account_name;
    }

    /**
     * Set 'account_name' value
     *
     * @param string $value
     */
    public function setAccountName($value = null)
    {
        $this->account_name = $value;
    }

    /**
     * Check if 'password' has a value
     *
     * @return bool
     */
    public function hasPassword()
    {
        return $this->password !== null;
    }

    /**
     * Get 'password' value
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set 'password' value
     *
     * @param string $value
     */
    public function setPassword($value = null)
    {
        $this->password = $value;
    }

    /**
     * Check if 'game_server_token' has a value
     *
     * @return bool
     */
    public function hasGameServerToken()
    {
        return $this->game_server_token !== null;
    }

    /**
     * Get 'game_server_token' value
     *
     * @return string
     */
    public function getGameServerToken()
    {
        return $this->game_server_token;
    }

    /**
     * Set 'game_server_token' value
     *
     * @param string $value
     */
    public function setGameServerToken($value = null)
    {
        $this->game_server_token = $value;
    }

    /**
     * Check if 'login_key' has a value
     *
     * @return bool
     */
    public function hasLoginKey()
    {
        return $this->login_key !== null;
    }

    /**
     * Get 'login_key' value
     *
     * @return string
     */
    public function getLoginKey()
    {
        return $this->login_key;
    }

    /**
     * Set 'login_key' value
     *
     * @param string $value
     */
    public function setLoginKey($value = null)
    {
        $this->login_key = $value;
    }

    /**
     * Check if 'was_converted_deprecated_msg' has a value
     *
     * @return bool
     */
    public function hasWasConvertedDeprecatedMsg()
    {
        return $this->was_converted_deprecated_msg !== null;
    }

    /**
     * Get 'was_converted_deprecated_msg' value
     *
     * @return bool
     */
    public function getWasConvertedDeprecatedMsg()
    {
        return $this->was_converted_deprecated_msg;
    }

    /**
     * Set 'was_converted_deprecated_msg' value
     *
     * @param bool $value
     */
    public function setWasConvertedDeprecatedMsg($value = null)
    {
        $this->was_converted_deprecated_msg = $value;
    }

    /**
     * Check if 'anon_user_target_account_name' has a value
     *
     * @return bool
     */
    public function hasAnonUserTargetAccountName()
    {
        return $this->anon_user_target_account_name !== null;
    }

    /**
     * Get 'anon_user_target_account_name' value
     *
     * @return string
     */
    public function getAnonUserTargetAccountName()
    {
        return $this->anon_user_target_account_name;
    }

    /**
     * Set 'anon_user_target_account_name' value
     *
     * @param string $value
     */
    public function setAnonUserTargetAccountName($value = null)
    {
        $this->anon_user_target_account_name = $value;
    }

    /**
     * Check if 'resolved_user_steam_id' has a value
     *
     * @return bool
     */
    public function hasResolvedUserSteamId()
    {
        return $this->resolved_user_steam_id !== null;
    }

    /**
     * Get 'resolved_user_steam_id' value
     *
     * @return int
     */
    public function getResolvedUserSteamId()
    {
        return $this->resolved_user_steam_id;
    }

    /**
     * Set 'resolved_user_steam_id' value
     *
     * @param int $value
     */
    public function setResolvedUserSteamId($value = null)
    {
        $this->resolved_user_steam_id = $value;
    }

    /**
     * Check if 'eresult_sentryfile' has a value
     *
     * @return bool
     */
    public function hasEresultSentryfile()
    {
        return $this->eresult_sentryfile !== null;
    }

    /**
     * Get 'eresult_sentryfile' value
     *
     * @return int
     */
    public function getEresultSentryfile()
    {
        return $this->eresult_sentryfile;
    }

    /**
     * Set 'eresult_sentryfile' value
     *
     * @param int $value
     */
    public function setEresultSentryfile($value = null)
    {
        $this->eresult_sentryfile = $value;
    }

    /**
     * Check if 'sha_sentryfile' has a value
     *
     * @return bool
     */
    public function hasShaSentryfile()
    {
        return $this->sha_sentryfile !== null;
    }

    /**
     * Get 'sha_sentryfile' value
     *
     * @return \Protobuf\Stream
     */
    public function getShaSentryfile()
    {
        return $this->sha_sentryfile;
    }

    /**
     * Set 'sha_sentryfile' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setShaSentryfile($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->sha_sentryfile = $value;
    }

    /**
     * Check if 'auth_code' has a value
     *
     * @return bool
     */
    public function hasAuthCode()
    {
        return $this->auth_code !== null;
    }

    /**
     * Get 'auth_code' value
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->auth_code;
    }

    /**
     * Set 'auth_code' value
     *
     * @param string $value
     */
    public function setAuthCode($value = null)
    {
        $this->auth_code = $value;
    }

    /**
     * Check if 'otp_type' has a value
     *
     * @return bool
     */
    public function hasOtpType()
    {
        return $this->otp_type !== null;
    }

    /**
     * Get 'otp_type' value
     *
     * @return int
     */
    public function getOtpType()
    {
        return $this->otp_type;
    }

    /**
     * Set 'otp_type' value
     *
     * @param int $value
     */
    public function setOtpType($value = null)
    {
        $this->otp_type = $value;
    }

    /**
     * Check if 'otp_value' has a value
     *
     * @return bool
     */
    public function hasOtpValue()
    {
        return $this->otp_value !== null;
    }

    /**
     * Get 'otp_value' value
     *
     * @return int
     */
    public function getOtpValue()
    {
        return $this->otp_value;
    }

    /**
     * Set 'otp_value' value
     *
     * @param int $value
     */
    public function setOtpValue($value = null)
    {
        $this->otp_value = $value;
    }

    /**
     * Check if 'otp_identifier' has a value
     *
     * @return bool
     */
    public function hasOtpIdentifier()
    {
        return $this->otp_identifier !== null;
    }

    /**
     * Get 'otp_identifier' value
     *
     * @return string
     */
    public function getOtpIdentifier()
    {
        return $this->otp_identifier;
    }

    /**
     * Set 'otp_identifier' value
     *
     * @param string $value
     */
    public function setOtpIdentifier($value = null)
    {
        $this->otp_identifier = $value;
    }

    /**
     * Check if 'steam2_ticket_request' has a value
     *
     * @return bool
     */
    public function hasSteam2TicketRequest()
    {
        return $this->steam2_ticket_request !== null;
    }

    /**
     * Get 'steam2_ticket_request' value
     *
     * @return bool
     */
    public function getSteam2TicketRequest()
    {
        return $this->steam2_ticket_request;
    }

    /**
     * Set 'steam2_ticket_request' value
     *
     * @param bool $value
     */
    public function setSteam2TicketRequest($value = null)
    {
        $this->steam2_ticket_request = $value;
    }

    /**
     * Check if 'sony_psn_ticket' has a value
     *
     * @return bool
     */
    public function hasSonyPsnTicket()
    {
        return $this->sony_psn_ticket !== null;
    }

    /**
     * Get 'sony_psn_ticket' value
     *
     * @return \Protobuf\Stream
     */
    public function getSonyPsnTicket()
    {
        return $this->sony_psn_ticket;
    }

    /**
     * Set 'sony_psn_ticket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSonyPsnTicket($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->sony_psn_ticket = $value;
    }

    /**
     * Check if 'sony_psn_service_id' has a value
     *
     * @return bool
     */
    public function hasSonyPsnServiceId()
    {
        return $this->sony_psn_service_id !== null;
    }

    /**
     * Get 'sony_psn_service_id' value
     *
     * @return string
     */
    public function getSonyPsnServiceId()
    {
        return $this->sony_psn_service_id;
    }

    /**
     * Set 'sony_psn_service_id' value
     *
     * @param string $value
     */
    public function setSonyPsnServiceId($value = null)
    {
        $this->sony_psn_service_id = $value;
    }

    /**
     * Check if 'create_new_psn_linked_account_if_needed' has a value
     *
     * @return bool
     */
    public function hasCreateNewPsnLinkedAccountIfNeeded()
    {
        return $this->create_new_psn_linked_account_if_needed !== null;
    }

    /**
     * Get 'create_new_psn_linked_account_if_needed' value
     *
     * @return bool
     */
    public function getCreateNewPsnLinkedAccountIfNeeded()
    {
        return $this->create_new_psn_linked_account_if_needed;
    }

    /**
     * Set 'create_new_psn_linked_account_if_needed' value
     *
     * @param bool $value
     */
    public function setCreateNewPsnLinkedAccountIfNeeded($value = null)
    {
        $this->create_new_psn_linked_account_if_needed = $value;
    }

    /**
     * Check if 'sony_psn_name' has a value
     *
     * @return bool
     */
    public function hasSonyPsnName()
    {
        return $this->sony_psn_name !== null;
    }

    /**
     * Get 'sony_psn_name' value
     *
     * @return string
     */
    public function getSonyPsnName()
    {
        return $this->sony_psn_name;
    }

    /**
     * Set 'sony_psn_name' value
     *
     * @param string $value
     */
    public function setSonyPsnName($value = null)
    {
        $this->sony_psn_name = $value;
    }

    /**
     * Check if 'game_server_app_id' has a value
     *
     * @return bool
     */
    public function hasGameServerAppId()
    {
        return $this->game_server_app_id !== null;
    }

    /**
     * Get 'game_server_app_id' value
     *
     * @return int
     */
    public function getGameServerAppId()
    {
        return $this->game_server_app_id;
    }

    /**
     * Set 'game_server_app_id' value
     *
     * @param int $value
     */
    public function setGameServerAppId($value = null)
    {
        $this->game_server_app_id = $value;
    }

    /**
     * Check if 'steamguard_dont_remember_computer' has a value
     *
     * @return bool
     */
    public function hasSteamguardDontRememberComputer()
    {
        return $this->steamguard_dont_remember_computer !== null;
    }

    /**
     * Get 'steamguard_dont_remember_computer' value
     *
     * @return bool
     */
    public function getSteamguardDontRememberComputer()
    {
        return $this->steamguard_dont_remember_computer;
    }

    /**
     * Set 'steamguard_dont_remember_computer' value
     *
     * @param bool $value
     */
    public function setSteamguardDontRememberComputer($value = null)
    {
        $this->steamguard_dont_remember_computer = $value;
    }

    /**
     * Check if 'machine_name' has a value
     *
     * @return bool
     */
    public function hasMachineName()
    {
        return $this->machine_name !== null;
    }

    /**
     * Get 'machine_name' value
     *
     * @return string
     */
    public function getMachineName()
    {
        return $this->machine_name;
    }

    /**
     * Set 'machine_name' value
     *
     * @param string $value
     */
    public function setMachineName($value = null)
    {
        $this->machine_name = $value;
    }

    /**
     * Check if 'machine_name_userchosen' has a value
     *
     * @return bool
     */
    public function hasMachineNameUserchosen()
    {
        return $this->machine_name_userchosen !== null;
    }

    /**
     * Get 'machine_name_userchosen' value
     *
     * @return string
     */
    public function getMachineNameUserchosen()
    {
        return $this->machine_name_userchosen;
    }

    /**
     * Set 'machine_name_userchosen' value
     *
     * @param string $value
     */
    public function setMachineNameUserchosen($value = null)
    {
        $this->machine_name_userchosen = $value;
    }

    /**
     * Check if 'country_override' has a value
     *
     * @return bool
     */
    public function hasCountryOverride()
    {
        return $this->country_override !== null;
    }

    /**
     * Get 'country_override' value
     *
     * @return string
     */
    public function getCountryOverride()
    {
        return $this->country_override;
    }

    /**
     * Set 'country_override' value
     *
     * @param string $value
     */
    public function setCountryOverride($value = null)
    {
        $this->country_override = $value;
    }

    /**
     * Check if 'is_steam_box' has a value
     *
     * @return bool
     */
    public function hasIsSteamBox()
    {
        return $this->is_steam_box !== null;
    }

    /**
     * Get 'is_steam_box' value
     *
     * @return bool
     */
    public function getIsSteamBox()
    {
        return $this->is_steam_box;
    }

    /**
     * Set 'is_steam_box' value
     *
     * @param bool $value
     */
    public function setIsSteamBox($value = null)
    {
        $this->is_steam_box = $value;
    }

    /**
     * Check if 'client_instance_id' has a value
     *
     * @return bool
     */
    public function hasClientInstanceId()
    {
        return $this->client_instance_id !== null;
    }

    /**
     * Get 'client_instance_id' value
     *
     * @return int
     */
    public function getClientInstanceId()
    {
        return $this->client_instance_id;
    }

    /**
     * Set 'client_instance_id' value
     *
     * @param int $value
     */
    public function setClientInstanceId($value = null)
    {
        $this->client_instance_id = $value;
    }

    /**
     * Check if 'two_factor_code' has a value
     *
     * @return bool
     */
    public function hasTwoFactorCode()
    {
        return $this->two_factor_code !== null;
    }

    /**
     * Get 'two_factor_code' value
     *
     * @return string
     */
    public function getTwoFactorCode()
    {
        return $this->two_factor_code;
    }

    /**
     * Set 'two_factor_code' value
     *
     * @param string $value
     */
    public function setTwoFactorCode($value = null)
    {
        $this->two_factor_code = $value;
    }

    /**
     * Check if 'supports_rate_limit_response' has a value
     *
     * @return bool
     */
    public function hasSupportsRateLimitResponse()
    {
        return $this->supports_rate_limit_response !== null;
    }

    /**
     * Get 'supports_rate_limit_response' value
     *
     * @return bool
     */
    public function getSupportsRateLimitResponse()
    {
        return $this->supports_rate_limit_response;
    }

    /**
     * Set 'supports_rate_limit_response' value
     *
     * @param bool $value
     */
    public function setSupportsRateLimitResponse($value = null)
    {
        $this->supports_rate_limit_response = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'protocol_version' => null,
            'obfustucated_private_ip' => null,
            'cell_id' => null,
            'last_session_id' => null,
            'client_package_version' => null,
            'client_language' => null,
            'client_os_type' => null,
            'should_remember_password' => false,
            'wine_version' => null,
            'ping_ms_from_cell_search' => null,
            'public_ip' => null,
            'qos_level' => null,
            'client_supplied_steam_id' => null,
            'machine_id' => null,
            'launcher_type' => '0',
            'ui_mode' => '0',
            'steam2_auth_ticket' => null,
            'email_address' => null,
            'rtime32_account_creation' => null,
            'account_name' => null,
            'password' => null,
            'game_server_token' => null,
            'login_key' => null,
            'was_converted_deprecated_msg' => false,
            'anon_user_target_account_name' => null,
            'resolved_user_steam_id' => null,
            'eresult_sentryfile' => null,
            'sha_sentryfile' => null,
            'auth_code' => null,
            'otp_type' => null,
            'otp_value' => null,
            'otp_identifier' => null,
            'steam2_ticket_request' => null,
            'sony_psn_ticket' => null,
            'sony_psn_service_id' => null,
            'create_new_psn_linked_account_if_needed' => false,
            'sony_psn_name' => null,
            'game_server_app_id' => null,
            'steamguard_dont_remember_computer' => null,
            'machine_name' => null,
            'machine_name_userchosen' => null,
            'country_override' => null,
            'is_steam_box' => null,
            'client_instance_id' => null,
            'two_factor_code' => null,
            'supports_rate_limit_response' => null
        ], $values);

        $message->setProtocolVersion($values['protocol_version']);
        $message->setObfustucatedPrivateIp($values['obfustucated_private_ip']);
        $message->setCellId($values['cell_id']);
        $message->setLastSessionId($values['last_session_id']);
        $message->setClientPackageVersion($values['client_package_version']);
        $message->setClientLanguage($values['client_language']);
        $message->setClientOsType($values['client_os_type']);
        $message->setShouldRememberPassword($values['should_remember_password']);
        $message->setWineVersion($values['wine_version']);
        $message->setPingMsFromCellSearch($values['ping_ms_from_cell_search']);
        $message->setPublicIp($values['public_ip']);
        $message->setQosLevel($values['qos_level']);
        $message->setClientSuppliedSteamId($values['client_supplied_steam_id']);
        $message->setMachineId($values['machine_id']);
        $message->setLauncherType($values['launcher_type']);
        $message->setUiMode($values['ui_mode']);
        $message->setSteam2AuthTicket($values['steam2_auth_ticket']);
        $message->setEmailAddress($values['email_address']);
        $message->setRtime32AccountCreation($values['rtime32_account_creation']);
        $message->setAccountName($values['account_name']);
        $message->setPassword($values['password']);
        $message->setGameServerToken($values['game_server_token']);
        $message->setLoginKey($values['login_key']);
        $message->setWasConvertedDeprecatedMsg($values['was_converted_deprecated_msg']);
        $message->setAnonUserTargetAccountName($values['anon_user_target_account_name']);
        $message->setResolvedUserSteamId($values['resolved_user_steam_id']);
        $message->setEresultSentryfile($values['eresult_sentryfile']);
        $message->setShaSentryfile($values['sha_sentryfile']);
        $message->setAuthCode($values['auth_code']);
        $message->setOtpType($values['otp_type']);
        $message->setOtpValue($values['otp_value']);
        $message->setOtpIdentifier($values['otp_identifier']);
        $message->setSteam2TicketRequest($values['steam2_ticket_request']);
        $message->setSonyPsnTicket($values['sony_psn_ticket']);
        $message->setSonyPsnServiceId($values['sony_psn_service_id']);
        $message->setCreateNewPsnLinkedAccountIfNeeded($values['create_new_psn_linked_account_if_needed']);
        $message->setSonyPsnName($values['sony_psn_name']);
        $message->setGameServerAppId($values['game_server_app_id']);
        $message->setSteamguardDontRememberComputer($values['steamguard_dont_remember_computer']);
        $message->setMachineName($values['machine_name']);
        $message->setMachineNameUserchosen($values['machine_name_userchosen']);
        $message->setCountryOverride($values['country_override']);
        $message->setIsSteamBox($values['is_steam_box']);
        $message->setClientInstanceId($values['client_instance_id']);
        $message->setTwoFactorCode($values['two_factor_code']);
        $message->setSupportsRateLimitResponse($values['supports_rate_limit_response']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientLogon',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'protocol_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'obfustucated_private_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'cell_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'last_session_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'client_package_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'client_language',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'client_os_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'should_remember_password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'wine_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'ping_ms_from_cell_search',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'public_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'qos_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'client_supplied_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 30,
                    'name' => 'machine_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 31,
                    'name' => 'launcher_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 32,
                    'name' => 'ui_mode',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 41,
                    'name' => 'steam2_auth_ticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 42,
                    'name' => 'email_address',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 43,
                    'name' => 'rtime32_account_creation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 50,
                    'name' => 'account_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 51,
                    'name' => 'password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 52,
                    'name' => 'game_server_token',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 60,
                    'name' => 'login_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 70,
                    'name' => 'was_converted_deprecated_msg',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 80,
                    'name' => 'anon_user_target_account_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 81,
                    'name' => 'resolved_user_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 82,
                    'name' => 'eresult_sentryfile',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 83,
                    'name' => 'sha_sentryfile',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 84,
                    'name' => 'auth_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 85,
                    'name' => 'otp_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 86,
                    'name' => 'otp_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 87,
                    'name' => 'otp_identifier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 88,
                    'name' => 'steam2_ticket_request',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 90,
                    'name' => 'sony_psn_ticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 91,
                    'name' => 'sony_psn_service_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 92,
                    'name' => 'create_new_psn_linked_account_if_needed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 93,
                    'name' => 'sony_psn_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 94,
                    'name' => 'game_server_app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 95,
                    'name' => 'steamguard_dont_remember_computer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 96,
                    'name' => 'machine_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 97,
                    'name' => 'machine_name_userchosen',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 98,
                    'name' => 'country_override',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 99,
                    'name' => 'is_steam_box',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 100,
                    'name' => 'client_instance_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 101,
                    'name' => 'two_factor_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 102,
                    'name' => 'supports_rate_limit_response',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->protocol_version !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->protocol_version);
        }

        if ($this->obfustucated_private_ip !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->obfustucated_private_ip);
        }

        if ($this->cell_id !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->cell_id);
        }

        if ($this->last_session_id !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->last_session_id);
        }

        if ($this->client_package_version !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->client_package_version);
        }

        if ($this->client_language !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->client_language);
        }

        if ($this->client_os_type !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->client_os_type);
        }

        if ($this->should_remember_password !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->should_remember_password);
        }

        if ($this->wine_version !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->wine_version);
        }

        if ($this->ping_ms_from_cell_search !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->ping_ms_from_cell_search);
        }

        if ($this->public_ip !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->public_ip);
        }

        if ($this->qos_level !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->qos_level);
        }

        if ($this->client_supplied_steam_id !== null) {
            $writer->writeVarint($stream, 177);
            $writer->writeFixed64($stream, $this->client_supplied_steam_id);
        }

        if ($this->machine_id !== null) {
            $writer->writeVarint($stream, 242);
            $writer->writeByteStream($stream, $this->machine_id);
        }

        if ($this->launcher_type !== null) {
            $writer->writeVarint($stream, 248);
            $writer->writeVarint($stream, $this->launcher_type);
        }

        if ($this->ui_mode !== null) {
            $writer->writeVarint($stream, 256);
            $writer->writeVarint($stream, $this->ui_mode);
        }

        if ($this->steam2_auth_ticket !== null) {
            $writer->writeVarint($stream, 330);
            $writer->writeByteStream($stream, $this->steam2_auth_ticket);
        }

        if ($this->email_address !== null) {
            $writer->writeVarint($stream, 338);
            $writer->writeString($stream, $this->email_address);
        }

        if ($this->rtime32_account_creation !== null) {
            $writer->writeVarint($stream, 349);
            $writer->writeFixed32($stream, $this->rtime32_account_creation);
        }

        if ($this->account_name !== null) {
            $writer->writeVarint($stream, 402);
            $writer->writeString($stream, $this->account_name);
        }

        if ($this->password !== null) {
            $writer->writeVarint($stream, 410);
            $writer->writeString($stream, $this->password);
        }

        if ($this->game_server_token !== null) {
            $writer->writeVarint($stream, 418);
            $writer->writeString($stream, $this->game_server_token);
        }

        if ($this->login_key !== null) {
            $writer->writeVarint($stream, 482);
            $writer->writeString($stream, $this->login_key);
        }

        if ($this->was_converted_deprecated_msg !== null) {
            $writer->writeVarint($stream, 560);
            $writer->writeBool($stream, $this->was_converted_deprecated_msg);
        }

        if ($this->anon_user_target_account_name !== null) {
            $writer->writeVarint($stream, 642);
            $writer->writeString($stream, $this->anon_user_target_account_name);
        }

        if ($this->resolved_user_steam_id !== null) {
            $writer->writeVarint($stream, 649);
            $writer->writeFixed64($stream, $this->resolved_user_steam_id);
        }

        if ($this->eresult_sentryfile !== null) {
            $writer->writeVarint($stream, 656);
            $writer->writeVarint($stream, $this->eresult_sentryfile);
        }

        if ($this->sha_sentryfile !== null) {
            $writer->writeVarint($stream, 666);
            $writer->writeByteStream($stream, $this->sha_sentryfile);
        }

        if ($this->auth_code !== null) {
            $writer->writeVarint($stream, 674);
            $writer->writeString($stream, $this->auth_code);
        }

        if ($this->otp_type !== null) {
            $writer->writeVarint($stream, 680);
            $writer->writeVarint($stream, $this->otp_type);
        }

        if ($this->otp_value !== null) {
            $writer->writeVarint($stream, 688);
            $writer->writeVarint($stream, $this->otp_value);
        }

        if ($this->otp_identifier !== null) {
            $writer->writeVarint($stream, 698);
            $writer->writeString($stream, $this->otp_identifier);
        }

        if ($this->steam2_ticket_request !== null) {
            $writer->writeVarint($stream, 704);
            $writer->writeBool($stream, $this->steam2_ticket_request);
        }

        if ($this->sony_psn_ticket !== null) {
            $writer->writeVarint($stream, 722);
            $writer->writeByteStream($stream, $this->sony_psn_ticket);
        }

        if ($this->sony_psn_service_id !== null) {
            $writer->writeVarint($stream, 730);
            $writer->writeString($stream, $this->sony_psn_service_id);
        }

        if ($this->create_new_psn_linked_account_if_needed !== null) {
            $writer->writeVarint($stream, 736);
            $writer->writeBool($stream, $this->create_new_psn_linked_account_if_needed);
        }

        if ($this->sony_psn_name !== null) {
            $writer->writeVarint($stream, 746);
            $writer->writeString($stream, $this->sony_psn_name);
        }

        if ($this->game_server_app_id !== null) {
            $writer->writeVarint($stream, 752);
            $writer->writeVarint($stream, $this->game_server_app_id);
        }

        if ($this->steamguard_dont_remember_computer !== null) {
            $writer->writeVarint($stream, 760);
            $writer->writeBool($stream, $this->steamguard_dont_remember_computer);
        }

        if ($this->machine_name !== null) {
            $writer->writeVarint($stream, 770);
            $writer->writeString($stream, $this->machine_name);
        }

        if ($this->machine_name_userchosen !== null) {
            $writer->writeVarint($stream, 778);
            $writer->writeString($stream, $this->machine_name_userchosen);
        }

        if ($this->country_override !== null) {
            $writer->writeVarint($stream, 786);
            $writer->writeString($stream, $this->country_override);
        }

        if ($this->is_steam_box !== null) {
            $writer->writeVarint($stream, 792);
            $writer->writeBool($stream, $this->is_steam_box);
        }

        if ($this->client_instance_id !== null) {
            $writer->writeVarint($stream, 800);
            $writer->writeVarint($stream, $this->client_instance_id);
        }

        if ($this->two_factor_code !== null) {
            $writer->writeVarint($stream, 810);
            $writer->writeString($stream, $this->two_factor_code);
        }

        if ($this->supports_rate_limit_response !== null) {
            $writer->writeVarint($stream, 816);
            $writer->writeBool($stream, $this->supports_rate_limit_response);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->protocol_version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->obfustucated_private_ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cell_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_session_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->client_package_version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->client_language = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->client_os_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->should_remember_password = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->wine_version = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_ms_from_cell_search = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->public_ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->qos_level = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->client_supplied_steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->machine_id = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->launcher_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 32) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ui_mode = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 41) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->steam2_auth_ticket = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 42) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->email_address = $reader->readString($stream);

                continue;
            }

            if ($tag === 43) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->rtime32_account_creation = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 50) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->account_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 51) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->password = $reader->readString($stream);

                continue;
            }

            if ($tag === 52) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->game_server_token = $reader->readString($stream);

                continue;
            }

            if ($tag === 60) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->login_key = $reader->readString($stream);

                continue;
            }

            if ($tag === 70) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->was_converted_deprecated_msg = $reader->readBool($stream);

                continue;
            }

            if ($tag === 80) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->anon_user_target_account_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 81) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->resolved_user_steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 82) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->eresult_sentryfile = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 83) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->sha_sentryfile = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 84) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->auth_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 85) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->otp_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 86) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->otp_value = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 87) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->otp_identifier = $reader->readString($stream);

                continue;
            }

            if ($tag === 88) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->steam2_ticket_request = $reader->readBool($stream);

                continue;
            }

            if ($tag === 90) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->sony_psn_ticket = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 91) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sony_psn_service_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 92) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->create_new_psn_linked_account_if_needed = $reader->readBool($stream);

                continue;
            }

            if ($tag === 93) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sony_psn_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 94) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->game_server_app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 95) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->steamguard_dont_remember_computer = $reader->readBool($stream);

                continue;
            }

            if ($tag === 96) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->machine_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 97) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->machine_name_userchosen = $reader->readString($stream);

                continue;
            }

            if ($tag === 98) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->country_override = $reader->readString($stream);

                continue;
            }

            if ($tag === 99) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_steam_box = $reader->readBool($stream);

                continue;
            }

            if ($tag === 100) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->client_instance_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 101) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->two_factor_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 102) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->supports_rate_limit_response = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->protocol_version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->protocol_version);
        }

        if ($this->obfustucated_private_ip !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->obfustucated_private_ip);
        }

        if ($this->cell_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cell_id);
        }

        if ($this->last_session_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->last_session_id);
        }

        if ($this->client_package_version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->client_package_version);
        }

        if ($this->client_language !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->client_language);
        }

        if ($this->client_os_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->client_os_type);
        }

        if ($this->should_remember_password !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->wine_version !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->wine_version);
        }

        if ($this->ping_ms_from_cell_search !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ping_ms_from_cell_search);
        }

        if ($this->public_ip !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->public_ip);
        }

        if ($this->qos_level !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->qos_level);
        }

        if ($this->client_supplied_steam_id !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->machine_id !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->machine_id);
        }

        if ($this->launcher_type !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->launcher_type);
        }

        if ($this->ui_mode !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ui_mode);
        }

        if ($this->steam2_auth_ticket !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->steam2_auth_ticket);
        }

        if ($this->email_address !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->email_address);
        }

        if ($this->rtime32_account_creation !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->account_name !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->account_name);
        }

        if ($this->password !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->password);
        }

        if ($this->game_server_token !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->game_server_token);
        }

        if ($this->login_key !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->login_key);
        }

        if ($this->was_converted_deprecated_msg !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->anon_user_target_account_name !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->anon_user_target_account_name);
        }

        if ($this->resolved_user_steam_id !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->eresult_sentryfile !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->eresult_sentryfile);
        }

        if ($this->sha_sentryfile !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->sha_sentryfile);
        }

        if ($this->auth_code !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->auth_code);
        }

        if ($this->otp_type !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->otp_type);
        }

        if ($this->otp_value !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->otp_value);
        }

        if ($this->otp_identifier !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->otp_identifier);
        }

        if ($this->steam2_ticket_request !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->sony_psn_ticket !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->sony_psn_ticket);
        }

        if ($this->sony_psn_service_id !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->sony_psn_service_id);
        }

        if ($this->create_new_psn_linked_account_if_needed !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->sony_psn_name !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->sony_psn_name);
        }

        if ($this->game_server_app_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->game_server_app_id);
        }

        if ($this->steamguard_dont_remember_computer !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->machine_name !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->machine_name);
        }

        if ($this->machine_name_userchosen !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->machine_name_userchosen);
        }

        if ($this->country_override !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->country_override);
        }

        if ($this->is_steam_box !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->client_instance_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->client_instance_id);
        }

        if ($this->two_factor_code !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->two_factor_code);
        }

        if ($this->supports_rate_limit_response !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->protocol_version = null;
        $this->obfustucated_private_ip = null;
        $this->cell_id = null;
        $this->last_session_id = null;
        $this->client_package_version = null;
        $this->client_language = null;
        $this->client_os_type = null;
        $this->should_remember_password = false;
        $this->wine_version = null;
        $this->ping_ms_from_cell_search = null;
        $this->public_ip = null;
        $this->qos_level = null;
        $this->client_supplied_steam_id = null;
        $this->machine_id = null;
        $this->launcher_type = '0';
        $this->ui_mode = '0';
        $this->steam2_auth_ticket = null;
        $this->email_address = null;
        $this->rtime32_account_creation = null;
        $this->account_name = null;
        $this->password = null;
        $this->game_server_token = null;
        $this->login_key = null;
        $this->was_converted_deprecated_msg = false;
        $this->anon_user_target_account_name = null;
        $this->resolved_user_steam_id = null;
        $this->eresult_sentryfile = null;
        $this->sha_sentryfile = null;
        $this->auth_code = null;
        $this->otp_type = null;
        $this->otp_value = null;
        $this->otp_identifier = null;
        $this->steam2_ticket_request = null;
        $this->sony_psn_ticket = null;
        $this->sony_psn_service_id = null;
        $this->create_new_psn_linked_account_if_needed = false;
        $this->sony_psn_name = null;
        $this->game_server_app_id = null;
        $this->steamguard_dont_remember_computer = null;
        $this->machine_name = null;
        $this->machine_name_userchosen = null;
        $this->country_override = null;
        $this->is_steam_box = null;
        $this->client_instance_id = null;
        $this->two_factor_code = null;
        $this->supports_rate_limit_response = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientLogon) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->protocol_version = ($message->protocol_version !== null) ? $message->protocol_version : $this->protocol_version;
        $this->obfustucated_private_ip = ($message->obfustucated_private_ip !== null) ? $message->obfustucated_private_ip : $this->obfustucated_private_ip;
        $this->cell_id = ($message->cell_id !== null) ? $message->cell_id : $this->cell_id;
        $this->last_session_id = ($message->last_session_id !== null) ? $message->last_session_id : $this->last_session_id;
        $this->client_package_version = ($message->client_package_version !== null) ? $message->client_package_version : $this->client_package_version;
        $this->client_language = ($message->client_language !== null) ? $message->client_language : $this->client_language;
        $this->client_os_type = ($message->client_os_type !== null) ? $message->client_os_type : $this->client_os_type;
        $this->should_remember_password = ($message->should_remember_password !== null) ? $message->should_remember_password : $this->should_remember_password;
        $this->wine_version = ($message->wine_version !== null) ? $message->wine_version : $this->wine_version;
        $this->ping_ms_from_cell_search = ($message->ping_ms_from_cell_search !== null) ? $message->ping_ms_from_cell_search : $this->ping_ms_from_cell_search;
        $this->public_ip = ($message->public_ip !== null) ? $message->public_ip : $this->public_ip;
        $this->qos_level = ($message->qos_level !== null) ? $message->qos_level : $this->qos_level;
        $this->client_supplied_steam_id = ($message->client_supplied_steam_id !== null) ? $message->client_supplied_steam_id : $this->client_supplied_steam_id;
        $this->machine_id = ($message->machine_id !== null) ? $message->machine_id : $this->machine_id;
        $this->launcher_type = ($message->launcher_type !== null) ? $message->launcher_type : $this->launcher_type;
        $this->ui_mode = ($message->ui_mode !== null) ? $message->ui_mode : $this->ui_mode;
        $this->steam2_auth_ticket = ($message->steam2_auth_ticket !== null) ? $message->steam2_auth_ticket : $this->steam2_auth_ticket;
        $this->email_address = ($message->email_address !== null) ? $message->email_address : $this->email_address;
        $this->rtime32_account_creation = ($message->rtime32_account_creation !== null) ? $message->rtime32_account_creation : $this->rtime32_account_creation;
        $this->account_name = ($message->account_name !== null) ? $message->account_name : $this->account_name;
        $this->password = ($message->password !== null) ? $message->password : $this->password;
        $this->game_server_token = ($message->game_server_token !== null) ? $message->game_server_token : $this->game_server_token;
        $this->login_key = ($message->login_key !== null) ? $message->login_key : $this->login_key;
        $this->was_converted_deprecated_msg = ($message->was_converted_deprecated_msg !== null) ? $message->was_converted_deprecated_msg : $this->was_converted_deprecated_msg;
        $this->anon_user_target_account_name = ($message->anon_user_target_account_name !== null) ? $message->anon_user_target_account_name : $this->anon_user_target_account_name;
        $this->resolved_user_steam_id = ($message->resolved_user_steam_id !== null) ? $message->resolved_user_steam_id : $this->resolved_user_steam_id;
        $this->eresult_sentryfile = ($message->eresult_sentryfile !== null) ? $message->eresult_sentryfile : $this->eresult_sentryfile;
        $this->sha_sentryfile = ($message->sha_sentryfile !== null) ? $message->sha_sentryfile : $this->sha_sentryfile;
        $this->auth_code = ($message->auth_code !== null) ? $message->auth_code : $this->auth_code;
        $this->otp_type = ($message->otp_type !== null) ? $message->otp_type : $this->otp_type;
        $this->otp_value = ($message->otp_value !== null) ? $message->otp_value : $this->otp_value;
        $this->otp_identifier = ($message->otp_identifier !== null) ? $message->otp_identifier : $this->otp_identifier;
        $this->steam2_ticket_request = ($message->steam2_ticket_request !== null) ? $message->steam2_ticket_request : $this->steam2_ticket_request;
        $this->sony_psn_ticket = ($message->sony_psn_ticket !== null) ? $message->sony_psn_ticket : $this->sony_psn_ticket;
        $this->sony_psn_service_id = ($message->sony_psn_service_id !== null) ? $message->sony_psn_service_id : $this->sony_psn_service_id;
        $this->create_new_psn_linked_account_if_needed = ($message->create_new_psn_linked_account_if_needed !== null) ? $message->create_new_psn_linked_account_if_needed : $this->create_new_psn_linked_account_if_needed;
        $this->sony_psn_name = ($message->sony_psn_name !== null) ? $message->sony_psn_name : $this->sony_psn_name;
        $this->game_server_app_id = ($message->game_server_app_id !== null) ? $message->game_server_app_id : $this->game_server_app_id;
        $this->steamguard_dont_remember_computer = ($message->steamguard_dont_remember_computer !== null) ? $message->steamguard_dont_remember_computer : $this->steamguard_dont_remember_computer;
        $this->machine_name = ($message->machine_name !== null) ? $message->machine_name : $this->machine_name;
        $this->machine_name_userchosen = ($message->machine_name_userchosen !== null) ? $message->machine_name_userchosen : $this->machine_name_userchosen;
        $this->country_override = ($message->country_override !== null) ? $message->country_override : $this->country_override;
        $this->is_steam_box = ($message->is_steam_box !== null) ? $message->is_steam_box : $this->is_steam_box;
        $this->client_instance_id = ($message->client_instance_id !== null) ? $message->client_instance_id : $this->client_instance_id;
        $this->two_factor_code = ($message->two_factor_code !== null) ? $message->two_factor_code : $this->two_factor_code;
        $this->supports_rate_limit_response = ($message->supports_rate_limit_response !== null) ? $message->supports_rate_limit_response : $this->supports_rate_limit_response;
    }


}

