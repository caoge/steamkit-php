<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer\CMsgClientGamesPlayed;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientGamesPlayed.GamePlayed
 */
class GamePlayed extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steam_id_gs optional uint64 = 1
     *
     * @var int
     */
    protected $steam_id_gs = null;

    /**
     * game_id optional fixed64 = 2
     *
     * @var int
     */
    protected $game_id = null;

    /**
     * game_ip_address optional uint32 = 3
     *
     * @var int
     */
    protected $game_ip_address = null;

    /**
     * game_port optional uint32 = 4
     *
     * @var int
     */
    protected $game_port = null;

    /**
     * is_secure optional bool = 5
     *
     * @var bool
     */
    protected $is_secure = null;

    /**
     * token optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $token = null;

    /**
     * game_extra_info optional string = 7
     *
     * @var string
     */
    protected $game_extra_info = null;

    /**
     * game_data_blob optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $game_data_blob = null;

    /**
     * process_id optional uint32 = 9
     *
     * @var int
     */
    protected $process_id = null;

    /**
     * streaming_provider_id optional uint32 = 10
     *
     * @var int
     */
    protected $streaming_provider_id = null;

    /**
     * game_flags optional uint32 = 11
     *
     * @var int
     */
    protected $game_flags = null;

    /**
     * owner_id optional uint32 = 12
     *
     * @var int
     */
    protected $owner_id = null;

    /**
     * vr_hmd_vendor optional string = 13
     *
     * @var string
     */
    protected $vr_hmd_vendor = null;

    /**
     * vr_hmd_model optional string = 14
     *
     * @var string
     */
    protected $vr_hmd_model = null;

    /**
     * launch_option_type optional uint32 = 15
     *
     * @var int
     */
    protected $launch_option_type = null;

    /**
     * primary_controller_type optional int32 = 16
     *
     * @var int
     */
    protected $primary_controller_type = null;

    /**
     * primary_steam_controller_serial optional string = 17
     *
     * @var string
     */
    protected $primary_steam_controller_serial = null;

    /**
     * total_steam_controller_count optional uint32 = 18
     *
     * @var int
     */
    protected $total_steam_controller_count = null;

    /**
     * total_non_steam_controller_count optional uint32 = 19
     *
     * @var int
     */
    protected $total_non_steam_controller_count = null;

    /**
     * controller_workshop_file_id optional uint64 = 20
     *
     * @var int
     */
    protected $controller_workshop_file_id = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->launch_option_type = '0';
        $this->primary_controller_type = '-1';
        $this->total_steam_controller_count = '0';
        $this->total_non_steam_controller_count = '0';
        $this->controller_workshop_file_id = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'steam_id_gs' has a value
     *
     * @return bool
     */
    public function hasSteamIdGs()
    {
        return $this->steam_id_gs !== null;
    }

    /**
     * Get 'steam_id_gs' value
     *
     * @return int
     */
    public function getSteamIdGs()
    {
        return $this->steam_id_gs;
    }

    /**
     * Set 'steam_id_gs' value
     *
     * @param int $value
     */
    public function setSteamIdGs($value = null)
    {
        $this->steam_id_gs = $value;
    }

    /**
     * Check if 'game_id' has a value
     *
     * @return bool
     */
    public function hasGameId()
    {
        return $this->game_id !== null;
    }

    /**
     * Get 'game_id' value
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->game_id;
    }

    /**
     * Set 'game_id' value
     *
     * @param int $value
     */
    public function setGameId($value = null)
    {
        $this->game_id = $value;
    }

    /**
     * Check if 'game_ip_address' has a value
     *
     * @return bool
     */
    public function hasGameIpAddress()
    {
        return $this->game_ip_address !== null;
    }

    /**
     * Get 'game_ip_address' value
     *
     * @return int
     */
    public function getGameIpAddress()
    {
        return $this->game_ip_address;
    }

    /**
     * Set 'game_ip_address' value
     *
     * @param int $value
     */
    public function setGameIpAddress($value = null)
    {
        $this->game_ip_address = $value;
    }

    /**
     * Check if 'game_port' has a value
     *
     * @return bool
     */
    public function hasGamePort()
    {
        return $this->game_port !== null;
    }

    /**
     * Get 'game_port' value
     *
     * @return int
     */
    public function getGamePort()
    {
        return $this->game_port;
    }

    /**
     * Set 'game_port' value
     *
     * @param int $value
     */
    public function setGamePort($value = null)
    {
        $this->game_port = $value;
    }

    /**
     * Check if 'is_secure' has a value
     *
     * @return bool
     */
    public function hasIsSecure()
    {
        return $this->is_secure !== null;
    }

    /**
     * Get 'is_secure' value
     *
     * @return bool
     */
    public function getIsSecure()
    {
        return $this->is_secure;
    }

    /**
     * Set 'is_secure' value
     *
     * @param bool $value
     */
    public function setIsSecure($value = null)
    {
        $this->is_secure = $value;
    }

    /**
     * Check if 'token' has a value
     *
     * @return bool
     */
    public function hasToken()
    {
        return $this->token !== null;
    }

    /**
     * Get 'token' value
     *
     * @return \Protobuf\Stream
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Set 'token' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setToken($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->token = $value;
    }

    /**
     * Check if 'game_extra_info' has a value
     *
     * @return bool
     */
    public function hasGameExtraInfo()
    {
        return $this->game_extra_info !== null;
    }

    /**
     * Get 'game_extra_info' value
     *
     * @return string
     */
    public function getGameExtraInfo()
    {
        return $this->game_extra_info;
    }

    /**
     * Set 'game_extra_info' value
     *
     * @param string $value
     */
    public function setGameExtraInfo($value = null)
    {
        $this->game_extra_info = $value;
    }

    /**
     * Check if 'game_data_blob' has a value
     *
     * @return bool
     */
    public function hasGameDataBlob()
    {
        return $this->game_data_blob !== null;
    }

    /**
     * Get 'game_data_blob' value
     *
     * @return \Protobuf\Stream
     */
    public function getGameDataBlob()
    {
        return $this->game_data_blob;
    }

    /**
     * Set 'game_data_blob' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGameDataBlob($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->game_data_blob = $value;
    }

    /**
     * Check if 'process_id' has a value
     *
     * @return bool
     */
    public function hasProcessId()
    {
        return $this->process_id !== null;
    }

    /**
     * Get 'process_id' value
     *
     * @return int
     */
    public function getProcessId()
    {
        return $this->process_id;
    }

    /**
     * Set 'process_id' value
     *
     * @param int $value
     */
    public function setProcessId($value = null)
    {
        $this->process_id = $value;
    }

    /**
     * Check if 'streaming_provider_id' has a value
     *
     * @return bool
     */
    public function hasStreamingProviderId()
    {
        return $this->streaming_provider_id !== null;
    }

    /**
     * Get 'streaming_provider_id' value
     *
     * @return int
     */
    public function getStreamingProviderId()
    {
        return $this->streaming_provider_id;
    }

    /**
     * Set 'streaming_provider_id' value
     *
     * @param int $value
     */
    public function setStreamingProviderId($value = null)
    {
        $this->streaming_provider_id = $value;
    }

    /**
     * Check if 'game_flags' has a value
     *
     * @return bool
     */
    public function hasGameFlags()
    {
        return $this->game_flags !== null;
    }

    /**
     * Get 'game_flags' value
     *
     * @return int
     */
    public function getGameFlags()
    {
        return $this->game_flags;
    }

    /**
     * Set 'game_flags' value
     *
     * @param int $value
     */
    public function setGameFlags($value = null)
    {
        $this->game_flags = $value;
    }

    /**
     * Check if 'owner_id' has a value
     *
     * @return bool
     */
    public function hasOwnerId()
    {
        return $this->owner_id !== null;
    }

    /**
     * Get 'owner_id' value
     *
     * @return int
     */
    public function getOwnerId()
    {
        return $this->owner_id;
    }

    /**
     * Set 'owner_id' value
     *
     * @param int $value
     */
    public function setOwnerId($value = null)
    {
        $this->owner_id = $value;
    }

    /**
     * Check if 'vr_hmd_vendor' has a value
     *
     * @return bool
     */
    public function hasVrHmdVendor()
    {
        return $this->vr_hmd_vendor !== null;
    }

    /**
     * Get 'vr_hmd_vendor' value
     *
     * @return string
     */
    public function getVrHmdVendor()
    {
        return $this->vr_hmd_vendor;
    }

    /**
     * Set 'vr_hmd_vendor' value
     *
     * @param string $value
     */
    public function setVrHmdVendor($value = null)
    {
        $this->vr_hmd_vendor = $value;
    }

    /**
     * Check if 'vr_hmd_model' has a value
     *
     * @return bool
     */
    public function hasVrHmdModel()
    {
        return $this->vr_hmd_model !== null;
    }

    /**
     * Get 'vr_hmd_model' value
     *
     * @return string
     */
    public function getVrHmdModel()
    {
        return $this->vr_hmd_model;
    }

    /**
     * Set 'vr_hmd_model' value
     *
     * @param string $value
     */
    public function setVrHmdModel($value = null)
    {
        $this->vr_hmd_model = $value;
    }

    /**
     * Check if 'launch_option_type' has a value
     *
     * @return bool
     */
    public function hasLaunchOptionType()
    {
        return $this->launch_option_type !== null;
    }

    /**
     * Get 'launch_option_type' value
     *
     * @return int
     */
    public function getLaunchOptionType()
    {
        return $this->launch_option_type;
    }

    /**
     * Set 'launch_option_type' value
     *
     * @param int $value
     */
    public function setLaunchOptionType($value = null)
    {
        $this->launch_option_type = $value;
    }

    /**
     * Check if 'primary_controller_type' has a value
     *
     * @return bool
     */
    public function hasPrimaryControllerType()
    {
        return $this->primary_controller_type !== null;
    }

    /**
     * Get 'primary_controller_type' value
     *
     * @return int
     */
    public function getPrimaryControllerType()
    {
        return $this->primary_controller_type;
    }

    /**
     * Set 'primary_controller_type' value
     *
     * @param int $value
     */
    public function setPrimaryControllerType($value = null)
    {
        $this->primary_controller_type = $value;
    }

    /**
     * Check if 'primary_steam_controller_serial' has a value
     *
     * @return bool
     */
    public function hasPrimarySteamControllerSerial()
    {
        return $this->primary_steam_controller_serial !== null;
    }

    /**
     * Get 'primary_steam_controller_serial' value
     *
     * @return string
     */
    public function getPrimarySteamControllerSerial()
    {
        return $this->primary_steam_controller_serial;
    }

    /**
     * Set 'primary_steam_controller_serial' value
     *
     * @param string $value
     */
    public function setPrimarySteamControllerSerial($value = null)
    {
        $this->primary_steam_controller_serial = $value;
    }

    /**
     * Check if 'total_steam_controller_count' has a value
     *
     * @return bool
     */
    public function hasTotalSteamControllerCount()
    {
        return $this->total_steam_controller_count !== null;
    }

    /**
     * Get 'total_steam_controller_count' value
     *
     * @return int
     */
    public function getTotalSteamControllerCount()
    {
        return $this->total_steam_controller_count;
    }

    /**
     * Set 'total_steam_controller_count' value
     *
     * @param int $value
     */
    public function setTotalSteamControllerCount($value = null)
    {
        $this->total_steam_controller_count = $value;
    }

    /**
     * Check if 'total_non_steam_controller_count' has a value
     *
     * @return bool
     */
    public function hasTotalNonSteamControllerCount()
    {
        return $this->total_non_steam_controller_count !== null;
    }

    /**
     * Get 'total_non_steam_controller_count' value
     *
     * @return int
     */
    public function getTotalNonSteamControllerCount()
    {
        return $this->total_non_steam_controller_count;
    }

    /**
     * Set 'total_non_steam_controller_count' value
     *
     * @param int $value
     */
    public function setTotalNonSteamControllerCount($value = null)
    {
        $this->total_non_steam_controller_count = $value;
    }

    /**
     * Check if 'controller_workshop_file_id' has a value
     *
     * @return bool
     */
    public function hasControllerWorkshopFileId()
    {
        return $this->controller_workshop_file_id !== null;
    }

    /**
     * Get 'controller_workshop_file_id' value
     *
     * @return int
     */
    public function getControllerWorkshopFileId()
    {
        return $this->controller_workshop_file_id;
    }

    /**
     * Set 'controller_workshop_file_id' value
     *
     * @param int $value
     */
    public function setControllerWorkshopFileId($value = null)
    {
        $this->controller_workshop_file_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steam_id_gs' => null,
            'game_id' => null,
            'game_ip_address' => null,
            'game_port' => null,
            'is_secure' => null,
            'token' => null,
            'game_extra_info' => null,
            'game_data_blob' => null,
            'process_id' => null,
            'streaming_provider_id' => null,
            'game_flags' => null,
            'owner_id' => null,
            'vr_hmd_vendor' => null,
            'vr_hmd_model' => null,
            'launch_option_type' => '0',
            'primary_controller_type' => '-1',
            'primary_steam_controller_serial' => null,
            'total_steam_controller_count' => '0',
            'total_non_steam_controller_count' => '0',
            'controller_workshop_file_id' => '0'
        ], $values);

        $message->setSteamIdGs($values['steam_id_gs']);
        $message->setGameId($values['game_id']);
        $message->setGameIpAddress($values['game_ip_address']);
        $message->setGamePort($values['game_port']);
        $message->setIsSecure($values['is_secure']);
        $message->setToken($values['token']);
        $message->setGameExtraInfo($values['game_extra_info']);
        $message->setGameDataBlob($values['game_data_blob']);
        $message->setProcessId($values['process_id']);
        $message->setStreamingProviderId($values['streaming_provider_id']);
        $message->setGameFlags($values['game_flags']);
        $message->setOwnerId($values['owner_id']);
        $message->setVrHmdVendor($values['vr_hmd_vendor']);
        $message->setVrHmdModel($values['vr_hmd_model']);
        $message->setLaunchOptionType($values['launch_option_type']);
        $message->setPrimaryControllerType($values['primary_controller_type']);
        $message->setPrimarySteamControllerSerial($values['primary_steam_controller_serial']);
        $message->setTotalSteamControllerCount($values['total_steam_controller_count']);
        $message->setTotalNonSteamControllerCount($values['total_non_steam_controller_count']);
        $message->setControllerWorkshopFileId($values['controller_workshop_file_id']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GamePlayed',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steam_id_gs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'game_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'game_ip_address',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'game_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'is_secure',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'token',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'game_extra_info',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'game_data_blob',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'process_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'streaming_provider_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'game_flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'owner_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'vr_hmd_vendor',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'vr_hmd_model',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'launch_option_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'primary_controller_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '-1'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'primary_steam_controller_serial',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'total_steam_controller_count',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'total_non_steam_controller_count',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'controller_workshop_file_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steam_id_gs !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->steam_id_gs);
        }

        if ($this->game_id !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->game_id);
        }

        if ($this->game_ip_address !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->game_ip_address);
        }

        if ($this->game_port !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->game_port);
        }

        if ($this->is_secure !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->is_secure);
        }

        if ($this->token !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->token);
        }

        if ($this->game_extra_info !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->game_extra_info);
        }

        if ($this->game_data_blob !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->game_data_blob);
        }

        if ($this->process_id !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->process_id);
        }

        if ($this->streaming_provider_id !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->streaming_provider_id);
        }

        if ($this->game_flags !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->game_flags);
        }

        if ($this->owner_id !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->owner_id);
        }

        if ($this->vr_hmd_vendor !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->vr_hmd_vendor);
        }

        if ($this->vr_hmd_model !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->vr_hmd_model);
        }

        if ($this->launch_option_type !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->launch_option_type);
        }

        if ($this->primary_controller_type !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->primary_controller_type);
        }

        if ($this->primary_steam_controller_serial !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->primary_steam_controller_serial);
        }

        if ($this->total_steam_controller_count !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeVarint($stream, $this->total_steam_controller_count);
        }

        if ($this->total_non_steam_controller_count !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->total_non_steam_controller_count);
        }

        if ($this->controller_workshop_file_id !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->controller_workshop_file_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->steam_id_gs = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->game_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->game_ip_address = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->game_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_secure = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->token = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->game_extra_info = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->game_data_blob = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->process_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->streaming_provider_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->game_flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->owner_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vr_hmd_vendor = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vr_hmd_model = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->launch_option_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->primary_controller_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->primary_steam_controller_serial = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->total_steam_controller_count = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->total_non_steam_controller_count = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->controller_workshop_file_id = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steam_id_gs !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->steam_id_gs);
        }

        if ($this->game_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->game_ip_address !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->game_ip_address);
        }

        if ($this->game_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->game_port);
        }

        if ($this->is_secure !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->token !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->token);
        }

        if ($this->game_extra_info !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->game_extra_info);
        }

        if ($this->game_data_blob !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->game_data_blob);
        }

        if ($this->process_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->process_id);
        }

        if ($this->streaming_provider_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->streaming_provider_id);
        }

        if ($this->game_flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->game_flags);
        }

        if ($this->owner_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->owner_id);
        }

        if ($this->vr_hmd_vendor !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->vr_hmd_vendor);
        }

        if ($this->vr_hmd_model !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->vr_hmd_model);
        }

        if ($this->launch_option_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->launch_option_type);
        }

        if ($this->primary_controller_type !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->primary_controller_type);
        }

        if ($this->primary_steam_controller_serial !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->primary_steam_controller_serial);
        }

        if ($this->total_steam_controller_count !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->total_steam_controller_count);
        }

        if ($this->total_non_steam_controller_count !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->total_non_steam_controller_count);
        }

        if ($this->controller_workshop_file_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->controller_workshop_file_id);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steam_id_gs = null;
        $this->game_id = null;
        $this->game_ip_address = null;
        $this->game_port = null;
        $this->is_secure = null;
        $this->token = null;
        $this->game_extra_info = null;
        $this->game_data_blob = null;
        $this->process_id = null;
        $this->streaming_provider_id = null;
        $this->game_flags = null;
        $this->owner_id = null;
        $this->vr_hmd_vendor = null;
        $this->vr_hmd_model = null;
        $this->launch_option_type = '0';
        $this->primary_controller_type = '-1';
        $this->primary_steam_controller_serial = null;
        $this->total_steam_controller_count = '0';
        $this->total_non_steam_controller_count = '0';
        $this->controller_workshop_file_id = '0';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientGamesPlayed\GamePlayed) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steam_id_gs = ($message->steam_id_gs !== null) ? $message->steam_id_gs : $this->steam_id_gs;
        $this->game_id = ($message->game_id !== null) ? $message->game_id : $this->game_id;
        $this->game_ip_address = ($message->game_ip_address !== null) ? $message->game_ip_address : $this->game_ip_address;
        $this->game_port = ($message->game_port !== null) ? $message->game_port : $this->game_port;
        $this->is_secure = ($message->is_secure !== null) ? $message->is_secure : $this->is_secure;
        $this->token = ($message->token !== null) ? $message->token : $this->token;
        $this->game_extra_info = ($message->game_extra_info !== null) ? $message->game_extra_info : $this->game_extra_info;
        $this->game_data_blob = ($message->game_data_blob !== null) ? $message->game_data_blob : $this->game_data_blob;
        $this->process_id = ($message->process_id !== null) ? $message->process_id : $this->process_id;
        $this->streaming_provider_id = ($message->streaming_provider_id !== null) ? $message->streaming_provider_id : $this->streaming_provider_id;
        $this->game_flags = ($message->game_flags !== null) ? $message->game_flags : $this->game_flags;
        $this->owner_id = ($message->owner_id !== null) ? $message->owner_id : $this->owner_id;
        $this->vr_hmd_vendor = ($message->vr_hmd_vendor !== null) ? $message->vr_hmd_vendor : $this->vr_hmd_vendor;
        $this->vr_hmd_model = ($message->vr_hmd_model !== null) ? $message->vr_hmd_model : $this->vr_hmd_model;
        $this->launch_option_type = ($message->launch_option_type !== null) ? $message->launch_option_type : $this->launch_option_type;
        $this->primary_controller_type = ($message->primary_controller_type !== null) ? $message->primary_controller_type : $this->primary_controller_type;
        $this->primary_steam_controller_serial = ($message->primary_steam_controller_serial !== null) ? $message->primary_steam_controller_serial : $this->primary_steam_controller_serial;
        $this->total_steam_controller_count = ($message->total_steam_controller_count !== null) ? $message->total_steam_controller_count : $this->total_steam_controller_count;
        $this->total_non_steam_controller_count = ($message->total_non_steam_controller_count !== null) ? $message->total_non_steam_controller_count : $this->total_non_steam_controller_count;
        $this->controller_workshop_file_id = ($message->controller_workshop_file_id !== null) ? $message->controller_workshop_file_id : $this->controller_workshop_file_id;
    }


}

