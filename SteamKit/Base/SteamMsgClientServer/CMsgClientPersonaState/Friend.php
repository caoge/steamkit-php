<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer\CMsgClientPersonaState;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientPersonaState.Friend
 */
class Friend extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * friendid optional fixed64 = 1
     *
     * @var int
     */
    protected $friendid = null;

    /**
     * persona_state optional uint32 = 2
     *
     * @var int
     */
    protected $persona_state = null;

    /**
     * game_played_app_id optional uint32 = 3
     *
     * @var int
     */
    protected $game_played_app_id = null;

    /**
     * game_server_ip optional uint32 = 4
     *
     * @var int
     */
    protected $game_server_ip = null;

    /**
     * game_server_port optional uint32 = 5
     *
     * @var int
     */
    protected $game_server_port = null;

    /**
     * persona_state_flags optional uint32 = 6
     *
     * @var int
     */
    protected $persona_state_flags = null;

    /**
     * online_session_instances optional uint32 = 7
     *
     * @var int
     */
    protected $online_session_instances = null;

    /**
     * published_instance_id optional uint32 = 8
     *
     * @var int
     */
    protected $published_instance_id = null;

    /**
     * persona_set_by_user optional bool = 10
     *
     * @var bool
     */
    protected $persona_set_by_user = null;

    /**
     * player_name optional string = 15
     *
     * @var string
     */
    protected $player_name = null;

    /**
     * query_port optional uint32 = 20
     *
     * @var int
     */
    protected $query_port = null;

    /**
     * steamid_source optional fixed64 = 25
     *
     * @var int
     */
    protected $steamid_source = null;

    /**
     * avatar_hash optional bytes = 31
     *
     * @var \Protobuf\Stream
     */
    protected $avatar_hash = null;

    /**
     * last_logoff optional uint32 = 45
     *
     * @var int
     */
    protected $last_logoff = null;

    /**
     * last_logon optional uint32 = 46
     *
     * @var int
     */
    protected $last_logon = null;

    /**
     * clan_rank optional uint32 = 50
     *
     * @var int
     */
    protected $clan_rank = null;

    /**
     * game_name optional string = 55
     *
     * @var string
     */
    protected $game_name = null;

    /**
     * gameid optional fixed64 = 56
     *
     * @var int
     */
    protected $gameid = null;

    /**
     * game_data_blob optional bytes = 60
     *
     * @var \Protobuf\Stream
     */
    protected $game_data_blob = null;

    /**
     * clan_tag optional string = 65
     *
     * @var string
     */
    protected $clan_tag = null;

    /**
     * facebook_name optional string = 66
     *
     * @var string
     */
    protected $facebook_name = null;

    /**
     * facebook_id optional uint64 = 67
     *
     * @var int
     */
    protected $facebook_id = null;

    /**
     * Check if 'friendid' has a value
     *
     * @return bool
     */
    public function hasFriendid()
    {
        return $this->friendid !== null;
    }

    /**
     * Get 'friendid' value
     *
     * @return int
     */
    public function getFriendid()
    {
        return $this->friendid;
    }

    /**
     * Set 'friendid' value
     *
     * @param int $value
     */
    public function setFriendid($value = null)
    {
        $this->friendid = $value;
    }

    /**
     * Check if 'persona_state' has a value
     *
     * @return bool
     */
    public function hasPersonaState()
    {
        return $this->persona_state !== null;
    }

    /**
     * Get 'persona_state' value
     *
     * @return int
     */
    public function getPersonaState()
    {
        return $this->persona_state;
    }

    /**
     * Set 'persona_state' value
     *
     * @param int $value
     */
    public function setPersonaState($value = null)
    {
        $this->persona_state = $value;
    }

    /**
     * Check if 'game_played_app_id' has a value
     *
     * @return bool
     */
    public function hasGamePlayedAppId()
    {
        return $this->game_played_app_id !== null;
    }

    /**
     * Get 'game_played_app_id' value
     *
     * @return int
     */
    public function getGamePlayedAppId()
    {
        return $this->game_played_app_id;
    }

    /**
     * Set 'game_played_app_id' value
     *
     * @param int $value
     */
    public function setGamePlayedAppId($value = null)
    {
        $this->game_played_app_id = $value;
    }

    /**
     * Check if 'game_server_ip' has a value
     *
     * @return bool
     */
    public function hasGameServerIp()
    {
        return $this->game_server_ip !== null;
    }

    /**
     * Get 'game_server_ip' value
     *
     * @return int
     */
    public function getGameServerIp()
    {
        return $this->game_server_ip;
    }

    /**
     * Set 'game_server_ip' value
     *
     * @param int $value
     */
    public function setGameServerIp($value = null)
    {
        $this->game_server_ip = $value;
    }

    /**
     * Check if 'game_server_port' has a value
     *
     * @return bool
     */
    public function hasGameServerPort()
    {
        return $this->game_server_port !== null;
    }

    /**
     * Get 'game_server_port' value
     *
     * @return int
     */
    public function getGameServerPort()
    {
        return $this->game_server_port;
    }

    /**
     * Set 'game_server_port' value
     *
     * @param int $value
     */
    public function setGameServerPort($value = null)
    {
        $this->game_server_port = $value;
    }

    /**
     * Check if 'persona_state_flags' has a value
     *
     * @return bool
     */
    public function hasPersonaStateFlags()
    {
        return $this->persona_state_flags !== null;
    }

    /**
     * Get 'persona_state_flags' value
     *
     * @return int
     */
    public function getPersonaStateFlags()
    {
        return $this->persona_state_flags;
    }

    /**
     * Set 'persona_state_flags' value
     *
     * @param int $value
     */
    public function setPersonaStateFlags($value = null)
    {
        $this->persona_state_flags = $value;
    }

    /**
     * Check if 'online_session_instances' has a value
     *
     * @return bool
     */
    public function hasOnlineSessionInstances()
    {
        return $this->online_session_instances !== null;
    }

    /**
     * Get 'online_session_instances' value
     *
     * @return int
     */
    public function getOnlineSessionInstances()
    {
        return $this->online_session_instances;
    }

    /**
     * Set 'online_session_instances' value
     *
     * @param int $value
     */
    public function setOnlineSessionInstances($value = null)
    {
        $this->online_session_instances = $value;
    }

    /**
     * Check if 'published_instance_id' has a value
     *
     * @return bool
     */
    public function hasPublishedInstanceId()
    {
        return $this->published_instance_id !== null;
    }

    /**
     * Get 'published_instance_id' value
     *
     * @return int
     */
    public function getPublishedInstanceId()
    {
        return $this->published_instance_id;
    }

    /**
     * Set 'published_instance_id' value
     *
     * @param int $value
     */
    public function setPublishedInstanceId($value = null)
    {
        $this->published_instance_id = $value;
    }

    /**
     * Check if 'persona_set_by_user' has a value
     *
     * @return bool
     */
    public function hasPersonaSetByUser()
    {
        return $this->persona_set_by_user !== null;
    }

    /**
     * Get 'persona_set_by_user' value
     *
     * @return bool
     */
    public function getPersonaSetByUser()
    {
        return $this->persona_set_by_user;
    }

    /**
     * Set 'persona_set_by_user' value
     *
     * @param bool $value
     */
    public function setPersonaSetByUser($value = null)
    {
        $this->persona_set_by_user = $value;
    }

    /**
     * Check if 'player_name' has a value
     *
     * @return bool
     */
    public function hasPlayerName()
    {
        return $this->player_name !== null;
    }

    /**
     * Get 'player_name' value
     *
     * @return string
     */
    public function getPlayerName()
    {
        return $this->player_name;
    }

    /**
     * Set 'player_name' value
     *
     * @param string $value
     */
    public function setPlayerName($value = null)
    {
        $this->player_name = $value;
    }

    /**
     * Check if 'query_port' has a value
     *
     * @return bool
     */
    public function hasQueryPort()
    {
        return $this->query_port !== null;
    }

    /**
     * Get 'query_port' value
     *
     * @return int
     */
    public function getQueryPort()
    {
        return $this->query_port;
    }

    /**
     * Set 'query_port' value
     *
     * @param int $value
     */
    public function setQueryPort($value = null)
    {
        $this->query_port = $value;
    }

    /**
     * Check if 'steamid_source' has a value
     *
     * @return bool
     */
    public function hasSteamidSource()
    {
        return $this->steamid_source !== null;
    }

    /**
     * Get 'steamid_source' value
     *
     * @return int
     */
    public function getSteamidSource()
    {
        return $this->steamid_source;
    }

    /**
     * Set 'steamid_source' value
     *
     * @param int $value
     */
    public function setSteamidSource($value = null)
    {
        $this->steamid_source = $value;
    }

    /**
     * Check if 'avatar_hash' has a value
     *
     * @return bool
     */
    public function hasAvatarHash()
    {
        return $this->avatar_hash !== null;
    }

    /**
     * Get 'avatar_hash' value
     *
     * @return \Protobuf\Stream
     */
    public function getAvatarHash()
    {
        return $this->avatar_hash;
    }

    /**
     * Set 'avatar_hash' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setAvatarHash($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->avatar_hash = $value;
    }

    /**
     * Check if 'last_logoff' has a value
     *
     * @return bool
     */
    public function hasLastLogoff()
    {
        return $this->last_logoff !== null;
    }

    /**
     * Get 'last_logoff' value
     *
     * @return int
     */
    public function getLastLogoff()
    {
        return $this->last_logoff;
    }

    /**
     * Set 'last_logoff' value
     *
     * @param int $value
     */
    public function setLastLogoff($value = null)
    {
        $this->last_logoff = $value;
    }

    /**
     * Check if 'last_logon' has a value
     *
     * @return bool
     */
    public function hasLastLogon()
    {
        return $this->last_logon !== null;
    }

    /**
     * Get 'last_logon' value
     *
     * @return int
     */
    public function getLastLogon()
    {
        return $this->last_logon;
    }

    /**
     * Set 'last_logon' value
     *
     * @param int $value
     */
    public function setLastLogon($value = null)
    {
        $this->last_logon = $value;
    }

    /**
     * Check if 'clan_rank' has a value
     *
     * @return bool
     */
    public function hasClanRank()
    {
        return $this->clan_rank !== null;
    }

    /**
     * Get 'clan_rank' value
     *
     * @return int
     */
    public function getClanRank()
    {
        return $this->clan_rank;
    }

    /**
     * Set 'clan_rank' value
     *
     * @param int $value
     */
    public function setClanRank($value = null)
    {
        $this->clan_rank = $value;
    }

    /**
     * Check if 'game_name' has a value
     *
     * @return bool
     */
    public function hasGameName()
    {
        return $this->game_name !== null;
    }

    /**
     * Get 'game_name' value
     *
     * @return string
     */
    public function getGameName()
    {
        return $this->game_name;
    }

    /**
     * Set 'game_name' value
     *
     * @param string $value
     */
    public function setGameName($value = null)
    {
        $this->game_name = $value;
    }

    /**
     * Check if 'gameid' has a value
     *
     * @return bool
     */
    public function hasGameid()
    {
        return $this->gameid !== null;
    }

    /**
     * Get 'gameid' value
     *
     * @return int
     */
    public function getGameid()
    {
        return $this->gameid;
    }

    /**
     * Set 'gameid' value
     *
     * @param int $value
     */
    public function setGameid($value = null)
    {
        $this->gameid = $value;
    }

    /**
     * Check if 'game_data_blob' has a value
     *
     * @return bool
     */
    public function hasGameDataBlob()
    {
        return $this->game_data_blob !== null;
    }

    /**
     * Get 'game_data_blob' value
     *
     * @return \Protobuf\Stream
     */
    public function getGameDataBlob()
    {
        return $this->game_data_blob;
    }

    /**
     * Set 'game_data_blob' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGameDataBlob($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->game_data_blob = $value;
    }

    /**
     * Check if 'clan_tag' has a value
     *
     * @return bool
     */
    public function hasClanTag()
    {
        return $this->clan_tag !== null;
    }

    /**
     * Get 'clan_tag' value
     *
     * @return string
     */
    public function getClanTag()
    {
        return $this->clan_tag;
    }

    /**
     * Set 'clan_tag' value
     *
     * @param string $value
     */
    public function setClanTag($value = null)
    {
        $this->clan_tag = $value;
    }

    /**
     * Check if 'facebook_name' has a value
     *
     * @return bool
     */
    public function hasFacebookName()
    {
        return $this->facebook_name !== null;
    }

    /**
     * Get 'facebook_name' value
     *
     * @return string
     */
    public function getFacebookName()
    {
        return $this->facebook_name;
    }

    /**
     * Set 'facebook_name' value
     *
     * @param string $value
     */
    public function setFacebookName($value = null)
    {
        $this->facebook_name = $value;
    }

    /**
     * Check if 'facebook_id' has a value
     *
     * @return bool
     */
    public function hasFacebookId()
    {
        return $this->facebook_id !== null;
    }

    /**
     * Get 'facebook_id' value
     *
     * @return int
     */
    public function getFacebookId()
    {
        return $this->facebook_id;
    }

    /**
     * Set 'facebook_id' value
     *
     * @param int $value
     */
    public function setFacebookId($value = null)
    {
        $this->facebook_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'friendid' => null,
            'persona_state' => null,
            'game_played_app_id' => null,
            'game_server_ip' => null,
            'game_server_port' => null,
            'persona_state_flags' => null,
            'online_session_instances' => null,
            'published_instance_id' => null,
            'persona_set_by_user' => null,
            'player_name' => null,
            'query_port' => null,
            'steamid_source' => null,
            'avatar_hash' => null,
            'last_logoff' => null,
            'last_logon' => null,
            'clan_rank' => null,
            'game_name' => null,
            'gameid' => null,
            'game_data_blob' => null,
            'clan_tag' => null,
            'facebook_name' => null,
            'facebook_id' => null
        ], $values);

        $message->setFriendid($values['friendid']);
        $message->setPersonaState($values['persona_state']);
        $message->setGamePlayedAppId($values['game_played_app_id']);
        $message->setGameServerIp($values['game_server_ip']);
        $message->setGameServerPort($values['game_server_port']);
        $message->setPersonaStateFlags($values['persona_state_flags']);
        $message->setOnlineSessionInstances($values['online_session_instances']);
        $message->setPublishedInstanceId($values['published_instance_id']);
        $message->setPersonaSetByUser($values['persona_set_by_user']);
        $message->setPlayerName($values['player_name']);
        $message->setQueryPort($values['query_port']);
        $message->setSteamidSource($values['steamid_source']);
        $message->setAvatarHash($values['avatar_hash']);
        $message->setLastLogoff($values['last_logoff']);
        $message->setLastLogon($values['last_logon']);
        $message->setClanRank($values['clan_rank']);
        $message->setGameName($values['game_name']);
        $message->setGameid($values['gameid']);
        $message->setGameDataBlob($values['game_data_blob']);
        $message->setClanTag($values['clan_tag']);
        $message->setFacebookName($values['facebook_name']);
        $message->setFacebookId($values['facebook_id']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Friend',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'friendid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'persona_state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'game_played_app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'game_server_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'game_server_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'persona_state_flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'online_session_instances',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'published_instance_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'persona_set_by_user',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'player_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'query_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'steamid_source',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 31,
                    'name' => 'avatar_hash',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 45,
                    'name' => 'last_logoff',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 46,
                    'name' => 'last_logon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 50,
                    'name' => 'clan_rank',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 55,
                    'name' => 'game_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 56,
                    'name' => 'gameid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 60,
                    'name' => 'game_data_blob',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 65,
                    'name' => 'clan_tag',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 66,
                    'name' => 'facebook_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 67,
                    'name' => 'facebook_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->friendid !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->friendid);
        }

        if ($this->persona_state !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->persona_state);
        }

        if ($this->game_played_app_id !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->game_played_app_id);
        }

        if ($this->game_server_ip !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->game_server_ip);
        }

        if ($this->game_server_port !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->game_server_port);
        }

        if ($this->persona_state_flags !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->persona_state_flags);
        }

        if ($this->online_session_instances !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->online_session_instances);
        }

        if ($this->published_instance_id !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->published_instance_id);
        }

        if ($this->persona_set_by_user !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->persona_set_by_user);
        }

        if ($this->player_name !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->player_name);
        }

        if ($this->query_port !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->query_port);
        }

        if ($this->steamid_source !== null) {
            $writer->writeVarint($stream, 201);
            $writer->writeFixed64($stream, $this->steamid_source);
        }

        if ($this->avatar_hash !== null) {
            $writer->writeVarint($stream, 250);
            $writer->writeByteStream($stream, $this->avatar_hash);
        }

        if ($this->last_logoff !== null) {
            $writer->writeVarint($stream, 360);
            $writer->writeVarint($stream, $this->last_logoff);
        }

        if ($this->last_logon !== null) {
            $writer->writeVarint($stream, 368);
            $writer->writeVarint($stream, $this->last_logon);
        }

        if ($this->clan_rank !== null) {
            $writer->writeVarint($stream, 400);
            $writer->writeVarint($stream, $this->clan_rank);
        }

        if ($this->game_name !== null) {
            $writer->writeVarint($stream, 442);
            $writer->writeString($stream, $this->game_name);
        }

        if ($this->gameid !== null) {
            $writer->writeVarint($stream, 449);
            $writer->writeFixed64($stream, $this->gameid);
        }

        if ($this->game_data_blob !== null) {
            $writer->writeVarint($stream, 482);
            $writer->writeByteStream($stream, $this->game_data_blob);
        }

        if ($this->clan_tag !== null) {
            $writer->writeVarint($stream, 522);
            $writer->writeString($stream, $this->clan_tag);
        }

        if ($this->facebook_name !== null) {
            $writer->writeVarint($stream, 530);
            $writer->writeString($stream, $this->facebook_name);
        }

        if ($this->facebook_id !== null) {
            $writer->writeVarint($stream, 536);
            $writer->writeVarint($stream, $this->facebook_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->friendid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->persona_state = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->game_played_app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->game_server_ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->game_server_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->persona_state_flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->online_session_instances = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->published_instance_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->persona_set_by_user = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->player_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->query_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steamid_source = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->avatar_hash = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 45) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_logoff = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 46) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_logon = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 50) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->clan_rank = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 55) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->game_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 56) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->gameid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 60) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->game_data_blob = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 65) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->clan_tag = $reader->readString($stream);

                continue;
            }

            if ($tag === 66) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->facebook_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 67) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->facebook_id = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->friendid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->persona_state !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->persona_state);
        }

        if ($this->game_played_app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->game_played_app_id);
        }

        if ($this->game_server_ip !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->game_server_ip);
        }

        if ($this->game_server_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->game_server_port);
        }

        if ($this->persona_state_flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->persona_state_flags);
        }

        if ($this->online_session_instances !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->online_session_instances);
        }

        if ($this->published_instance_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->published_instance_id);
        }

        if ($this->persona_set_by_user !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->player_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->player_name);
        }

        if ($this->query_port !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->query_port);
        }

        if ($this->steamid_source !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->avatar_hash !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->avatar_hash);
        }

        if ($this->last_logoff !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->last_logoff);
        }

        if ($this->last_logon !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->last_logon);
        }

        if ($this->clan_rank !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->clan_rank);
        }

        if ($this->game_name !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->game_name);
        }

        if ($this->gameid !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->game_data_blob !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->game_data_blob);
        }

        if ($this->clan_tag !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->clan_tag);
        }

        if ($this->facebook_name !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->facebook_name);
        }

        if ($this->facebook_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->facebook_id);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->friendid = null;
        $this->persona_state = null;
        $this->game_played_app_id = null;
        $this->game_server_ip = null;
        $this->game_server_port = null;
        $this->persona_state_flags = null;
        $this->online_session_instances = null;
        $this->published_instance_id = null;
        $this->persona_set_by_user = null;
        $this->player_name = null;
        $this->query_port = null;
        $this->steamid_source = null;
        $this->avatar_hash = null;
        $this->last_logoff = null;
        $this->last_logon = null;
        $this->clan_rank = null;
        $this->game_name = null;
        $this->gameid = null;
        $this->game_data_blob = null;
        $this->clan_tag = null;
        $this->facebook_name = null;
        $this->facebook_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientPersonaState\Friend) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->friendid = ($message->friendid !== null) ? $message->friendid : $this->friendid;
        $this->persona_state = ($message->persona_state !== null) ? $message->persona_state : $this->persona_state;
        $this->game_played_app_id = ($message->game_played_app_id !== null) ? $message->game_played_app_id : $this->game_played_app_id;
        $this->game_server_ip = ($message->game_server_ip !== null) ? $message->game_server_ip : $this->game_server_ip;
        $this->game_server_port = ($message->game_server_port !== null) ? $message->game_server_port : $this->game_server_port;
        $this->persona_state_flags = ($message->persona_state_flags !== null) ? $message->persona_state_flags : $this->persona_state_flags;
        $this->online_session_instances = ($message->online_session_instances !== null) ? $message->online_session_instances : $this->online_session_instances;
        $this->published_instance_id = ($message->published_instance_id !== null) ? $message->published_instance_id : $this->published_instance_id;
        $this->persona_set_by_user = ($message->persona_set_by_user !== null) ? $message->persona_set_by_user : $this->persona_set_by_user;
        $this->player_name = ($message->player_name !== null) ? $message->player_name : $this->player_name;
        $this->query_port = ($message->query_port !== null) ? $message->query_port : $this->query_port;
        $this->steamid_source = ($message->steamid_source !== null) ? $message->steamid_source : $this->steamid_source;
        $this->avatar_hash = ($message->avatar_hash !== null) ? $message->avatar_hash : $this->avatar_hash;
        $this->last_logoff = ($message->last_logoff !== null) ? $message->last_logoff : $this->last_logoff;
        $this->last_logon = ($message->last_logon !== null) ? $message->last_logon : $this->last_logon;
        $this->clan_rank = ($message->clan_rank !== null) ? $message->clan_rank : $this->clan_rank;
        $this->game_name = ($message->game_name !== null) ? $message->game_name : $this->game_name;
        $this->gameid = ($message->gameid !== null) ? $message->gameid : $this->gameid;
        $this->game_data_blob = ($message->game_data_blob !== null) ? $message->game_data_blob : $this->game_data_blob;
        $this->clan_tag = ($message->clan_tag !== null) ? $message->clan_tag : $this->clan_tag;
        $this->facebook_name = ($message->facebook_name !== null) ? $message->facebook_name : $this->facebook_name;
        $this->facebook_id = ($message->facebook_id !== null) ? $message->facebook_id : $this->facebook_id;
    }


}

