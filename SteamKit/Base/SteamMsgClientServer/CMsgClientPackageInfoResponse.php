<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientPackageInfoResponse
 */
class CMsgClientPackageInfoResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * packages repeated message = 1
     *
     * @var \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer\CMsgClientPackageInfoResponse\Package>
     */
    protected $packages = null;

    /**
     * packages_unknown repeated uint32 = 2
     *
     * @var \Protobuf\Collection
     */
    protected $packages_unknown = null;

    /**
     * packages_pending optional uint32 = 3
     *
     * @var int
     */
    protected $packages_pending = null;

    /**
     * Check if 'packages' has a value
     *
     * @return bool
     */
    public function hasPackagesList()
    {
        return $this->packages !== null;
    }

    /**
     * Get 'packages' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer\CMsgClientPackageInfoResponse\Package>
     */
    public function getPackagesList()
    {
        return $this->packages;
    }

    /**
     * Set 'packages' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer\CMsgClientPackageInfoResponse\Package> $value
     */
    public function setPackagesList(\Protobuf\Collection $value = null)
    {
        $this->packages = $value;
    }

    /**
     * Add a new element to 'packages'
     *
     * @param \SteamKit\Base\SteamMsgClientServer\CMsgClientPackageInfoResponse\Package
     * $value
     */
    public function addPackages(\SteamKit\Base\SteamMsgClientServer\CMsgClientPackageInfoResponse\Package $value)
    {
        if ($this->packages === null) {
            $this->packages = new \Protobuf\MessageCollection();
        }

        $this->packages->add($value);
    }

    /**
     * Check if 'packages_unknown' has a value
     *
     * @return bool
     */
    public function hasPackagesUnknownList()
    {
        return $this->packages_unknown !== null;
    }

    /**
     * Get 'packages_unknown' value
     *
     * @return \Protobuf\Collection
     */
    public function getPackagesUnknownList()
    {
        return $this->packages_unknown;
    }

    /**
     * Set 'packages_unknown' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setPackagesUnknownList(\Protobuf\Collection $value = null)
    {
        $this->packages_unknown = $value;
    }

    /**
     * Add a new element to 'packages_unknown'
     *
     * @param int $value
     */
    public function addPackagesUnknown($value)
    {
        if ($this->packages_unknown === null) {
            $this->packages_unknown = new \Protobuf\ScalarCollection();
        }

        $this->packages_unknown->add($value);
    }

    /**
     * Check if 'packages_pending' has a value
     *
     * @return bool
     */
    public function hasPackagesPending()
    {
        return $this->packages_pending !== null;
    }

    /**
     * Get 'packages_pending' value
     *
     * @return int
     */
    public function getPackagesPending()
    {
        return $this->packages_pending;
    }

    /**
     * Set 'packages_pending' value
     *
     * @param int $value
     */
    public function setPackagesPending($value = null)
    {
        $this->packages_pending = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'packages' => [],
            'packages_unknown' => [],
            'packages_pending' => null
        ], $values);

        $message->setPackagesPending($values['packages_pending']);

        foreach ($values['packages'] as $item) {
            $message->addPackages($item);
        }

        foreach ($values['packages_unknown'] as $item) {
            $message->addPackagesUnknown($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientPackageInfoResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'packages',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.SteamMsgClientServer.CMsgClientPackageInfoResponse.Package'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'packages_unknown',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'packages_pending',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->packages !== null) {
            foreach ($this->packages as $val) {
                $writer->writeVarint($stream, 10);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->packages_unknown !== null) {
            foreach ($this->packages_unknown as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->packages_pending !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->packages_pending);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\SteamMsgClientServer\CMsgClientPackageInfoResponse\Package();

                if ($this->packages === null) {
                    $this->packages = new \Protobuf\MessageCollection();
                }

                $this->packages->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                if ($this->packages_unknown === null) {
                    $this->packages_unknown = new \Protobuf\ScalarCollection();
                }

                $this->packages_unknown->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->packages_pending = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->packages !== null) {
            foreach ($this->packages as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->packages_unknown !== null) {
            foreach ($this->packages_unknown as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->packages_pending !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packages_pending);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->packages = null;
        $this->packages_unknown = null;
        $this->packages_pending = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientPackageInfoResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->packages = ($message->packages !== null) ? $message->packages : $this->packages;
        $this->packages_unknown = ($message->packages_unknown !== null) ? $message->packages_unknown : $this->packages_unknown;
        $this->packages_pending = ($message->packages_pending !== null) ? $message->packages_pending : $this->packages_pending;
    }


}

