<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer.CMsgClientLogonResponse
 */
class CMsgClientLogonResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * eresult optional int32 = 1
     *
     * @var int
     */
    protected $eresult = null;

    /**
     * out_of_game_heartbeat_seconds optional int32 = 2
     *
     * @var int
     */
    protected $out_of_game_heartbeat_seconds = null;

    /**
     * in_game_heartbeat_seconds optional int32 = 3
     *
     * @var int
     */
    protected $in_game_heartbeat_seconds = null;

    /**
     * public_ip optional uint32 = 4
     *
     * @var int
     */
    protected $public_ip = null;

    /**
     * rtime32_server_time optional fixed32 = 5
     *
     * @var int
     */
    protected $rtime32_server_time = null;

    /**
     * account_flags optional uint32 = 6
     *
     * @var int
     */
    protected $account_flags = null;

    /**
     * cell_id optional uint32 = 7
     *
     * @var int
     */
    protected $cell_id = null;

    /**
     * email_domain optional string = 8
     *
     * @var string
     */
    protected $email_domain = null;

    /**
     * steam2_ticket optional bytes = 9
     *
     * @var \Protobuf\Stream
     */
    protected $steam2_ticket = null;

    /**
     * eresult_extended optional int32 = 10
     *
     * @var int
     */
    protected $eresult_extended = null;

    /**
     * webapi_authenticate_user_nonce optional string = 11
     *
     * @var string
     */
    protected $webapi_authenticate_user_nonce = null;

    /**
     * cell_id_ping_threshold optional uint32 = 12
     *
     * @var int
     */
    protected $cell_id_ping_threshold = null;

    /**
     * use_pics optional bool = 13
     *
     * @var bool
     */
    protected $use_pics = null;

    /**
     * vanity_url optional string = 14
     *
     * @var string
     */
    protected $vanity_url = null;

    /**
     * client_supplied_steamid optional fixed64 = 20
     *
     * @var int
     */
    protected $client_supplied_steamid = null;

    /**
     * ip_country_code optional string = 21
     *
     * @var string
     */
    protected $ip_country_code = null;

    /**
     * parental_settings optional bytes = 22
     *
     * @var \Protobuf\Stream
     */
    protected $parental_settings = null;

    /**
     * parental_setting_signature optional bytes = 23
     *
     * @var \Protobuf\Stream
     */
    protected $parental_setting_signature = null;

    /**
     * count_loginfailures_to_migrate optional int32 = 24
     *
     * @var int
     */
    protected $count_loginfailures_to_migrate = null;

    /**
     * count_disconnects_to_migrate optional int32 = 25
     *
     * @var int
     */
    protected $count_disconnects_to_migrate = null;

    /**
     * ogs_data_report_time_window optional int32 = 26
     *
     * @var int
     */
    protected $ogs_data_report_time_window = null;

    /**
     * client_instance_id optional uint64 = 27
     *
     * @var int
     */
    protected $client_instance_id = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->eresult = '2';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'eresult' has a value
     *
     * @return bool
     */
    public function hasEresult()
    {
        return $this->eresult !== null;
    }

    /**
     * Get 'eresult' value
     *
     * @return int
     */
    public function getEresult()
    {
        return $this->eresult;
    }

    /**
     * Set 'eresult' value
     *
     * @param int $value
     */
    public function setEresult($value = null)
    {
        $this->eresult = $value;
    }

    /**
     * Check if 'out_of_game_heartbeat_seconds' has a value
     *
     * @return bool
     */
    public function hasOutOfGameHeartbeatSeconds()
    {
        return $this->out_of_game_heartbeat_seconds !== null;
    }

    /**
     * Get 'out_of_game_heartbeat_seconds' value
     *
     * @return int
     */
    public function getOutOfGameHeartbeatSeconds()
    {
        return $this->out_of_game_heartbeat_seconds;
    }

    /**
     * Set 'out_of_game_heartbeat_seconds' value
     *
     * @param int $value
     */
    public function setOutOfGameHeartbeatSeconds($value = null)
    {
        $this->out_of_game_heartbeat_seconds = $value;
    }

    /**
     * Check if 'in_game_heartbeat_seconds' has a value
     *
     * @return bool
     */
    public function hasInGameHeartbeatSeconds()
    {
        return $this->in_game_heartbeat_seconds !== null;
    }

    /**
     * Get 'in_game_heartbeat_seconds' value
     *
     * @return int
     */
    public function getInGameHeartbeatSeconds()
    {
        return $this->in_game_heartbeat_seconds;
    }

    /**
     * Set 'in_game_heartbeat_seconds' value
     *
     * @param int $value
     */
    public function setInGameHeartbeatSeconds($value = null)
    {
        $this->in_game_heartbeat_seconds = $value;
    }

    /**
     * Check if 'public_ip' has a value
     *
     * @return bool
     */
    public function hasPublicIp()
    {
        return $this->public_ip !== null;
    }

    /**
     * Get 'public_ip' value
     *
     * @return int
     */
    public function getPublicIp()
    {
        return $this->public_ip;
    }

    /**
     * Set 'public_ip' value
     *
     * @param int $value
     */
    public function setPublicIp($value = null)
    {
        $this->public_ip = $value;
    }

    /**
     * Check if 'rtime32_server_time' has a value
     *
     * @return bool
     */
    public function hasRtime32ServerTime()
    {
        return $this->rtime32_server_time !== null;
    }

    /**
     * Get 'rtime32_server_time' value
     *
     * @return int
     */
    public function getRtime32ServerTime()
    {
        return $this->rtime32_server_time;
    }

    /**
     * Set 'rtime32_server_time' value
     *
     * @param int $value
     */
    public function setRtime32ServerTime($value = null)
    {
        $this->rtime32_server_time = $value;
    }

    /**
     * Check if 'account_flags' has a value
     *
     * @return bool
     */
    public function hasAccountFlags()
    {
        return $this->account_flags !== null;
    }

    /**
     * Get 'account_flags' value
     *
     * @return int
     */
    public function getAccountFlags()
    {
        return $this->account_flags;
    }

    /**
     * Set 'account_flags' value
     *
     * @param int $value
     */
    public function setAccountFlags($value = null)
    {
        $this->account_flags = $value;
    }

    /**
     * Check if 'cell_id' has a value
     *
     * @return bool
     */
    public function hasCellId()
    {
        return $this->cell_id !== null;
    }

    /**
     * Get 'cell_id' value
     *
     * @return int
     */
    public function getCellId()
    {
        return $this->cell_id;
    }

    /**
     * Set 'cell_id' value
     *
     * @param int $value
     */
    public function setCellId($value = null)
    {
        $this->cell_id = $value;
    }

    /**
     * Check if 'email_domain' has a value
     *
     * @return bool
     */
    public function hasEmailDomain()
    {
        return $this->email_domain !== null;
    }

    /**
     * Get 'email_domain' value
     *
     * @return string
     */
    public function getEmailDomain()
    {
        return $this->email_domain;
    }

    /**
     * Set 'email_domain' value
     *
     * @param string $value
     */
    public function setEmailDomain($value = null)
    {
        $this->email_domain = $value;
    }

    /**
     * Check if 'steam2_ticket' has a value
     *
     * @return bool
     */
    public function hasSteam2Ticket()
    {
        return $this->steam2_ticket !== null;
    }

    /**
     * Get 'steam2_ticket' value
     *
     * @return \Protobuf\Stream
     */
    public function getSteam2Ticket()
    {
        return $this->steam2_ticket;
    }

    /**
     * Set 'steam2_ticket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSteam2Ticket($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->steam2_ticket = $value;
    }

    /**
     * Check if 'eresult_extended' has a value
     *
     * @return bool
     */
    public function hasEresultExtended()
    {
        return $this->eresult_extended !== null;
    }

    /**
     * Get 'eresult_extended' value
     *
     * @return int
     */
    public function getEresultExtended()
    {
        return $this->eresult_extended;
    }

    /**
     * Set 'eresult_extended' value
     *
     * @param int $value
     */
    public function setEresultExtended($value = null)
    {
        $this->eresult_extended = $value;
    }

    /**
     * Check if 'webapi_authenticate_user_nonce' has a value
     *
     * @return bool
     */
    public function hasWebapiAuthenticateUserNonce()
    {
        return $this->webapi_authenticate_user_nonce !== null;
    }

    /**
     * Get 'webapi_authenticate_user_nonce' value
     *
     * @return string
     */
    public function getWebapiAuthenticateUserNonce()
    {
        return $this->webapi_authenticate_user_nonce;
    }

    /**
     * Set 'webapi_authenticate_user_nonce' value
     *
     * @param string $value
     */
    public function setWebapiAuthenticateUserNonce($value = null)
    {
        $this->webapi_authenticate_user_nonce = $value;
    }

    /**
     * Check if 'cell_id_ping_threshold' has a value
     *
     * @return bool
     */
    public function hasCellIdPingThreshold()
    {
        return $this->cell_id_ping_threshold !== null;
    }

    /**
     * Get 'cell_id_ping_threshold' value
     *
     * @return int
     */
    public function getCellIdPingThreshold()
    {
        return $this->cell_id_ping_threshold;
    }

    /**
     * Set 'cell_id_ping_threshold' value
     *
     * @param int $value
     */
    public function setCellIdPingThreshold($value = null)
    {
        $this->cell_id_ping_threshold = $value;
    }

    /**
     * Check if 'use_pics' has a value
     *
     * @return bool
     */
    public function hasUsePics()
    {
        return $this->use_pics !== null;
    }

    /**
     * Get 'use_pics' value
     *
     * @return bool
     */
    public function getUsePics()
    {
        return $this->use_pics;
    }

    /**
     * Set 'use_pics' value
     *
     * @param bool $value
     */
    public function setUsePics($value = null)
    {
        $this->use_pics = $value;
    }

    /**
     * Check if 'vanity_url' has a value
     *
     * @return bool
     */
    public function hasVanityUrl()
    {
        return $this->vanity_url !== null;
    }

    /**
     * Get 'vanity_url' value
     *
     * @return string
     */
    public function getVanityUrl()
    {
        return $this->vanity_url;
    }

    /**
     * Set 'vanity_url' value
     *
     * @param string $value
     */
    public function setVanityUrl($value = null)
    {
        $this->vanity_url = $value;
    }

    /**
     * Check if 'client_supplied_steamid' has a value
     *
     * @return bool
     */
    public function hasClientSuppliedSteamid()
    {
        return $this->client_supplied_steamid !== null;
    }

    /**
     * Get 'client_supplied_steamid' value
     *
     * @return int
     */
    public function getClientSuppliedSteamid()
    {
        return $this->client_supplied_steamid;
    }

    /**
     * Set 'client_supplied_steamid' value
     *
     * @param int $value
     */
    public function setClientSuppliedSteamid($value = null)
    {
        $this->client_supplied_steamid = $value;
    }

    /**
     * Check if 'ip_country_code' has a value
     *
     * @return bool
     */
    public function hasIpCountryCode()
    {
        return $this->ip_country_code !== null;
    }

    /**
     * Get 'ip_country_code' value
     *
     * @return string
     */
    public function getIpCountryCode()
    {
        return $this->ip_country_code;
    }

    /**
     * Set 'ip_country_code' value
     *
     * @param string $value
     */
    public function setIpCountryCode($value = null)
    {
        $this->ip_country_code = $value;
    }

    /**
     * Check if 'parental_settings' has a value
     *
     * @return bool
     */
    public function hasParentalSettings()
    {
        return $this->parental_settings !== null;
    }

    /**
     * Get 'parental_settings' value
     *
     * @return \Protobuf\Stream
     */
    public function getParentalSettings()
    {
        return $this->parental_settings;
    }

    /**
     * Set 'parental_settings' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setParentalSettings($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->parental_settings = $value;
    }

    /**
     * Check if 'parental_setting_signature' has a value
     *
     * @return bool
     */
    public function hasParentalSettingSignature()
    {
        return $this->parental_setting_signature !== null;
    }

    /**
     * Get 'parental_setting_signature' value
     *
     * @return \Protobuf\Stream
     */
    public function getParentalSettingSignature()
    {
        return $this->parental_setting_signature;
    }

    /**
     * Set 'parental_setting_signature' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setParentalSettingSignature($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->parental_setting_signature = $value;
    }

    /**
     * Check if 'count_loginfailures_to_migrate' has a value
     *
     * @return bool
     */
    public function hasCountLoginfailuresToMigrate()
    {
        return $this->count_loginfailures_to_migrate !== null;
    }

    /**
     * Get 'count_loginfailures_to_migrate' value
     *
     * @return int
     */
    public function getCountLoginfailuresToMigrate()
    {
        return $this->count_loginfailures_to_migrate;
    }

    /**
     * Set 'count_loginfailures_to_migrate' value
     *
     * @param int $value
     */
    public function setCountLoginfailuresToMigrate($value = null)
    {
        $this->count_loginfailures_to_migrate = $value;
    }

    /**
     * Check if 'count_disconnects_to_migrate' has a value
     *
     * @return bool
     */
    public function hasCountDisconnectsToMigrate()
    {
        return $this->count_disconnects_to_migrate !== null;
    }

    /**
     * Get 'count_disconnects_to_migrate' value
     *
     * @return int
     */
    public function getCountDisconnectsToMigrate()
    {
        return $this->count_disconnects_to_migrate;
    }

    /**
     * Set 'count_disconnects_to_migrate' value
     *
     * @param int $value
     */
    public function setCountDisconnectsToMigrate($value = null)
    {
        $this->count_disconnects_to_migrate = $value;
    }

    /**
     * Check if 'ogs_data_report_time_window' has a value
     *
     * @return bool
     */
    public function hasOgsDataReportTimeWindow()
    {
        return $this->ogs_data_report_time_window !== null;
    }

    /**
     * Get 'ogs_data_report_time_window' value
     *
     * @return int
     */
    public function getOgsDataReportTimeWindow()
    {
        return $this->ogs_data_report_time_window;
    }

    /**
     * Set 'ogs_data_report_time_window' value
     *
     * @param int $value
     */
    public function setOgsDataReportTimeWindow($value = null)
    {
        $this->ogs_data_report_time_window = $value;
    }

    /**
     * Check if 'client_instance_id' has a value
     *
     * @return bool
     */
    public function hasClientInstanceId()
    {
        return $this->client_instance_id !== null;
    }

    /**
     * Get 'client_instance_id' value
     *
     * @return int
     */
    public function getClientInstanceId()
    {
        return $this->client_instance_id;
    }

    /**
     * Set 'client_instance_id' value
     *
     * @param int $value
     */
    public function setClientInstanceId($value = null)
    {
        $this->client_instance_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'eresult' => '2',
            'out_of_game_heartbeat_seconds' => null,
            'in_game_heartbeat_seconds' => null,
            'public_ip' => null,
            'rtime32_server_time' => null,
            'account_flags' => null,
            'cell_id' => null,
            'email_domain' => null,
            'steam2_ticket' => null,
            'eresult_extended' => null,
            'webapi_authenticate_user_nonce' => null,
            'cell_id_ping_threshold' => null,
            'use_pics' => null,
            'vanity_url' => null,
            'client_supplied_steamid' => null,
            'ip_country_code' => null,
            'parental_settings' => null,
            'parental_setting_signature' => null,
            'count_loginfailures_to_migrate' => null,
            'count_disconnects_to_migrate' => null,
            'ogs_data_report_time_window' => null,
            'client_instance_id' => null
        ], $values);

        $message->setEresult($values['eresult']);
        $message->setOutOfGameHeartbeatSeconds($values['out_of_game_heartbeat_seconds']);
        $message->setInGameHeartbeatSeconds($values['in_game_heartbeat_seconds']);
        $message->setPublicIp($values['public_ip']);
        $message->setRtime32ServerTime($values['rtime32_server_time']);
        $message->setAccountFlags($values['account_flags']);
        $message->setCellId($values['cell_id']);
        $message->setEmailDomain($values['email_domain']);
        $message->setSteam2Ticket($values['steam2_ticket']);
        $message->setEresultExtended($values['eresult_extended']);
        $message->setWebapiAuthenticateUserNonce($values['webapi_authenticate_user_nonce']);
        $message->setCellIdPingThreshold($values['cell_id_ping_threshold']);
        $message->setUsePics($values['use_pics']);
        $message->setVanityUrl($values['vanity_url']);
        $message->setClientSuppliedSteamid($values['client_supplied_steamid']);
        $message->setIpCountryCode($values['ip_country_code']);
        $message->setParentalSettings($values['parental_settings']);
        $message->setParentalSettingSignature($values['parental_setting_signature']);
        $message->setCountLoginfailuresToMigrate($values['count_loginfailures_to_migrate']);
        $message->setCountDisconnectsToMigrate($values['count_disconnects_to_migrate']);
        $message->setOgsDataReportTimeWindow($values['ogs_data_report_time_window']);
        $message->setClientInstanceId($values['client_instance_id']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientLogonResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'eresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'out_of_game_heartbeat_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'in_game_heartbeat_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'public_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'rtime32_server_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'account_flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'cell_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'email_domain',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'steam2_ticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'eresult_extended',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'webapi_authenticate_user_nonce',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'cell_id_ping_threshold',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'use_pics',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'vanity_url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'client_supplied_steamid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'ip_country_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'parental_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'parental_setting_signature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'count_loginfailures_to_migrate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'count_disconnects_to_migrate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'ogs_data_report_time_window',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'client_instance_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->eresult !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->eresult);
        }

        if ($this->out_of_game_heartbeat_seconds !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->out_of_game_heartbeat_seconds);
        }

        if ($this->in_game_heartbeat_seconds !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->in_game_heartbeat_seconds);
        }

        if ($this->public_ip !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->public_ip);
        }

        if ($this->rtime32_server_time !== null) {
            $writer->writeVarint($stream, 45);
            $writer->writeFixed32($stream, $this->rtime32_server_time);
        }

        if ($this->account_flags !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->account_flags);
        }

        if ($this->cell_id !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->cell_id);
        }

        if ($this->email_domain !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->email_domain);
        }

        if ($this->steam2_ticket !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeByteStream($stream, $this->steam2_ticket);
        }

        if ($this->eresult_extended !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->eresult_extended);
        }

        if ($this->webapi_authenticate_user_nonce !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->webapi_authenticate_user_nonce);
        }

        if ($this->cell_id_ping_threshold !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->cell_id_ping_threshold);
        }

        if ($this->use_pics !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->use_pics);
        }

        if ($this->vanity_url !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->vanity_url);
        }

        if ($this->client_supplied_steamid !== null) {
            $writer->writeVarint($stream, 161);
            $writer->writeFixed64($stream, $this->client_supplied_steamid);
        }

        if ($this->ip_country_code !== null) {
            $writer->writeVarint($stream, 170);
            $writer->writeString($stream, $this->ip_country_code);
        }

        if ($this->parental_settings !== null) {
            $writer->writeVarint($stream, 178);
            $writer->writeByteStream($stream, $this->parental_settings);
        }

        if ($this->parental_setting_signature !== null) {
            $writer->writeVarint($stream, 186);
            $writer->writeByteStream($stream, $this->parental_setting_signature);
        }

        if ($this->count_loginfailures_to_migrate !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeVarint($stream, $this->count_loginfailures_to_migrate);
        }

        if ($this->count_disconnects_to_migrate !== null) {
            $writer->writeVarint($stream, 200);
            $writer->writeVarint($stream, $this->count_disconnects_to_migrate);
        }

        if ($this->ogs_data_report_time_window !== null) {
            $writer->writeVarint($stream, 208);
            $writer->writeVarint($stream, $this->ogs_data_report_time_window);
        }

        if ($this->client_instance_id !== null) {
            $writer->writeVarint($stream, 216);
            $writer->writeVarint($stream, $this->client_instance_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->eresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->out_of_game_heartbeat_seconds = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->in_game_heartbeat_seconds = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->public_ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->rtime32_server_time = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->account_flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cell_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->email_domain = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->steam2_ticket = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->eresult_extended = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->webapi_authenticate_user_nonce = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cell_id_ping_threshold = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->use_pics = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vanity_url = $reader->readString($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->client_supplied_steamid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ip_country_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->parental_settings = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->parental_setting_signature = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->count_loginfailures_to_migrate = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->count_disconnects_to_migrate = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->ogs_data_report_time_window = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->client_instance_id = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->eresult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult);
        }

        if ($this->out_of_game_heartbeat_seconds !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->out_of_game_heartbeat_seconds);
        }

        if ($this->in_game_heartbeat_seconds !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->in_game_heartbeat_seconds);
        }

        if ($this->public_ip !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->public_ip);
        }

        if ($this->rtime32_server_time !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->account_flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->account_flags);
        }

        if ($this->cell_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cell_id);
        }

        if ($this->email_domain !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->email_domain);
        }

        if ($this->steam2_ticket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->steam2_ticket);
        }

        if ($this->eresult_extended !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult_extended);
        }

        if ($this->webapi_authenticate_user_nonce !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->webapi_authenticate_user_nonce);
        }

        if ($this->cell_id_ping_threshold !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cell_id_ping_threshold);
        }

        if ($this->use_pics !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->vanity_url !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->vanity_url);
        }

        if ($this->client_supplied_steamid !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->ip_country_code !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->ip_country_code);
        }

        if ($this->parental_settings !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->parental_settings);
        }

        if ($this->parental_setting_signature !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->parental_setting_signature);
        }

        if ($this->count_loginfailures_to_migrate !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->count_loginfailures_to_migrate);
        }

        if ($this->count_disconnects_to_migrate !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->count_disconnects_to_migrate);
        }

        if ($this->ogs_data_report_time_window !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ogs_data_report_time_window);
        }

        if ($this->client_instance_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->client_instance_id);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->eresult = '2';
        $this->out_of_game_heartbeat_seconds = null;
        $this->in_game_heartbeat_seconds = null;
        $this->public_ip = null;
        $this->rtime32_server_time = null;
        $this->account_flags = null;
        $this->cell_id = null;
        $this->email_domain = null;
        $this->steam2_ticket = null;
        $this->eresult_extended = null;
        $this->webapi_authenticate_user_nonce = null;
        $this->cell_id_ping_threshold = null;
        $this->use_pics = null;
        $this->vanity_url = null;
        $this->client_supplied_steamid = null;
        $this->ip_country_code = null;
        $this->parental_settings = null;
        $this->parental_setting_signature = null;
        $this->count_loginfailures_to_migrate = null;
        $this->count_disconnects_to_migrate = null;
        $this->ogs_data_report_time_window = null;
        $this->client_instance_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientLogonResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->eresult = ($message->eresult !== null) ? $message->eresult : $this->eresult;
        $this->out_of_game_heartbeat_seconds = ($message->out_of_game_heartbeat_seconds !== null) ? $message->out_of_game_heartbeat_seconds : $this->out_of_game_heartbeat_seconds;
        $this->in_game_heartbeat_seconds = ($message->in_game_heartbeat_seconds !== null) ? $message->in_game_heartbeat_seconds : $this->in_game_heartbeat_seconds;
        $this->public_ip = ($message->public_ip !== null) ? $message->public_ip : $this->public_ip;
        $this->rtime32_server_time = ($message->rtime32_server_time !== null) ? $message->rtime32_server_time : $this->rtime32_server_time;
        $this->account_flags = ($message->account_flags !== null) ? $message->account_flags : $this->account_flags;
        $this->cell_id = ($message->cell_id !== null) ? $message->cell_id : $this->cell_id;
        $this->email_domain = ($message->email_domain !== null) ? $message->email_domain : $this->email_domain;
        $this->steam2_ticket = ($message->steam2_ticket !== null) ? $message->steam2_ticket : $this->steam2_ticket;
        $this->eresult_extended = ($message->eresult_extended !== null) ? $message->eresult_extended : $this->eresult_extended;
        $this->webapi_authenticate_user_nonce = ($message->webapi_authenticate_user_nonce !== null) ? $message->webapi_authenticate_user_nonce : $this->webapi_authenticate_user_nonce;
        $this->cell_id_ping_threshold = ($message->cell_id_ping_threshold !== null) ? $message->cell_id_ping_threshold : $this->cell_id_ping_threshold;
        $this->use_pics = ($message->use_pics !== null) ? $message->use_pics : $this->use_pics;
        $this->vanity_url = ($message->vanity_url !== null) ? $message->vanity_url : $this->vanity_url;
        $this->client_supplied_steamid = ($message->client_supplied_steamid !== null) ? $message->client_supplied_steamid : $this->client_supplied_steamid;
        $this->ip_country_code = ($message->ip_country_code !== null) ? $message->ip_country_code : $this->ip_country_code;
        $this->parental_settings = ($message->parental_settings !== null) ? $message->parental_settings : $this->parental_settings;
        $this->parental_setting_signature = ($message->parental_setting_signature !== null) ? $message->parental_setting_signature : $this->parental_setting_signature;
        $this->count_loginfailures_to_migrate = ($message->count_loginfailures_to_migrate !== null) ? $message->count_loginfailures_to_migrate : $this->count_loginfailures_to_migrate;
        $this->count_disconnects_to_migrate = ($message->count_disconnects_to_migrate !== null) ? $message->count_disconnects_to_migrate : $this->count_disconnects_to_migrate;
        $this->ogs_data_report_time_window = ($message->ogs_data_report_time_window !== null) ? $message->ogs_data_report_time_window : $this->ogs_data_report_time_window;
        $this->client_instance_id = ($message->client_instance_id !== null) ? $message->client_instance_id : $this->client_instance_id;
    }


}

