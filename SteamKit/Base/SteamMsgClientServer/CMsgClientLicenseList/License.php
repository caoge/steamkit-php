<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer\CMsgClientLicenseList;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientLicenseList.License
 */
class License extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * package_id optional uint32 = 1
     *
     * @var int
     */
    protected $package_id = null;

    /**
     * time_created optional fixed32 = 2
     *
     * @var int
     */
    protected $time_created = null;

    /**
     * time_next_process optional fixed32 = 3
     *
     * @var int
     */
    protected $time_next_process = null;

    /**
     * minute_limit optional int32 = 4
     *
     * @var int
     */
    protected $minute_limit = null;

    /**
     * minutes_used optional int32 = 5
     *
     * @var int
     */
    protected $minutes_used = null;

    /**
     * payment_method optional uint32 = 6
     *
     * @var int
     */
    protected $payment_method = null;

    /**
     * flags optional uint32 = 7
     *
     * @var int
     */
    protected $flags = null;

    /**
     * purchase_country_code optional string = 8
     *
     * @var string
     */
    protected $purchase_country_code = null;

    /**
     * license_type optional uint32 = 9
     *
     * @var int
     */
    protected $license_type = null;

    /**
     * territory_code optional int32 = 10
     *
     * @var int
     */
    protected $territory_code = null;

    /**
     * change_number optional int32 = 11
     *
     * @var int
     */
    protected $change_number = null;

    /**
     * owner_id optional uint32 = 12
     *
     * @var int
     */
    protected $owner_id = null;

    /**
     * initial_period optional uint32 = 13
     *
     * @var int
     */
    protected $initial_period = null;

    /**
     * initial_time_unit optional uint32 = 14
     *
     * @var int
     */
    protected $initial_time_unit = null;

    /**
     * renewal_period optional uint32 = 15
     *
     * @var int
     */
    protected $renewal_period = null;

    /**
     * renewal_time_unit optional uint32 = 16
     *
     * @var int
     */
    protected $renewal_time_unit = null;

    /**
     * Check if 'package_id' has a value
     *
     * @return bool
     */
    public function hasPackageId()
    {
        return $this->package_id !== null;
    }

    /**
     * Get 'package_id' value
     *
     * @return int
     */
    public function getPackageId()
    {
        return $this->package_id;
    }

    /**
     * Set 'package_id' value
     *
     * @param int $value
     */
    public function setPackageId($value = null)
    {
        $this->package_id = $value;
    }

    /**
     * Check if 'time_created' has a value
     *
     * @return bool
     */
    public function hasTimeCreated()
    {
        return $this->time_created !== null;
    }

    /**
     * Get 'time_created' value
     *
     * @return int
     */
    public function getTimeCreated()
    {
        return $this->time_created;
    }

    /**
     * Set 'time_created' value
     *
     * @param int $value
     */
    public function setTimeCreated($value = null)
    {
        $this->time_created = $value;
    }

    /**
     * Check if 'time_next_process' has a value
     *
     * @return bool
     */
    public function hasTimeNextProcess()
    {
        return $this->time_next_process !== null;
    }

    /**
     * Get 'time_next_process' value
     *
     * @return int
     */
    public function getTimeNextProcess()
    {
        return $this->time_next_process;
    }

    /**
     * Set 'time_next_process' value
     *
     * @param int $value
     */
    public function setTimeNextProcess($value = null)
    {
        $this->time_next_process = $value;
    }

    /**
     * Check if 'minute_limit' has a value
     *
     * @return bool
     */
    public function hasMinuteLimit()
    {
        return $this->minute_limit !== null;
    }

    /**
     * Get 'minute_limit' value
     *
     * @return int
     */
    public function getMinuteLimit()
    {
        return $this->minute_limit;
    }

    /**
     * Set 'minute_limit' value
     *
     * @param int $value
     */
    public function setMinuteLimit($value = null)
    {
        $this->minute_limit = $value;
    }

    /**
     * Check if 'minutes_used' has a value
     *
     * @return bool
     */
    public function hasMinutesUsed()
    {
        return $this->minutes_used !== null;
    }

    /**
     * Get 'minutes_used' value
     *
     * @return int
     */
    public function getMinutesUsed()
    {
        return $this->minutes_used;
    }

    /**
     * Set 'minutes_used' value
     *
     * @param int $value
     */
    public function setMinutesUsed($value = null)
    {
        $this->minutes_used = $value;
    }

    /**
     * Check if 'payment_method' has a value
     *
     * @return bool
     */
    public function hasPaymentMethod()
    {
        return $this->payment_method !== null;
    }

    /**
     * Get 'payment_method' value
     *
     * @return int
     */
    public function getPaymentMethod()
    {
        return $this->payment_method;
    }

    /**
     * Set 'payment_method' value
     *
     * @param int $value
     */
    public function setPaymentMethod($value = null)
    {
        $this->payment_method = $value;
    }

    /**
     * Check if 'flags' has a value
     *
     * @return bool
     */
    public function hasFlags()
    {
        return $this->flags !== null;
    }

    /**
     * Get 'flags' value
     *
     * @return int
     */
    public function getFlags()
    {
        return $this->flags;
    }

    /**
     * Set 'flags' value
     *
     * @param int $value
     */
    public function setFlags($value = null)
    {
        $this->flags = $value;
    }

    /**
     * Check if 'purchase_country_code' has a value
     *
     * @return bool
     */
    public function hasPurchaseCountryCode()
    {
        return $this->purchase_country_code !== null;
    }

    /**
     * Get 'purchase_country_code' value
     *
     * @return string
     */
    public function getPurchaseCountryCode()
    {
        return $this->purchase_country_code;
    }

    /**
     * Set 'purchase_country_code' value
     *
     * @param string $value
     */
    public function setPurchaseCountryCode($value = null)
    {
        $this->purchase_country_code = $value;
    }

    /**
     * Check if 'license_type' has a value
     *
     * @return bool
     */
    public function hasLicenseType()
    {
        return $this->license_type !== null;
    }

    /**
     * Get 'license_type' value
     *
     * @return int
     */
    public function getLicenseType()
    {
        return $this->license_type;
    }

    /**
     * Set 'license_type' value
     *
     * @param int $value
     */
    public function setLicenseType($value = null)
    {
        $this->license_type = $value;
    }

    /**
     * Check if 'territory_code' has a value
     *
     * @return bool
     */
    public function hasTerritoryCode()
    {
        return $this->territory_code !== null;
    }

    /**
     * Get 'territory_code' value
     *
     * @return int
     */
    public function getTerritoryCode()
    {
        return $this->territory_code;
    }

    /**
     * Set 'territory_code' value
     *
     * @param int $value
     */
    public function setTerritoryCode($value = null)
    {
        $this->territory_code = $value;
    }

    /**
     * Check if 'change_number' has a value
     *
     * @return bool
     */
    public function hasChangeNumber()
    {
        return $this->change_number !== null;
    }

    /**
     * Get 'change_number' value
     *
     * @return int
     */
    public function getChangeNumber()
    {
        return $this->change_number;
    }

    /**
     * Set 'change_number' value
     *
     * @param int $value
     */
    public function setChangeNumber($value = null)
    {
        $this->change_number = $value;
    }

    /**
     * Check if 'owner_id' has a value
     *
     * @return bool
     */
    public function hasOwnerId()
    {
        return $this->owner_id !== null;
    }

    /**
     * Get 'owner_id' value
     *
     * @return int
     */
    public function getOwnerId()
    {
        return $this->owner_id;
    }

    /**
     * Set 'owner_id' value
     *
     * @param int $value
     */
    public function setOwnerId($value = null)
    {
        $this->owner_id = $value;
    }

    /**
     * Check if 'initial_period' has a value
     *
     * @return bool
     */
    public function hasInitialPeriod()
    {
        return $this->initial_period !== null;
    }

    /**
     * Get 'initial_period' value
     *
     * @return int
     */
    public function getInitialPeriod()
    {
        return $this->initial_period;
    }

    /**
     * Set 'initial_period' value
     *
     * @param int $value
     */
    public function setInitialPeriod($value = null)
    {
        $this->initial_period = $value;
    }

    /**
     * Check if 'initial_time_unit' has a value
     *
     * @return bool
     */
    public function hasInitialTimeUnit()
    {
        return $this->initial_time_unit !== null;
    }

    /**
     * Get 'initial_time_unit' value
     *
     * @return int
     */
    public function getInitialTimeUnit()
    {
        return $this->initial_time_unit;
    }

    /**
     * Set 'initial_time_unit' value
     *
     * @param int $value
     */
    public function setInitialTimeUnit($value = null)
    {
        $this->initial_time_unit = $value;
    }

    /**
     * Check if 'renewal_period' has a value
     *
     * @return bool
     */
    public function hasRenewalPeriod()
    {
        return $this->renewal_period !== null;
    }

    /**
     * Get 'renewal_period' value
     *
     * @return int
     */
    public function getRenewalPeriod()
    {
        return $this->renewal_period;
    }

    /**
     * Set 'renewal_period' value
     *
     * @param int $value
     */
    public function setRenewalPeriod($value = null)
    {
        $this->renewal_period = $value;
    }

    /**
     * Check if 'renewal_time_unit' has a value
     *
     * @return bool
     */
    public function hasRenewalTimeUnit()
    {
        return $this->renewal_time_unit !== null;
    }

    /**
     * Get 'renewal_time_unit' value
     *
     * @return int
     */
    public function getRenewalTimeUnit()
    {
        return $this->renewal_time_unit;
    }

    /**
     * Set 'renewal_time_unit' value
     *
     * @param int $value
     */
    public function setRenewalTimeUnit($value = null)
    {
        $this->renewal_time_unit = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'package_id' => null,
            'time_created' => null,
            'time_next_process' => null,
            'minute_limit' => null,
            'minutes_used' => null,
            'payment_method' => null,
            'flags' => null,
            'purchase_country_code' => null,
            'license_type' => null,
            'territory_code' => null,
            'change_number' => null,
            'owner_id' => null,
            'initial_period' => null,
            'initial_time_unit' => null,
            'renewal_period' => null,
            'renewal_time_unit' => null
        ], $values);

        $message->setPackageId($values['package_id']);
        $message->setTimeCreated($values['time_created']);
        $message->setTimeNextProcess($values['time_next_process']);
        $message->setMinuteLimit($values['minute_limit']);
        $message->setMinutesUsed($values['minutes_used']);
        $message->setPaymentMethod($values['payment_method']);
        $message->setFlags($values['flags']);
        $message->setPurchaseCountryCode($values['purchase_country_code']);
        $message->setLicenseType($values['license_type']);
        $message->setTerritoryCode($values['territory_code']);
        $message->setChangeNumber($values['change_number']);
        $message->setOwnerId($values['owner_id']);
        $message->setInitialPeriod($values['initial_period']);
        $message->setInitialTimeUnit($values['initial_time_unit']);
        $message->setRenewalPeriod($values['renewal_period']);
        $message->setRenewalTimeUnit($values['renewal_time_unit']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'License',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'package_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'time_created',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'time_next_process',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'minute_limit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'minutes_used',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'payment_method',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'purchase_country_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'license_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'territory_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'change_number',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'owner_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'initial_period',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'initial_time_unit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'renewal_period',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'renewal_time_unit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->package_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->package_id);
        }

        if ($this->time_created !== null) {
            $writer->writeVarint($stream, 21);
            $writer->writeFixed32($stream, $this->time_created);
        }

        if ($this->time_next_process !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFixed32($stream, $this->time_next_process);
        }

        if ($this->minute_limit !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->minute_limit);
        }

        if ($this->minutes_used !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->minutes_used);
        }

        if ($this->payment_method !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->payment_method);
        }

        if ($this->flags !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->flags);
        }

        if ($this->purchase_country_code !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->purchase_country_code);
        }

        if ($this->license_type !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->license_type);
        }

        if ($this->territory_code !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->territory_code);
        }

        if ($this->change_number !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->change_number);
        }

        if ($this->owner_id !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->owner_id);
        }

        if ($this->initial_period !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->initial_period);
        }

        if ($this->initial_time_unit !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->initial_time_unit);
        }

        if ($this->renewal_period !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->renewal_period);
        }

        if ($this->renewal_time_unit !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->renewal_time_unit);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->package_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->time_created = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->time_next_process = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->minute_limit = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->minutes_used = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->payment_method = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->purchase_country_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->license_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->territory_code = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->change_number = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->owner_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->initial_period = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->initial_time_unit = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->renewal_period = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->renewal_time_unit = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->package_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->package_id);
        }

        if ($this->time_created !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->time_next_process !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->minute_limit !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->minute_limit);
        }

        if ($this->minutes_used !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->minutes_used);
        }

        if ($this->payment_method !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->payment_method);
        }

        if ($this->flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->flags);
        }

        if ($this->purchase_country_code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->purchase_country_code);
        }

        if ($this->license_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->license_type);
        }

        if ($this->territory_code !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->territory_code);
        }

        if ($this->change_number !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->change_number);
        }

        if ($this->owner_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->owner_id);
        }

        if ($this->initial_period !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->initial_period);
        }

        if ($this->initial_time_unit !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->initial_time_unit);
        }

        if ($this->renewal_period !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->renewal_period);
        }

        if ($this->renewal_time_unit !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->renewal_time_unit);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->package_id = null;
        $this->time_created = null;
        $this->time_next_process = null;
        $this->minute_limit = null;
        $this->minutes_used = null;
        $this->payment_method = null;
        $this->flags = null;
        $this->purchase_country_code = null;
        $this->license_type = null;
        $this->territory_code = null;
        $this->change_number = null;
        $this->owner_id = null;
        $this->initial_period = null;
        $this->initial_time_unit = null;
        $this->renewal_period = null;
        $this->renewal_time_unit = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientLicenseList\License) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->package_id = ($message->package_id !== null) ? $message->package_id : $this->package_id;
        $this->time_created = ($message->time_created !== null) ? $message->time_created : $this->time_created;
        $this->time_next_process = ($message->time_next_process !== null) ? $message->time_next_process : $this->time_next_process;
        $this->minute_limit = ($message->minute_limit !== null) ? $message->minute_limit : $this->minute_limit;
        $this->minutes_used = ($message->minutes_used !== null) ? $message->minutes_used : $this->minutes_used;
        $this->payment_method = ($message->payment_method !== null) ? $message->payment_method : $this->payment_method;
        $this->flags = ($message->flags !== null) ? $message->flags : $this->flags;
        $this->purchase_country_code = ($message->purchase_country_code !== null) ? $message->purchase_country_code : $this->purchase_country_code;
        $this->license_type = ($message->license_type !== null) ? $message->license_type : $this->license_type;
        $this->territory_code = ($message->territory_code !== null) ? $message->territory_code : $this->territory_code;
        $this->change_number = ($message->change_number !== null) ? $message->change_number : $this->change_number;
        $this->owner_id = ($message->owner_id !== null) ? $message->owner_id : $this->owner_id;
        $this->initial_period = ($message->initial_period !== null) ? $message->initial_period : $this->initial_period;
        $this->initial_time_unit = ($message->initial_time_unit !== null) ? $message->initial_time_unit : $this->initial_time_unit;
        $this->renewal_period = ($message->renewal_period !== null) ? $message->renewal_period : $this->renewal_period;
        $this->renewal_time_unit = ($message->renewal_time_unit !== null) ? $message->renewal_time_unit : $this->renewal_time_unit;
    }


}

