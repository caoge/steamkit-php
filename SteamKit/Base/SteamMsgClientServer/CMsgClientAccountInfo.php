<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer.CMsgClientAccountInfo
 */
class CMsgClientAccountInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * persona_name optional string = 1
     *
     * @var string
     */
    protected $persona_name = null;

    /**
     * ip_country optional string = 2
     *
     * @var string
     */
    protected $ip_country = null;

    /**
     * count_authed_computers optional int32 = 5
     *
     * @var int
     */
    protected $count_authed_computers = null;

    /**
     * account_flags optional uint32 = 7
     *
     * @var int
     */
    protected $account_flags = null;

    /**
     * facebook_id optional uint64 = 8
     *
     * @var int
     */
    protected $facebook_id = null;

    /**
     * facebook_name optional string = 9
     *
     * @var string
     */
    protected $facebook_name = null;

    /**
     * steamguard_notify_newmachines optional bool = 14
     *
     * @var bool
     */
    protected $steamguard_notify_newmachines = null;

    /**
     * steamguard_machine_name_user_chosen optional string = 15
     *
     * @var string
     */
    protected $steamguard_machine_name_user_chosen = null;

    /**
     * is_phone_verified optional bool = 16
     *
     * @var bool
     */
    protected $is_phone_verified = null;

    /**
     * two_factor_state optional uint32 = 17
     *
     * @var int
     */
    protected $two_factor_state = null;

    /**
     * is_phone_identifying optional bool = 18
     *
     * @var bool
     */
    protected $is_phone_identifying = null;

    /**
     * is_phone_needing_reverify optional bool = 19
     *
     * @var bool
     */
    protected $is_phone_needing_reverify = null;

    /**
     * Check if 'persona_name' has a value
     *
     * @return bool
     */
    public function hasPersonaName()
    {
        return $this->persona_name !== null;
    }

    /**
     * Get 'persona_name' value
     *
     * @return string
     */
    public function getPersonaName()
    {
        return $this->persona_name;
    }

    /**
     * Set 'persona_name' value
     *
     * @param string $value
     */
    public function setPersonaName($value = null)
    {
        $this->persona_name = $value;
    }

    /**
     * Check if 'ip_country' has a value
     *
     * @return bool
     */
    public function hasIpCountry()
    {
        return $this->ip_country !== null;
    }

    /**
     * Get 'ip_country' value
     *
     * @return string
     */
    public function getIpCountry()
    {
        return $this->ip_country;
    }

    /**
     * Set 'ip_country' value
     *
     * @param string $value
     */
    public function setIpCountry($value = null)
    {
        $this->ip_country = $value;
    }

    /**
     * Check if 'count_authed_computers' has a value
     *
     * @return bool
     */
    public function hasCountAuthedComputers()
    {
        return $this->count_authed_computers !== null;
    }

    /**
     * Get 'count_authed_computers' value
     *
     * @return int
     */
    public function getCountAuthedComputers()
    {
        return $this->count_authed_computers;
    }

    /**
     * Set 'count_authed_computers' value
     *
     * @param int $value
     */
    public function setCountAuthedComputers($value = null)
    {
        $this->count_authed_computers = $value;
    }

    /**
     * Check if 'account_flags' has a value
     *
     * @return bool
     */
    public function hasAccountFlags()
    {
        return $this->account_flags !== null;
    }

    /**
     * Get 'account_flags' value
     *
     * @return int
     */
    public function getAccountFlags()
    {
        return $this->account_flags;
    }

    /**
     * Set 'account_flags' value
     *
     * @param int $value
     */
    public function setAccountFlags($value = null)
    {
        $this->account_flags = $value;
    }

    /**
     * Check if 'facebook_id' has a value
     *
     * @return bool
     */
    public function hasFacebookId()
    {
        return $this->facebook_id !== null;
    }

    /**
     * Get 'facebook_id' value
     *
     * @return int
     */
    public function getFacebookId()
    {
        return $this->facebook_id;
    }

    /**
     * Set 'facebook_id' value
     *
     * @param int $value
     */
    public function setFacebookId($value = null)
    {
        $this->facebook_id = $value;
    }

    /**
     * Check if 'facebook_name' has a value
     *
     * @return bool
     */
    public function hasFacebookName()
    {
        return $this->facebook_name !== null;
    }

    /**
     * Get 'facebook_name' value
     *
     * @return string
     */
    public function getFacebookName()
    {
        return $this->facebook_name;
    }

    /**
     * Set 'facebook_name' value
     *
     * @param string $value
     */
    public function setFacebookName($value = null)
    {
        $this->facebook_name = $value;
    }

    /**
     * Check if 'steamguard_notify_newmachines' has a value
     *
     * @return bool
     */
    public function hasSteamguardNotifyNewmachines()
    {
        return $this->steamguard_notify_newmachines !== null;
    }

    /**
     * Get 'steamguard_notify_newmachines' value
     *
     * @return bool
     */
    public function getSteamguardNotifyNewmachines()
    {
        return $this->steamguard_notify_newmachines;
    }

    /**
     * Set 'steamguard_notify_newmachines' value
     *
     * @param bool $value
     */
    public function setSteamguardNotifyNewmachines($value = null)
    {
        $this->steamguard_notify_newmachines = $value;
    }

    /**
     * Check if 'steamguard_machine_name_user_chosen' has a value
     *
     * @return bool
     */
    public function hasSteamguardMachineNameUserChosen()
    {
        return $this->steamguard_machine_name_user_chosen !== null;
    }

    /**
     * Get 'steamguard_machine_name_user_chosen' value
     *
     * @return string
     */
    public function getSteamguardMachineNameUserChosen()
    {
        return $this->steamguard_machine_name_user_chosen;
    }

    /**
     * Set 'steamguard_machine_name_user_chosen' value
     *
     * @param string $value
     */
    public function setSteamguardMachineNameUserChosen($value = null)
    {
        $this->steamguard_machine_name_user_chosen = $value;
    }

    /**
     * Check if 'is_phone_verified' has a value
     *
     * @return bool
     */
    public function hasIsPhoneVerified()
    {
        return $this->is_phone_verified !== null;
    }

    /**
     * Get 'is_phone_verified' value
     *
     * @return bool
     */
    public function getIsPhoneVerified()
    {
        return $this->is_phone_verified;
    }

    /**
     * Set 'is_phone_verified' value
     *
     * @param bool $value
     */
    public function setIsPhoneVerified($value = null)
    {
        $this->is_phone_verified = $value;
    }

    /**
     * Check if 'two_factor_state' has a value
     *
     * @return bool
     */
    public function hasTwoFactorState()
    {
        return $this->two_factor_state !== null;
    }

    /**
     * Get 'two_factor_state' value
     *
     * @return int
     */
    public function getTwoFactorState()
    {
        return $this->two_factor_state;
    }

    /**
     * Set 'two_factor_state' value
     *
     * @param int $value
     */
    public function setTwoFactorState($value = null)
    {
        $this->two_factor_state = $value;
    }

    /**
     * Check if 'is_phone_identifying' has a value
     *
     * @return bool
     */
    public function hasIsPhoneIdentifying()
    {
        return $this->is_phone_identifying !== null;
    }

    /**
     * Get 'is_phone_identifying' value
     *
     * @return bool
     */
    public function getIsPhoneIdentifying()
    {
        return $this->is_phone_identifying;
    }

    /**
     * Set 'is_phone_identifying' value
     *
     * @param bool $value
     */
    public function setIsPhoneIdentifying($value = null)
    {
        $this->is_phone_identifying = $value;
    }

    /**
     * Check if 'is_phone_needing_reverify' has a value
     *
     * @return bool
     */
    public function hasIsPhoneNeedingReverify()
    {
        return $this->is_phone_needing_reverify !== null;
    }

    /**
     * Get 'is_phone_needing_reverify' value
     *
     * @return bool
     */
    public function getIsPhoneNeedingReverify()
    {
        return $this->is_phone_needing_reverify;
    }

    /**
     * Set 'is_phone_needing_reverify' value
     *
     * @param bool $value
     */
    public function setIsPhoneNeedingReverify($value = null)
    {
        $this->is_phone_needing_reverify = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'persona_name' => null,
            'ip_country' => null,
            'count_authed_computers' => null,
            'account_flags' => null,
            'facebook_id' => null,
            'facebook_name' => null,
            'steamguard_notify_newmachines' => null,
            'steamguard_machine_name_user_chosen' => null,
            'is_phone_verified' => null,
            'two_factor_state' => null,
            'is_phone_identifying' => null,
            'is_phone_needing_reverify' => null
        ], $values);

        $message->setPersonaName($values['persona_name']);
        $message->setIpCountry($values['ip_country']);
        $message->setCountAuthedComputers($values['count_authed_computers']);
        $message->setAccountFlags($values['account_flags']);
        $message->setFacebookId($values['facebook_id']);
        $message->setFacebookName($values['facebook_name']);
        $message->setSteamguardNotifyNewmachines($values['steamguard_notify_newmachines']);
        $message->setSteamguardMachineNameUserChosen($values['steamguard_machine_name_user_chosen']);
        $message->setIsPhoneVerified($values['is_phone_verified']);
        $message->setTwoFactorState($values['two_factor_state']);
        $message->setIsPhoneIdentifying($values['is_phone_identifying']);
        $message->setIsPhoneNeedingReverify($values['is_phone_needing_reverify']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientAccountInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'persona_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'ip_country',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'count_authed_computers',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'account_flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'facebook_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'facebook_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'steamguard_notify_newmachines',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'steamguard_machine_name_user_chosen',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'is_phone_verified',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'two_factor_state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'is_phone_identifying',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'is_phone_needing_reverify',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->persona_name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->persona_name);
        }

        if ($this->ip_country !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->ip_country);
        }

        if ($this->count_authed_computers !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->count_authed_computers);
        }

        if ($this->account_flags !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->account_flags);
        }

        if ($this->facebook_id !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->facebook_id);
        }

        if ($this->facebook_name !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->facebook_name);
        }

        if ($this->steamguard_notify_newmachines !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->steamguard_notify_newmachines);
        }

        if ($this->steamguard_machine_name_user_chosen !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->steamguard_machine_name_user_chosen);
        }

        if ($this->is_phone_verified !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeBool($stream, $this->is_phone_verified);
        }

        if ($this->two_factor_state !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->two_factor_state);
        }

        if ($this->is_phone_identifying !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->is_phone_identifying);
        }

        if ($this->is_phone_needing_reverify !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeBool($stream, $this->is_phone_needing_reverify);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->persona_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ip_country = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->count_authed_computers = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->account_flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->facebook_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->facebook_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->steamguard_notify_newmachines = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->steamguard_machine_name_user_chosen = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_phone_verified = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->two_factor_state = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_phone_identifying = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_phone_needing_reverify = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->persona_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->persona_name);
        }

        if ($this->ip_country !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ip_country);
        }

        if ($this->count_authed_computers !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->count_authed_computers);
        }

        if ($this->account_flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->account_flags);
        }

        if ($this->facebook_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->facebook_id);
        }

        if ($this->facebook_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->facebook_name);
        }

        if ($this->steamguard_notify_newmachines !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->steamguard_machine_name_user_chosen !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->steamguard_machine_name_user_chosen);
        }

        if ($this->is_phone_verified !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->two_factor_state !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->two_factor_state);
        }

        if ($this->is_phone_identifying !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->is_phone_needing_reverify !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->persona_name = null;
        $this->ip_country = null;
        $this->count_authed_computers = null;
        $this->account_flags = null;
        $this->facebook_id = null;
        $this->facebook_name = null;
        $this->steamguard_notify_newmachines = null;
        $this->steamguard_machine_name_user_chosen = null;
        $this->is_phone_verified = null;
        $this->two_factor_state = null;
        $this->is_phone_identifying = null;
        $this->is_phone_needing_reverify = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientAccountInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->persona_name = ($message->persona_name !== null) ? $message->persona_name : $this->persona_name;
        $this->ip_country = ($message->ip_country !== null) ? $message->ip_country : $this->ip_country;
        $this->count_authed_computers = ($message->count_authed_computers !== null) ? $message->count_authed_computers : $this->count_authed_computers;
        $this->account_flags = ($message->account_flags !== null) ? $message->account_flags : $this->account_flags;
        $this->facebook_id = ($message->facebook_id !== null) ? $message->facebook_id : $this->facebook_id;
        $this->facebook_name = ($message->facebook_name !== null) ? $message->facebook_name : $this->facebook_name;
        $this->steamguard_notify_newmachines = ($message->steamguard_notify_newmachines !== null) ? $message->steamguard_notify_newmachines : $this->steamguard_notify_newmachines;
        $this->steamguard_machine_name_user_chosen = ($message->steamguard_machine_name_user_chosen !== null) ? $message->steamguard_machine_name_user_chosen : $this->steamguard_machine_name_user_chosen;
        $this->is_phone_verified = ($message->is_phone_verified !== null) ? $message->is_phone_verified : $this->is_phone_verified;
        $this->two_factor_state = ($message->two_factor_state !== null) ? $message->two_factor_state : $this->two_factor_state;
        $this->is_phone_identifying = ($message->is_phone_identifying !== null) ? $message->is_phone_identifying : $this->is_phone_identifying;
        $this->is_phone_needing_reverify = ($message->is_phone_needing_reverify !== null) ? $message->is_phone_needing_reverify : $this->is_phone_needing_reverify;
    }


}

