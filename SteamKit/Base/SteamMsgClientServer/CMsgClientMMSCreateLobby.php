<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer.CMsgClientMMSCreateLobby
 */
class CMsgClientMMSCreateLobby extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * app_id optional uint32 = 1
     *
     * @var int
     */
    protected $app_id = null;

    /**
     * max_members optional int32 = 2
     *
     * @var int
     */
    protected $max_members = null;

    /**
     * lobby_type optional int32 = 3
     *
     * @var int
     */
    protected $lobby_type = null;

    /**
     * lobby_flags optional int32 = 4
     *
     * @var int
     */
    protected $lobby_flags = null;

    /**
     * cell_id optional uint32 = 5
     *
     * @var int
     */
    protected $cell_id = null;

    /**
     * public_ip optional uint32 = 6
     *
     * @var int
     */
    protected $public_ip = null;

    /**
     * metadata optional bytes = 7
     *
     * @var \Protobuf\Stream
     */
    protected $metadata = null;

    /**
     * persona_name_owner optional string = 8
     *
     * @var string
     */
    protected $persona_name_owner = null;

    /**
     * Check if 'app_id' has a value
     *
     * @return bool
     */
    public function hasAppId()
    {
        return $this->app_id !== null;
    }

    /**
     * Get 'app_id' value
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * Set 'app_id' value
     *
     * @param int $value
     */
    public function setAppId($value = null)
    {
        $this->app_id = $value;
    }

    /**
     * Check if 'max_members' has a value
     *
     * @return bool
     */
    public function hasMaxMembers()
    {
        return $this->max_members !== null;
    }

    /**
     * Get 'max_members' value
     *
     * @return int
     */
    public function getMaxMembers()
    {
        return $this->max_members;
    }

    /**
     * Set 'max_members' value
     *
     * @param int $value
     */
    public function setMaxMembers($value = null)
    {
        $this->max_members = $value;
    }

    /**
     * Check if 'lobby_type' has a value
     *
     * @return bool
     */
    public function hasLobbyType()
    {
        return $this->lobby_type !== null;
    }

    /**
     * Get 'lobby_type' value
     *
     * @return int
     */
    public function getLobbyType()
    {
        return $this->lobby_type;
    }

    /**
     * Set 'lobby_type' value
     *
     * @param int $value
     */
    public function setLobbyType($value = null)
    {
        $this->lobby_type = $value;
    }

    /**
     * Check if 'lobby_flags' has a value
     *
     * @return bool
     */
    public function hasLobbyFlags()
    {
        return $this->lobby_flags !== null;
    }

    /**
     * Get 'lobby_flags' value
     *
     * @return int
     */
    public function getLobbyFlags()
    {
        return $this->lobby_flags;
    }

    /**
     * Set 'lobby_flags' value
     *
     * @param int $value
     */
    public function setLobbyFlags($value = null)
    {
        $this->lobby_flags = $value;
    }

    /**
     * Check if 'cell_id' has a value
     *
     * @return bool
     */
    public function hasCellId()
    {
        return $this->cell_id !== null;
    }

    /**
     * Get 'cell_id' value
     *
     * @return int
     */
    public function getCellId()
    {
        return $this->cell_id;
    }

    /**
     * Set 'cell_id' value
     *
     * @param int $value
     */
    public function setCellId($value = null)
    {
        $this->cell_id = $value;
    }

    /**
     * Check if 'public_ip' has a value
     *
     * @return bool
     */
    public function hasPublicIp()
    {
        return $this->public_ip !== null;
    }

    /**
     * Get 'public_ip' value
     *
     * @return int
     */
    public function getPublicIp()
    {
        return $this->public_ip;
    }

    /**
     * Set 'public_ip' value
     *
     * @param int $value
     */
    public function setPublicIp($value = null)
    {
        $this->public_ip = $value;
    }

    /**
     * Check if 'metadata' has a value
     *
     * @return bool
     */
    public function hasMetadata()
    {
        return $this->metadata !== null;
    }

    /**
     * Get 'metadata' value
     *
     * @return \Protobuf\Stream
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set 'metadata' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setMetadata($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->metadata = $value;
    }

    /**
     * Check if 'persona_name_owner' has a value
     *
     * @return bool
     */
    public function hasPersonaNameOwner()
    {
        return $this->persona_name_owner !== null;
    }

    /**
     * Get 'persona_name_owner' value
     *
     * @return string
     */
    public function getPersonaNameOwner()
    {
        return $this->persona_name_owner;
    }

    /**
     * Set 'persona_name_owner' value
     *
     * @param string $value
     */
    public function setPersonaNameOwner($value = null)
    {
        $this->persona_name_owner = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'app_id' => null,
            'max_members' => null,
            'lobby_type' => null,
            'lobby_flags' => null,
            'cell_id' => null,
            'public_ip' => null,
            'metadata' => null,
            'persona_name_owner' => null
        ], $values);

        $message->setAppId($values['app_id']);
        $message->setMaxMembers($values['max_members']);
        $message->setLobbyType($values['lobby_type']);
        $message->setLobbyFlags($values['lobby_flags']);
        $message->setCellId($values['cell_id']);
        $message->setPublicIp($values['public_ip']);
        $message->setMetadata($values['metadata']);
        $message->setPersonaNameOwner($values['persona_name_owner']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientMMSCreateLobby',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'max_members',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'lobby_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'lobby_flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'cell_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'public_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'persona_name_owner',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->app_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->app_id);
        }

        if ($this->max_members !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->max_members);
        }

        if ($this->lobby_type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->lobby_type);
        }

        if ($this->lobby_flags !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->lobby_flags);
        }

        if ($this->cell_id !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->cell_id);
        }

        if ($this->public_ip !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->public_ip);
        }

        if ($this->metadata !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeByteStream($stream, $this->metadata);
        }

        if ($this->persona_name_owner !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->persona_name_owner);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->max_members = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->lobby_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->lobby_flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cell_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->public_ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->metadata = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->persona_name_owner = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_id);
        }

        if ($this->max_members !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_members);
        }

        if ($this->lobby_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->lobby_type);
        }

        if ($this->lobby_flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->lobby_flags);
        }

        if ($this->cell_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cell_id);
        }

        if ($this->public_ip !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->public_ip);
        }

        if ($this->metadata !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->metadata);
        }

        if ($this->persona_name_owner !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->persona_name_owner);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->app_id = null;
        $this->max_members = null;
        $this->lobby_type = null;
        $this->lobby_flags = null;
        $this->cell_id = null;
        $this->public_ip = null;
        $this->metadata = null;
        $this->persona_name_owner = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientMMSCreateLobby) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->app_id = ($message->app_id !== null) ? $message->app_id : $this->app_id;
        $this->max_members = ($message->max_members !== null) ? $message->max_members : $this->max_members;
        $this->lobby_type = ($message->lobby_type !== null) ? $message->lobby_type : $this->lobby_type;
        $this->lobby_flags = ($message->lobby_flags !== null) ? $message->lobby_flags : $this->lobby_flags;
        $this->cell_id = ($message->cell_id !== null) ? $message->cell_id : $this->cell_id;
        $this->public_ip = ($message->public_ip !== null) ? $message->public_ip : $this->public_ip;
        $this->metadata = ($message->metadata !== null) ? $message->metadata : $this->metadata;
        $this->persona_name_owner = ($message->persona_name_owner !== null) ? $message->persona_name_owner : $this->persona_name_owner;
    }


}

