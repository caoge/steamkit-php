<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer.CMsgClientLBSGetLBEntries
 */
class CMsgClientLBSGetLBEntries extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * app_id optional int32 = 1
     *
     * @var int
     */
    protected $app_id = null;

    /**
     * leaderboard_id optional int32 = 2
     *
     * @var int
     */
    protected $leaderboard_id = null;

    /**
     * range_start optional int32 = 3
     *
     * @var int
     */
    protected $range_start = null;

    /**
     * range_end optional int32 = 4
     *
     * @var int
     */
    protected $range_end = null;

    /**
     * leaderboard_data_request optional int32 = 5
     *
     * @var int
     */
    protected $leaderboard_data_request = null;

    /**
     * steamids repeated fixed64 = 6
     *
     * @var \Protobuf\Collection
     */
    protected $steamids = null;

    /**
     * Check if 'app_id' has a value
     *
     * @return bool
     */
    public function hasAppId()
    {
        return $this->app_id !== null;
    }

    /**
     * Get 'app_id' value
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * Set 'app_id' value
     *
     * @param int $value
     */
    public function setAppId($value = null)
    {
        $this->app_id = $value;
    }

    /**
     * Check if 'leaderboard_id' has a value
     *
     * @return bool
     */
    public function hasLeaderboardId()
    {
        return $this->leaderboard_id !== null;
    }

    /**
     * Get 'leaderboard_id' value
     *
     * @return int
     */
    public function getLeaderboardId()
    {
        return $this->leaderboard_id;
    }

    /**
     * Set 'leaderboard_id' value
     *
     * @param int $value
     */
    public function setLeaderboardId($value = null)
    {
        $this->leaderboard_id = $value;
    }

    /**
     * Check if 'range_start' has a value
     *
     * @return bool
     */
    public function hasRangeStart()
    {
        return $this->range_start !== null;
    }

    /**
     * Get 'range_start' value
     *
     * @return int
     */
    public function getRangeStart()
    {
        return $this->range_start;
    }

    /**
     * Set 'range_start' value
     *
     * @param int $value
     */
    public function setRangeStart($value = null)
    {
        $this->range_start = $value;
    }

    /**
     * Check if 'range_end' has a value
     *
     * @return bool
     */
    public function hasRangeEnd()
    {
        return $this->range_end !== null;
    }

    /**
     * Get 'range_end' value
     *
     * @return int
     */
    public function getRangeEnd()
    {
        return $this->range_end;
    }

    /**
     * Set 'range_end' value
     *
     * @param int $value
     */
    public function setRangeEnd($value = null)
    {
        $this->range_end = $value;
    }

    /**
     * Check if 'leaderboard_data_request' has a value
     *
     * @return bool
     */
    public function hasLeaderboardDataRequest()
    {
        return $this->leaderboard_data_request !== null;
    }

    /**
     * Get 'leaderboard_data_request' value
     *
     * @return int
     */
    public function getLeaderboardDataRequest()
    {
        return $this->leaderboard_data_request;
    }

    /**
     * Set 'leaderboard_data_request' value
     *
     * @param int $value
     */
    public function setLeaderboardDataRequest($value = null)
    {
        $this->leaderboard_data_request = $value;
    }

    /**
     * Check if 'steamids' has a value
     *
     * @return bool
     */
    public function hasSteamidsList()
    {
        return $this->steamids !== null;
    }

    /**
     * Get 'steamids' value
     *
     * @return \Protobuf\Collection
     */
    public function getSteamidsList()
    {
        return $this->steamids;
    }

    /**
     * Set 'steamids' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setSteamidsList(\Protobuf\Collection $value = null)
    {
        $this->steamids = $value;
    }

    /**
     * Add a new element to 'steamids'
     *
     * @param int $value
     */
    public function addSteamids($value)
    {
        if ($this->steamids === null) {
            $this->steamids = new \Protobuf\ScalarCollection();
        }

        $this->steamids->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'app_id' => null,
            'leaderboard_id' => null,
            'range_start' => null,
            'range_end' => null,
            'leaderboard_data_request' => null,
            'steamids' => []
        ], $values);

        $message->setAppId($values['app_id']);
        $message->setLeaderboardId($values['leaderboard_id']);
        $message->setRangeStart($values['range_start']);
        $message->setRangeEnd($values['range_end']);
        $message->setLeaderboardDataRequest($values['leaderboard_data_request']);

        foreach ($values['steamids'] as $item) {
            $message->addSteamids($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientLBSGetLBEntries',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'leaderboard_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'range_start',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'range_end',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'leaderboard_data_request',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'steamids',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->app_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->app_id);
        }

        if ($this->leaderboard_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->leaderboard_id);
        }

        if ($this->range_start !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->range_start);
        }

        if ($this->range_end !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->range_end);
        }

        if ($this->leaderboard_data_request !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->leaderboard_data_request);
        }

        if ($this->steamids !== null) {
            foreach ($this->steamids as $val) {
                $writer->writeVarint($stream, 49);
                $writer->writeFixed64($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->leaderboard_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->range_start = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->range_end = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->leaderboard_data_request = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                if ($this->steamids === null) {
                    $this->steamids = new \Protobuf\ScalarCollection();
                }

                $this->steamids->add($reader->readFixed64($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_id);
        }

        if ($this->leaderboard_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->leaderboard_id);
        }

        if ($this->range_start !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->range_start);
        }

        if ($this->range_end !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->range_end);
        }

        if ($this->leaderboard_data_request !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->leaderboard_data_request);
        }

        if ($this->steamids !== null) {
            foreach ($this->steamids as $val) {
                $size += 1;
                $size += 8;
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->app_id = null;
        $this->leaderboard_id = null;
        $this->range_start = null;
        $this->range_end = null;
        $this->leaderboard_data_request = null;
        $this->steamids = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientLBSGetLBEntries) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->app_id = ($message->app_id !== null) ? $message->app_id : $this->app_id;
        $this->leaderboard_id = ($message->leaderboard_id !== null) ? $message->leaderboard_id : $this->leaderboard_id;
        $this->range_start = ($message->range_start !== null) ? $message->range_start : $this->range_start;
        $this->range_end = ($message->range_end !== null) ? $message->range_end : $this->range_end;
        $this->leaderboard_data_request = ($message->leaderboard_data_request !== null) ? $message->leaderboard_data_request : $this->leaderboard_data_request;
        $this->steamids = ($message->steamids !== null) ? $message->steamids : $this->steamids;
    }


}

