<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientFriendProfileInfoResponse
 */
class CMsgClientFriendProfileInfoResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * eresult optional int32 = 1
     *
     * @var int
     */
    protected $eresult = null;

    /**
     * steamid_friend optional fixed64 = 2
     *
     * @var int
     */
    protected $steamid_friend = null;

    /**
     * time_created optional uint32 = 3
     *
     * @var int
     */
    protected $time_created = null;

    /**
     * real_name optional string = 4
     *
     * @var string
     */
    protected $real_name = null;

    /**
     * city_name optional string = 5
     *
     * @var string
     */
    protected $city_name = null;

    /**
     * state_name optional string = 6
     *
     * @var string
     */
    protected $state_name = null;

    /**
     * country_name optional string = 7
     *
     * @var string
     */
    protected $country_name = null;

    /**
     * headline optional string = 8
     *
     * @var string
     */
    protected $headline = null;

    /**
     * summary optional string = 9
     *
     * @var string
     */
    protected $summary = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->eresult = '2';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'eresult' has a value
     *
     * @return bool
     */
    public function hasEresult()
    {
        return $this->eresult !== null;
    }

    /**
     * Get 'eresult' value
     *
     * @return int
     */
    public function getEresult()
    {
        return $this->eresult;
    }

    /**
     * Set 'eresult' value
     *
     * @param int $value
     */
    public function setEresult($value = null)
    {
        $this->eresult = $value;
    }

    /**
     * Check if 'steamid_friend' has a value
     *
     * @return bool
     */
    public function hasSteamidFriend()
    {
        return $this->steamid_friend !== null;
    }

    /**
     * Get 'steamid_friend' value
     *
     * @return int
     */
    public function getSteamidFriend()
    {
        return $this->steamid_friend;
    }

    /**
     * Set 'steamid_friend' value
     *
     * @param int $value
     */
    public function setSteamidFriend($value = null)
    {
        $this->steamid_friend = $value;
    }

    /**
     * Check if 'time_created' has a value
     *
     * @return bool
     */
    public function hasTimeCreated()
    {
        return $this->time_created !== null;
    }

    /**
     * Get 'time_created' value
     *
     * @return int
     */
    public function getTimeCreated()
    {
        return $this->time_created;
    }

    /**
     * Set 'time_created' value
     *
     * @param int $value
     */
    public function setTimeCreated($value = null)
    {
        $this->time_created = $value;
    }

    /**
     * Check if 'real_name' has a value
     *
     * @return bool
     */
    public function hasRealName()
    {
        return $this->real_name !== null;
    }

    /**
     * Get 'real_name' value
     *
     * @return string
     */
    public function getRealName()
    {
        return $this->real_name;
    }

    /**
     * Set 'real_name' value
     *
     * @param string $value
     */
    public function setRealName($value = null)
    {
        $this->real_name = $value;
    }

    /**
     * Check if 'city_name' has a value
     *
     * @return bool
     */
    public function hasCityName()
    {
        return $this->city_name !== null;
    }

    /**
     * Get 'city_name' value
     *
     * @return string
     */
    public function getCityName()
    {
        return $this->city_name;
    }

    /**
     * Set 'city_name' value
     *
     * @param string $value
     */
    public function setCityName($value = null)
    {
        $this->city_name = $value;
    }

    /**
     * Check if 'state_name' has a value
     *
     * @return bool
     */
    public function hasStateName()
    {
        return $this->state_name !== null;
    }

    /**
     * Get 'state_name' value
     *
     * @return string
     */
    public function getStateName()
    {
        return $this->state_name;
    }

    /**
     * Set 'state_name' value
     *
     * @param string $value
     */
    public function setStateName($value = null)
    {
        $this->state_name = $value;
    }

    /**
     * Check if 'country_name' has a value
     *
     * @return bool
     */
    public function hasCountryName()
    {
        return $this->country_name !== null;
    }

    /**
     * Get 'country_name' value
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->country_name;
    }

    /**
     * Set 'country_name' value
     *
     * @param string $value
     */
    public function setCountryName($value = null)
    {
        $this->country_name = $value;
    }

    /**
     * Check if 'headline' has a value
     *
     * @return bool
     */
    public function hasHeadline()
    {
        return $this->headline !== null;
    }

    /**
     * Get 'headline' value
     *
     * @return string
     */
    public function getHeadline()
    {
        return $this->headline;
    }

    /**
     * Set 'headline' value
     *
     * @param string $value
     */
    public function setHeadline($value = null)
    {
        $this->headline = $value;
    }

    /**
     * Check if 'summary' has a value
     *
     * @return bool
     */
    public function hasSummary()
    {
        return $this->summary !== null;
    }

    /**
     * Get 'summary' value
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->summary;
    }

    /**
     * Set 'summary' value
     *
     * @param string $value
     */
    public function setSummary($value = null)
    {
        $this->summary = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'eresult' => '2',
            'steamid_friend' => null,
            'time_created' => null,
            'real_name' => null,
            'city_name' => null,
            'state_name' => null,
            'country_name' => null,
            'headline' => null,
            'summary' => null
        ], $values);

        $message->setEresult($values['eresult']);
        $message->setSteamidFriend($values['steamid_friend']);
        $message->setTimeCreated($values['time_created']);
        $message->setRealName($values['real_name']);
        $message->setCityName($values['city_name']);
        $message->setStateName($values['state_name']);
        $message->setCountryName($values['country_name']);
        $message->setHeadline($values['headline']);
        $message->setSummary($values['summary']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientFriendProfileInfoResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'eresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'steamid_friend',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'time_created',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'real_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'city_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'state_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'country_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'headline',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'summary',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->eresult !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->eresult);
        }

        if ($this->steamid_friend !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->steamid_friend);
        }

        if ($this->time_created !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->time_created);
        }

        if ($this->real_name !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->real_name);
        }

        if ($this->city_name !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->city_name);
        }

        if ($this->state_name !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->state_name);
        }

        if ($this->country_name !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->country_name);
        }

        if ($this->headline !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->headline);
        }

        if ($this->summary !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->summary);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->eresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steamid_friend = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->time_created = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->real_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->city_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->state_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->country_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->headline = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->summary = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->eresult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult);
        }

        if ($this->steamid_friend !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->time_created !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->time_created);
        }

        if ($this->real_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->real_name);
        }

        if ($this->city_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->city_name);
        }

        if ($this->state_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->state_name);
        }

        if ($this->country_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->country_name);
        }

        if ($this->headline !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->headline);
        }

        if ($this->summary !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->summary);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->eresult = '2';
        $this->steamid_friend = null;
        $this->time_created = null;
        $this->real_name = null;
        $this->city_name = null;
        $this->state_name = null;
        $this->country_name = null;
        $this->headline = null;
        $this->summary = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientFriendProfileInfoResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->eresult = ($message->eresult !== null) ? $message->eresult : $this->eresult;
        $this->steamid_friend = ($message->steamid_friend !== null) ? $message->steamid_friend : $this->steamid_friend;
        $this->time_created = ($message->time_created !== null) ? $message->time_created : $this->time_created;
        $this->real_name = ($message->real_name !== null) ? $message->real_name : $this->real_name;
        $this->city_name = ($message->city_name !== null) ? $message->city_name : $this->city_name;
        $this->state_name = ($message->state_name !== null) ? $message->state_name : $this->state_name;
        $this->country_name = ($message->country_name !== null) ? $message->country_name : $this->country_name;
        $this->headline = ($message->headline !== null) ? $message->headline : $this->headline;
        $this->summary = ($message->summary !== null) ? $message->summary : $this->summary;
    }


}

