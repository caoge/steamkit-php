<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer\CMsgClientGetClientAppListResponse;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientGetClientAppListResponse.App
 */
class App extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * appid optional uint32 = 1
     *
     * @var int
     */
    protected $appid = null;

    /**
     * category optional string = 2
     *
     * @var string
     */
    protected $category = null;

    /**
     * app_type optional string = 10
     *
     * @var string
     */
    protected $app_type = null;

    /**
     * favorite optional bool = 3
     *
     * @var bool
     */
    protected $favorite = null;

    /**
     * installed optional bool = 4
     *
     * @var bool
     */
    protected $installed = null;

    /**
     * auto_update optional bool = 5
     *
     * @var bool
     */
    protected $auto_update = null;

    /**
     * bytes_downloaded optional uint64 = 6
     *
     * @var int
     */
    protected $bytes_downloaded = null;

    /**
     * bytes_needed optional uint64 = 7
     *
     * @var int
     */
    protected $bytes_needed = null;

    /**
     * bytes_download_rate optional uint32 = 8
     *
     * @var int
     */
    protected $bytes_download_rate = null;

    /**
     * download_paused optional bool = 11
     *
     * @var bool
     */
    protected $download_paused = null;

    /**
     * num_downloading optional uint32 = 12
     *
     * @var int
     */
    protected $num_downloading = null;

    /**
     * num_paused optional uint32 = 13
     *
     * @var int
     */
    protected $num_paused = null;

    /**
     * changing optional bool = 14
     *
     * @var bool
     */
    protected $changing = null;

    /**
     * available_on_platform optional bool = 15
     *
     * @var bool
     */
    protected $available_on_platform = null;

    /**
     * dlcs repeated message = 9
     *
     * @var \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer\CMsgClientGetClientAppListResponse\App\DLC>
     */
    protected $dlcs = null;

    /**
     * Check if 'appid' has a value
     *
     * @return bool
     */
    public function hasAppid()
    {
        return $this->appid !== null;
    }

    /**
     * Get 'appid' value
     *
     * @return int
     */
    public function getAppid()
    {
        return $this->appid;
    }

    /**
     * Set 'appid' value
     *
     * @param int $value
     */
    public function setAppid($value = null)
    {
        $this->appid = $value;
    }

    /**
     * Check if 'category' has a value
     *
     * @return bool
     */
    public function hasCategory()
    {
        return $this->category !== null;
    }

    /**
     * Get 'category' value
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Set 'category' value
     *
     * @param string $value
     */
    public function setCategory($value = null)
    {
        $this->category = $value;
    }

    /**
     * Check if 'app_type' has a value
     *
     * @return bool
     */
    public function hasAppType()
    {
        return $this->app_type !== null;
    }

    /**
     * Get 'app_type' value
     *
     * @return string
     */
    public function getAppType()
    {
        return $this->app_type;
    }

    /**
     * Set 'app_type' value
     *
     * @param string $value
     */
    public function setAppType($value = null)
    {
        $this->app_type = $value;
    }

    /**
     * Check if 'favorite' has a value
     *
     * @return bool
     */
    public function hasFavorite()
    {
        return $this->favorite !== null;
    }

    /**
     * Get 'favorite' value
     *
     * @return bool
     */
    public function getFavorite()
    {
        return $this->favorite;
    }

    /**
     * Set 'favorite' value
     *
     * @param bool $value
     */
    public function setFavorite($value = null)
    {
        $this->favorite = $value;
    }

    /**
     * Check if 'installed' has a value
     *
     * @return bool
     */
    public function hasInstalled()
    {
        return $this->installed !== null;
    }

    /**
     * Get 'installed' value
     *
     * @return bool
     */
    public function getInstalled()
    {
        return $this->installed;
    }

    /**
     * Set 'installed' value
     *
     * @param bool $value
     */
    public function setInstalled($value = null)
    {
        $this->installed = $value;
    }

    /**
     * Check if 'auto_update' has a value
     *
     * @return bool
     */
    public function hasAutoUpdate()
    {
        return $this->auto_update !== null;
    }

    /**
     * Get 'auto_update' value
     *
     * @return bool
     */
    public function getAutoUpdate()
    {
        return $this->auto_update;
    }

    /**
     * Set 'auto_update' value
     *
     * @param bool $value
     */
    public function setAutoUpdate($value = null)
    {
        $this->auto_update = $value;
    }

    /**
     * Check if 'bytes_downloaded' has a value
     *
     * @return bool
     */
    public function hasBytesDownloaded()
    {
        return $this->bytes_downloaded !== null;
    }

    /**
     * Get 'bytes_downloaded' value
     *
     * @return int
     */
    public function getBytesDownloaded()
    {
        return $this->bytes_downloaded;
    }

    /**
     * Set 'bytes_downloaded' value
     *
     * @param int $value
     */
    public function setBytesDownloaded($value = null)
    {
        $this->bytes_downloaded = $value;
    }

    /**
     * Check if 'bytes_needed' has a value
     *
     * @return bool
     */
    public function hasBytesNeeded()
    {
        return $this->bytes_needed !== null;
    }

    /**
     * Get 'bytes_needed' value
     *
     * @return int
     */
    public function getBytesNeeded()
    {
        return $this->bytes_needed;
    }

    /**
     * Set 'bytes_needed' value
     *
     * @param int $value
     */
    public function setBytesNeeded($value = null)
    {
        $this->bytes_needed = $value;
    }

    /**
     * Check if 'bytes_download_rate' has a value
     *
     * @return bool
     */
    public function hasBytesDownloadRate()
    {
        return $this->bytes_download_rate !== null;
    }

    /**
     * Get 'bytes_download_rate' value
     *
     * @return int
     */
    public function getBytesDownloadRate()
    {
        return $this->bytes_download_rate;
    }

    /**
     * Set 'bytes_download_rate' value
     *
     * @param int $value
     */
    public function setBytesDownloadRate($value = null)
    {
        $this->bytes_download_rate = $value;
    }

    /**
     * Check if 'download_paused' has a value
     *
     * @return bool
     */
    public function hasDownloadPaused()
    {
        return $this->download_paused !== null;
    }

    /**
     * Get 'download_paused' value
     *
     * @return bool
     */
    public function getDownloadPaused()
    {
        return $this->download_paused;
    }

    /**
     * Set 'download_paused' value
     *
     * @param bool $value
     */
    public function setDownloadPaused($value = null)
    {
        $this->download_paused = $value;
    }

    /**
     * Check if 'num_downloading' has a value
     *
     * @return bool
     */
    public function hasNumDownloading()
    {
        return $this->num_downloading !== null;
    }

    /**
     * Get 'num_downloading' value
     *
     * @return int
     */
    public function getNumDownloading()
    {
        return $this->num_downloading;
    }

    /**
     * Set 'num_downloading' value
     *
     * @param int $value
     */
    public function setNumDownloading($value = null)
    {
        $this->num_downloading = $value;
    }

    /**
     * Check if 'num_paused' has a value
     *
     * @return bool
     */
    public function hasNumPaused()
    {
        return $this->num_paused !== null;
    }

    /**
     * Get 'num_paused' value
     *
     * @return int
     */
    public function getNumPaused()
    {
        return $this->num_paused;
    }

    /**
     * Set 'num_paused' value
     *
     * @param int $value
     */
    public function setNumPaused($value = null)
    {
        $this->num_paused = $value;
    }

    /**
     * Check if 'changing' has a value
     *
     * @return bool
     */
    public function hasChanging()
    {
        return $this->changing !== null;
    }

    /**
     * Get 'changing' value
     *
     * @return bool
     */
    public function getChanging()
    {
        return $this->changing;
    }

    /**
     * Set 'changing' value
     *
     * @param bool $value
     */
    public function setChanging($value = null)
    {
        $this->changing = $value;
    }

    /**
     * Check if 'available_on_platform' has a value
     *
     * @return bool
     */
    public function hasAvailableOnPlatform()
    {
        return $this->available_on_platform !== null;
    }

    /**
     * Get 'available_on_platform' value
     *
     * @return bool
     */
    public function getAvailableOnPlatform()
    {
        return $this->available_on_platform;
    }

    /**
     * Set 'available_on_platform' value
     *
     * @param bool $value
     */
    public function setAvailableOnPlatform($value = null)
    {
        $this->available_on_platform = $value;
    }

    /**
     * Check if 'dlcs' has a value
     *
     * @return bool
     */
    public function hasDlcsList()
    {
        return $this->dlcs !== null;
    }

    /**
     * Get 'dlcs' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer\CMsgClientGetClientAppListResponse\App\DLC>
     */
    public function getDlcsList()
    {
        return $this->dlcs;
    }

    /**
     * Set 'dlcs' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer\CMsgClientGetClientAppListResponse\App\DLC> $value
     */
    public function setDlcsList(\Protobuf\Collection $value = null)
    {
        $this->dlcs = $value;
    }

    /**
     * Add a new element to 'dlcs'
     *
     * @param
     * \SteamKit\Base\SteamMsgClientServer\CMsgClientGetClientAppListResponse\App\DLC
     * $value
     */
    public function addDlcs(\SteamKit\Base\SteamMsgClientServer\CMsgClientGetClientAppListResponse\App\DLC $value)
    {
        if ($this->dlcs === null) {
            $this->dlcs = new \Protobuf\MessageCollection();
        }

        $this->dlcs->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'appid' => null,
            'category' => null,
            'app_type' => null,
            'favorite' => null,
            'installed' => null,
            'auto_update' => null,
            'bytes_downloaded' => null,
            'bytes_needed' => null,
            'bytes_download_rate' => null,
            'download_paused' => null,
            'num_downloading' => null,
            'num_paused' => null,
            'changing' => null,
            'available_on_platform' => null,
            'dlcs' => []
        ], $values);

        $message->setAppid($values['appid']);
        $message->setCategory($values['category']);
        $message->setAppType($values['app_type']);
        $message->setFavorite($values['favorite']);
        $message->setInstalled($values['installed']);
        $message->setAutoUpdate($values['auto_update']);
        $message->setBytesDownloaded($values['bytes_downloaded']);
        $message->setBytesNeeded($values['bytes_needed']);
        $message->setBytesDownloadRate($values['bytes_download_rate']);
        $message->setDownloadPaused($values['download_paused']);
        $message->setNumDownloading($values['num_downloading']);
        $message->setNumPaused($values['num_paused']);
        $message->setChanging($values['changing']);
        $message->setAvailableOnPlatform($values['available_on_platform']);

        foreach ($values['dlcs'] as $item) {
            $message->addDlcs($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'App',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'category',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'app_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'favorite',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'installed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'auto_update',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'bytes_downloaded',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'bytes_needed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'bytes_download_rate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'download_paused',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'num_downloading',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'num_paused',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'changing',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'available_on_platform',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'dlcs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.SteamMsgClientServer.CMsgClientGetClientAppListResponse.App.DLC'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->appid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->appid);
        }

        if ($this->category !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->category);
        }

        if ($this->app_type !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->app_type);
        }

        if ($this->favorite !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->favorite);
        }

        if ($this->installed !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->installed);
        }

        if ($this->auto_update !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->auto_update);
        }

        if ($this->bytes_downloaded !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->bytes_downloaded);
        }

        if ($this->bytes_needed !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->bytes_needed);
        }

        if ($this->bytes_download_rate !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->bytes_download_rate);
        }

        if ($this->download_paused !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->download_paused);
        }

        if ($this->num_downloading !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->num_downloading);
        }

        if ($this->num_paused !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->num_paused);
        }

        if ($this->changing !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->changing);
        }

        if ($this->available_on_platform !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeBool($stream, $this->available_on_platform);
        }

        if ($this->dlcs !== null) {
            foreach ($this->dlcs as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->category = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->app_type = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->favorite = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->installed = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->auto_update = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->bytes_downloaded = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->bytes_needed = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->bytes_download_rate = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->download_paused = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->num_downloading = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->num_paused = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->changing = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->available_on_platform = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\SteamMsgClientServer\CMsgClientGetClientAppListResponse\App\DLC();

                if ($this->dlcs === null) {
                    $this->dlcs = new \Protobuf\MessageCollection();
                }

                $this->dlcs->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->appid);
        }

        if ($this->category !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->category);
        }

        if ($this->app_type !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->app_type);
        }

        if ($this->favorite !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->installed !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->auto_update !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->bytes_downloaded !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bytes_downloaded);
        }

        if ($this->bytes_needed !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bytes_needed);
        }

        if ($this->bytes_download_rate !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bytes_download_rate);
        }

        if ($this->download_paused !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->num_downloading !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->num_downloading);
        }

        if ($this->num_paused !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->num_paused);
        }

        if ($this->changing !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->available_on_platform !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->dlcs !== null) {
            foreach ($this->dlcs as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->appid = null;
        $this->category = null;
        $this->app_type = null;
        $this->favorite = null;
        $this->installed = null;
        $this->auto_update = null;
        $this->bytes_downloaded = null;
        $this->bytes_needed = null;
        $this->bytes_download_rate = null;
        $this->download_paused = null;
        $this->num_downloading = null;
        $this->num_paused = null;
        $this->changing = null;
        $this->available_on_platform = null;
        $this->dlcs = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientGetClientAppListResponse\App) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->appid = ($message->appid !== null) ? $message->appid : $this->appid;
        $this->category = ($message->category !== null) ? $message->category : $this->category;
        $this->app_type = ($message->app_type !== null) ? $message->app_type : $this->app_type;
        $this->favorite = ($message->favorite !== null) ? $message->favorite : $this->favorite;
        $this->installed = ($message->installed !== null) ? $message->installed : $this->installed;
        $this->auto_update = ($message->auto_update !== null) ? $message->auto_update : $this->auto_update;
        $this->bytes_downloaded = ($message->bytes_downloaded !== null) ? $message->bytes_downloaded : $this->bytes_downloaded;
        $this->bytes_needed = ($message->bytes_needed !== null) ? $message->bytes_needed : $this->bytes_needed;
        $this->bytes_download_rate = ($message->bytes_download_rate !== null) ? $message->bytes_download_rate : $this->bytes_download_rate;
        $this->download_paused = ($message->download_paused !== null) ? $message->download_paused : $this->download_paused;
        $this->num_downloading = ($message->num_downloading !== null) ? $message->num_downloading : $this->num_downloading;
        $this->num_paused = ($message->num_paused !== null) ? $message->num_paused : $this->num_paused;
        $this->changing = ($message->changing !== null) ? $message->changing : $this->changing;
        $this->available_on_platform = ($message->available_on_platform !== null) ? $message->available_on_platform : $this->available_on_platform;
        $this->dlcs = ($message->dlcs !== null) ? $message->dlcs : $this->dlcs;
    }


}

