<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientConnectionStats.Stats_Logon
 */
class Stats_Logon extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * connect_attempts optional int32 = 1
     *
     * @var int
     */
    protected $connect_attempts = null;

    /**
     * connect_successes optional int32 = 2
     *
     * @var int
     */
    protected $connect_successes = null;

    /**
     * connect_failures optional int32 = 3
     *
     * @var int
     */
    protected $connect_failures = null;

    /**
     * connections_dropped optional int32 = 4
     *
     * @var int
     */
    protected $connections_dropped = null;

    /**
     * seconds_running optional uint32 = 5
     *
     * @var int
     */
    protected $seconds_running = null;

    /**
     * msec_tologonthistime optional uint32 = 6
     *
     * @var int
     */
    protected $msec_tologonthistime = null;

    /**
     * count_bad_cms optional uint32 = 7
     *
     * @var int
     */
    protected $count_bad_cms = null;

    /**
     * Check if 'connect_attempts' has a value
     *
     * @return bool
     */
    public function hasConnectAttempts()
    {
        return $this->connect_attempts !== null;
    }

    /**
     * Get 'connect_attempts' value
     *
     * @return int
     */
    public function getConnectAttempts()
    {
        return $this->connect_attempts;
    }

    /**
     * Set 'connect_attempts' value
     *
     * @param int $value
     */
    public function setConnectAttempts($value = null)
    {
        $this->connect_attempts = $value;
    }

    /**
     * Check if 'connect_successes' has a value
     *
     * @return bool
     */
    public function hasConnectSuccesses()
    {
        return $this->connect_successes !== null;
    }

    /**
     * Get 'connect_successes' value
     *
     * @return int
     */
    public function getConnectSuccesses()
    {
        return $this->connect_successes;
    }

    /**
     * Set 'connect_successes' value
     *
     * @param int $value
     */
    public function setConnectSuccesses($value = null)
    {
        $this->connect_successes = $value;
    }

    /**
     * Check if 'connect_failures' has a value
     *
     * @return bool
     */
    public function hasConnectFailures()
    {
        return $this->connect_failures !== null;
    }

    /**
     * Get 'connect_failures' value
     *
     * @return int
     */
    public function getConnectFailures()
    {
        return $this->connect_failures;
    }

    /**
     * Set 'connect_failures' value
     *
     * @param int $value
     */
    public function setConnectFailures($value = null)
    {
        $this->connect_failures = $value;
    }

    /**
     * Check if 'connections_dropped' has a value
     *
     * @return bool
     */
    public function hasConnectionsDropped()
    {
        return $this->connections_dropped !== null;
    }

    /**
     * Get 'connections_dropped' value
     *
     * @return int
     */
    public function getConnectionsDropped()
    {
        return $this->connections_dropped;
    }

    /**
     * Set 'connections_dropped' value
     *
     * @param int $value
     */
    public function setConnectionsDropped($value = null)
    {
        $this->connections_dropped = $value;
    }

    /**
     * Check if 'seconds_running' has a value
     *
     * @return bool
     */
    public function hasSecondsRunning()
    {
        return $this->seconds_running !== null;
    }

    /**
     * Get 'seconds_running' value
     *
     * @return int
     */
    public function getSecondsRunning()
    {
        return $this->seconds_running;
    }

    /**
     * Set 'seconds_running' value
     *
     * @param int $value
     */
    public function setSecondsRunning($value = null)
    {
        $this->seconds_running = $value;
    }

    /**
     * Check if 'msec_tologonthistime' has a value
     *
     * @return bool
     */
    public function hasMsecTologonthistime()
    {
        return $this->msec_tologonthistime !== null;
    }

    /**
     * Get 'msec_tologonthistime' value
     *
     * @return int
     */
    public function getMsecTologonthistime()
    {
        return $this->msec_tologonthistime;
    }

    /**
     * Set 'msec_tologonthistime' value
     *
     * @param int $value
     */
    public function setMsecTologonthistime($value = null)
    {
        $this->msec_tologonthistime = $value;
    }

    /**
     * Check if 'count_bad_cms' has a value
     *
     * @return bool
     */
    public function hasCountBadCms()
    {
        return $this->count_bad_cms !== null;
    }

    /**
     * Get 'count_bad_cms' value
     *
     * @return int
     */
    public function getCountBadCms()
    {
        return $this->count_bad_cms;
    }

    /**
     * Set 'count_bad_cms' value
     *
     * @param int $value
     */
    public function setCountBadCms($value = null)
    {
        $this->count_bad_cms = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'connect_attempts' => null,
            'connect_successes' => null,
            'connect_failures' => null,
            'connections_dropped' => null,
            'seconds_running' => null,
            'msec_tologonthistime' => null,
            'count_bad_cms' => null
        ], $values);

        $message->setConnectAttempts($values['connect_attempts']);
        $message->setConnectSuccesses($values['connect_successes']);
        $message->setConnectFailures($values['connect_failures']);
        $message->setConnectionsDropped($values['connections_dropped']);
        $message->setSecondsRunning($values['seconds_running']);
        $message->setMsecTologonthistime($values['msec_tologonthistime']);
        $message->setCountBadCms($values['count_bad_cms']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Stats_Logon',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'connect_attempts',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'connect_successes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'connect_failures',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'connections_dropped',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'seconds_running',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'msec_tologonthistime',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'count_bad_cms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->connect_attempts !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->connect_attempts);
        }

        if ($this->connect_successes !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->connect_successes);
        }

        if ($this->connect_failures !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->connect_failures);
        }

        if ($this->connections_dropped !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->connections_dropped);
        }

        if ($this->seconds_running !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->seconds_running);
        }

        if ($this->msec_tologonthistime !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->msec_tologonthistime);
        }

        if ($this->count_bad_cms !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->count_bad_cms);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->connect_attempts = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->connect_successes = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->connect_failures = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->connections_dropped = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seconds_running = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->msec_tologonthistime = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->count_bad_cms = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->connect_attempts !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->connect_attempts);
        }

        if ($this->connect_successes !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->connect_successes);
        }

        if ($this->connect_failures !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->connect_failures);
        }

        if ($this->connections_dropped !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->connections_dropped);
        }

        if ($this->seconds_running !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seconds_running);
        }

        if ($this->msec_tologonthistime !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->msec_tologonthistime);
        }

        if ($this->count_bad_cms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->count_bad_cms);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->connect_attempts = null;
        $this->connect_successes = null;
        $this->connect_failures = null;
        $this->connections_dropped = null;
        $this->seconds_running = null;
        $this->msec_tologonthistime = null;
        $this->count_bad_cms = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats\Stats_Logon) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->connect_attempts = ($message->connect_attempts !== null) ? $message->connect_attempts : $this->connect_attempts;
        $this->connect_successes = ($message->connect_successes !== null) ? $message->connect_successes : $this->connect_successes;
        $this->connect_failures = ($message->connect_failures !== null) ? $message->connect_failures : $this->connect_failures;
        $this->connections_dropped = ($message->connections_dropped !== null) ? $message->connections_dropped : $this->connections_dropped;
        $this->seconds_running = ($message->seconds_running !== null) ? $message->seconds_running : $this->seconds_running;
        $this->msec_tologonthistime = ($message->msec_tologonthistime !== null) ? $message->msec_tologonthistime : $this->msec_tologonthistime;
        $this->count_bad_cms = ($message->count_bad_cms !== null) ? $message->count_bad_cms : $this->count_bad_cms;
    }


}

