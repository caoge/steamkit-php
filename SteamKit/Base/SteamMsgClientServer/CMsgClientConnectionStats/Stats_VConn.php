<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientConnectionStats.Stats_VConn
 */
class Stats_VConn extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * connections_udp optional uint32 = 1
     *
     * @var int
     */
    protected $connections_udp = null;

    /**
     * connections_tcp optional uint32 = 2
     *
     * @var int
     */
    protected $connections_tcp = null;

    /**
     * stats_udp optional message = 3
     *
     * @var \SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats\Stats_UDP
     */
    protected $stats_udp = null;

    /**
     * pkts_abandoned optional uint64 = 4
     *
     * @var int
     */
    protected $pkts_abandoned = null;

    /**
     * conn_req_received optional uint64 = 5
     *
     * @var int
     */
    protected $conn_req_received = null;

    /**
     * pkts_resent optional uint64 = 6
     *
     * @var int
     */
    protected $pkts_resent = null;

    /**
     * msgs_sent optional uint64 = 7
     *
     * @var int
     */
    protected $msgs_sent = null;

    /**
     * msgs_sent_failed optional uint64 = 8
     *
     * @var int
     */
    protected $msgs_sent_failed = null;

    /**
     * msgs_recv optional uint64 = 9
     *
     * @var int
     */
    protected $msgs_recv = null;

    /**
     * datagrams_sent optional uint64 = 10
     *
     * @var int
     */
    protected $datagrams_sent = null;

    /**
     * datagrams_recv optional uint64 = 11
     *
     * @var int
     */
    protected $datagrams_recv = null;

    /**
     * bad_pkts_recv optional uint64 = 12
     *
     * @var int
     */
    protected $bad_pkts_recv = null;

    /**
     * unknown_conn_pkts_recv optional uint64 = 13
     *
     * @var int
     */
    protected $unknown_conn_pkts_recv = null;

    /**
     * missed_pkts_recv optional uint64 = 14
     *
     * @var int
     */
    protected $missed_pkts_recv = null;

    /**
     * dup_pkts_recv optional uint64 = 15
     *
     * @var int
     */
    protected $dup_pkts_recv = null;

    /**
     * failed_connect_challenges optional uint64 = 16
     *
     * @var int
     */
    protected $failed_connect_challenges = null;

    /**
     * micro_sec_avg_latency optional uint32 = 17
     *
     * @var int
     */
    protected $micro_sec_avg_latency = null;

    /**
     * micro_sec_min_latency optional uint32 = 18
     *
     * @var int
     */
    protected $micro_sec_min_latency = null;

    /**
     * micro_sec_max_latency optional uint32 = 19
     *
     * @var int
     */
    protected $micro_sec_max_latency = null;

    /**
     * mem_pool_msg_in_use optional uint32 = 20
     *
     * @var int
     */
    protected $mem_pool_msg_in_use = null;

    /**
     * Check if 'connections_udp' has a value
     *
     * @return bool
     */
    public function hasConnectionsUdp()
    {
        return $this->connections_udp !== null;
    }

    /**
     * Get 'connections_udp' value
     *
     * @return int
     */
    public function getConnectionsUdp()
    {
        return $this->connections_udp;
    }

    /**
     * Set 'connections_udp' value
     *
     * @param int $value
     */
    public function setConnectionsUdp($value = null)
    {
        $this->connections_udp = $value;
    }

    /**
     * Check if 'connections_tcp' has a value
     *
     * @return bool
     */
    public function hasConnectionsTcp()
    {
        return $this->connections_tcp !== null;
    }

    /**
     * Get 'connections_tcp' value
     *
     * @return int
     */
    public function getConnectionsTcp()
    {
        return $this->connections_tcp;
    }

    /**
     * Set 'connections_tcp' value
     *
     * @param int $value
     */
    public function setConnectionsTcp($value = null)
    {
        $this->connections_tcp = $value;
    }

    /**
     * Check if 'stats_udp' has a value
     *
     * @return bool
     */
    public function hasStatsUdp()
    {
        return $this->stats_udp !== null;
    }

    /**
     * Get 'stats_udp' value
     *
     * @return \SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats\Stats_UDP
     */
    public function getStatsUdp()
    {
        return $this->stats_udp;
    }

    /**
     * Set 'stats_udp' value
     *
     * @param \SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats\Stats_UDP $value
     */
    public function setStatsUdp(\SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats\Stats_UDP $value = null)
    {
        $this->stats_udp = $value;
    }

    /**
     * Check if 'pkts_abandoned' has a value
     *
     * @return bool
     */
    public function hasPktsAbandoned()
    {
        return $this->pkts_abandoned !== null;
    }

    /**
     * Get 'pkts_abandoned' value
     *
     * @return int
     */
    public function getPktsAbandoned()
    {
        return $this->pkts_abandoned;
    }

    /**
     * Set 'pkts_abandoned' value
     *
     * @param int $value
     */
    public function setPktsAbandoned($value = null)
    {
        $this->pkts_abandoned = $value;
    }

    /**
     * Check if 'conn_req_received' has a value
     *
     * @return bool
     */
    public function hasConnReqReceived()
    {
        return $this->conn_req_received !== null;
    }

    /**
     * Get 'conn_req_received' value
     *
     * @return int
     */
    public function getConnReqReceived()
    {
        return $this->conn_req_received;
    }

    /**
     * Set 'conn_req_received' value
     *
     * @param int $value
     */
    public function setConnReqReceived($value = null)
    {
        $this->conn_req_received = $value;
    }

    /**
     * Check if 'pkts_resent' has a value
     *
     * @return bool
     */
    public function hasPktsResent()
    {
        return $this->pkts_resent !== null;
    }

    /**
     * Get 'pkts_resent' value
     *
     * @return int
     */
    public function getPktsResent()
    {
        return $this->pkts_resent;
    }

    /**
     * Set 'pkts_resent' value
     *
     * @param int $value
     */
    public function setPktsResent($value = null)
    {
        $this->pkts_resent = $value;
    }

    /**
     * Check if 'msgs_sent' has a value
     *
     * @return bool
     */
    public function hasMsgsSent()
    {
        return $this->msgs_sent !== null;
    }

    /**
     * Get 'msgs_sent' value
     *
     * @return int
     */
    public function getMsgsSent()
    {
        return $this->msgs_sent;
    }

    /**
     * Set 'msgs_sent' value
     *
     * @param int $value
     */
    public function setMsgsSent($value = null)
    {
        $this->msgs_sent = $value;
    }

    /**
     * Check if 'msgs_sent_failed' has a value
     *
     * @return bool
     */
    public function hasMsgsSentFailed()
    {
        return $this->msgs_sent_failed !== null;
    }

    /**
     * Get 'msgs_sent_failed' value
     *
     * @return int
     */
    public function getMsgsSentFailed()
    {
        return $this->msgs_sent_failed;
    }

    /**
     * Set 'msgs_sent_failed' value
     *
     * @param int $value
     */
    public function setMsgsSentFailed($value = null)
    {
        $this->msgs_sent_failed = $value;
    }

    /**
     * Check if 'msgs_recv' has a value
     *
     * @return bool
     */
    public function hasMsgsRecv()
    {
        return $this->msgs_recv !== null;
    }

    /**
     * Get 'msgs_recv' value
     *
     * @return int
     */
    public function getMsgsRecv()
    {
        return $this->msgs_recv;
    }

    /**
     * Set 'msgs_recv' value
     *
     * @param int $value
     */
    public function setMsgsRecv($value = null)
    {
        $this->msgs_recv = $value;
    }

    /**
     * Check if 'datagrams_sent' has a value
     *
     * @return bool
     */
    public function hasDatagramsSent()
    {
        return $this->datagrams_sent !== null;
    }

    /**
     * Get 'datagrams_sent' value
     *
     * @return int
     */
    public function getDatagramsSent()
    {
        return $this->datagrams_sent;
    }

    /**
     * Set 'datagrams_sent' value
     *
     * @param int $value
     */
    public function setDatagramsSent($value = null)
    {
        $this->datagrams_sent = $value;
    }

    /**
     * Check if 'datagrams_recv' has a value
     *
     * @return bool
     */
    public function hasDatagramsRecv()
    {
        return $this->datagrams_recv !== null;
    }

    /**
     * Get 'datagrams_recv' value
     *
     * @return int
     */
    public function getDatagramsRecv()
    {
        return $this->datagrams_recv;
    }

    /**
     * Set 'datagrams_recv' value
     *
     * @param int $value
     */
    public function setDatagramsRecv($value = null)
    {
        $this->datagrams_recv = $value;
    }

    /**
     * Check if 'bad_pkts_recv' has a value
     *
     * @return bool
     */
    public function hasBadPktsRecv()
    {
        return $this->bad_pkts_recv !== null;
    }

    /**
     * Get 'bad_pkts_recv' value
     *
     * @return int
     */
    public function getBadPktsRecv()
    {
        return $this->bad_pkts_recv;
    }

    /**
     * Set 'bad_pkts_recv' value
     *
     * @param int $value
     */
    public function setBadPktsRecv($value = null)
    {
        $this->bad_pkts_recv = $value;
    }

    /**
     * Check if 'unknown_conn_pkts_recv' has a value
     *
     * @return bool
     */
    public function hasUnknownConnPktsRecv()
    {
        return $this->unknown_conn_pkts_recv !== null;
    }

    /**
     * Get 'unknown_conn_pkts_recv' value
     *
     * @return int
     */
    public function getUnknownConnPktsRecv()
    {
        return $this->unknown_conn_pkts_recv;
    }

    /**
     * Set 'unknown_conn_pkts_recv' value
     *
     * @param int $value
     */
    public function setUnknownConnPktsRecv($value = null)
    {
        $this->unknown_conn_pkts_recv = $value;
    }

    /**
     * Check if 'missed_pkts_recv' has a value
     *
     * @return bool
     */
    public function hasMissedPktsRecv()
    {
        return $this->missed_pkts_recv !== null;
    }

    /**
     * Get 'missed_pkts_recv' value
     *
     * @return int
     */
    public function getMissedPktsRecv()
    {
        return $this->missed_pkts_recv;
    }

    /**
     * Set 'missed_pkts_recv' value
     *
     * @param int $value
     */
    public function setMissedPktsRecv($value = null)
    {
        $this->missed_pkts_recv = $value;
    }

    /**
     * Check if 'dup_pkts_recv' has a value
     *
     * @return bool
     */
    public function hasDupPktsRecv()
    {
        return $this->dup_pkts_recv !== null;
    }

    /**
     * Get 'dup_pkts_recv' value
     *
     * @return int
     */
    public function getDupPktsRecv()
    {
        return $this->dup_pkts_recv;
    }

    /**
     * Set 'dup_pkts_recv' value
     *
     * @param int $value
     */
    public function setDupPktsRecv($value = null)
    {
        $this->dup_pkts_recv = $value;
    }

    /**
     * Check if 'failed_connect_challenges' has a value
     *
     * @return bool
     */
    public function hasFailedConnectChallenges()
    {
        return $this->failed_connect_challenges !== null;
    }

    /**
     * Get 'failed_connect_challenges' value
     *
     * @return int
     */
    public function getFailedConnectChallenges()
    {
        return $this->failed_connect_challenges;
    }

    /**
     * Set 'failed_connect_challenges' value
     *
     * @param int $value
     */
    public function setFailedConnectChallenges($value = null)
    {
        $this->failed_connect_challenges = $value;
    }

    /**
     * Check if 'micro_sec_avg_latency' has a value
     *
     * @return bool
     */
    public function hasMicroSecAvgLatency()
    {
        return $this->micro_sec_avg_latency !== null;
    }

    /**
     * Get 'micro_sec_avg_latency' value
     *
     * @return int
     */
    public function getMicroSecAvgLatency()
    {
        return $this->micro_sec_avg_latency;
    }

    /**
     * Set 'micro_sec_avg_latency' value
     *
     * @param int $value
     */
    public function setMicroSecAvgLatency($value = null)
    {
        $this->micro_sec_avg_latency = $value;
    }

    /**
     * Check if 'micro_sec_min_latency' has a value
     *
     * @return bool
     */
    public function hasMicroSecMinLatency()
    {
        return $this->micro_sec_min_latency !== null;
    }

    /**
     * Get 'micro_sec_min_latency' value
     *
     * @return int
     */
    public function getMicroSecMinLatency()
    {
        return $this->micro_sec_min_latency;
    }

    /**
     * Set 'micro_sec_min_latency' value
     *
     * @param int $value
     */
    public function setMicroSecMinLatency($value = null)
    {
        $this->micro_sec_min_latency = $value;
    }

    /**
     * Check if 'micro_sec_max_latency' has a value
     *
     * @return bool
     */
    public function hasMicroSecMaxLatency()
    {
        return $this->micro_sec_max_latency !== null;
    }

    /**
     * Get 'micro_sec_max_latency' value
     *
     * @return int
     */
    public function getMicroSecMaxLatency()
    {
        return $this->micro_sec_max_latency;
    }

    /**
     * Set 'micro_sec_max_latency' value
     *
     * @param int $value
     */
    public function setMicroSecMaxLatency($value = null)
    {
        $this->micro_sec_max_latency = $value;
    }

    /**
     * Check if 'mem_pool_msg_in_use' has a value
     *
     * @return bool
     */
    public function hasMemPoolMsgInUse()
    {
        return $this->mem_pool_msg_in_use !== null;
    }

    /**
     * Get 'mem_pool_msg_in_use' value
     *
     * @return int
     */
    public function getMemPoolMsgInUse()
    {
        return $this->mem_pool_msg_in_use;
    }

    /**
     * Set 'mem_pool_msg_in_use' value
     *
     * @param int $value
     */
    public function setMemPoolMsgInUse($value = null)
    {
        $this->mem_pool_msg_in_use = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'connections_udp' => null,
            'connections_tcp' => null,
            'stats_udp' => null,
            'pkts_abandoned' => null,
            'conn_req_received' => null,
            'pkts_resent' => null,
            'msgs_sent' => null,
            'msgs_sent_failed' => null,
            'msgs_recv' => null,
            'datagrams_sent' => null,
            'datagrams_recv' => null,
            'bad_pkts_recv' => null,
            'unknown_conn_pkts_recv' => null,
            'missed_pkts_recv' => null,
            'dup_pkts_recv' => null,
            'failed_connect_challenges' => null,
            'micro_sec_avg_latency' => null,
            'micro_sec_min_latency' => null,
            'micro_sec_max_latency' => null,
            'mem_pool_msg_in_use' => null
        ], $values);

        $message->setConnectionsUdp($values['connections_udp']);
        $message->setConnectionsTcp($values['connections_tcp']);
        $message->setStatsUdp($values['stats_udp']);
        $message->setPktsAbandoned($values['pkts_abandoned']);
        $message->setConnReqReceived($values['conn_req_received']);
        $message->setPktsResent($values['pkts_resent']);
        $message->setMsgsSent($values['msgs_sent']);
        $message->setMsgsSentFailed($values['msgs_sent_failed']);
        $message->setMsgsRecv($values['msgs_recv']);
        $message->setDatagramsSent($values['datagrams_sent']);
        $message->setDatagramsRecv($values['datagrams_recv']);
        $message->setBadPktsRecv($values['bad_pkts_recv']);
        $message->setUnknownConnPktsRecv($values['unknown_conn_pkts_recv']);
        $message->setMissedPktsRecv($values['missed_pkts_recv']);
        $message->setDupPktsRecv($values['dup_pkts_recv']);
        $message->setFailedConnectChallenges($values['failed_connect_challenges']);
        $message->setMicroSecAvgLatency($values['micro_sec_avg_latency']);
        $message->setMicroSecMinLatency($values['micro_sec_min_latency']);
        $message->setMicroSecMaxLatency($values['micro_sec_max_latency']);
        $message->setMemPoolMsgInUse($values['mem_pool_msg_in_use']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Stats_VConn',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'connections_udp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'connections_tcp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'stats_udp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.SteamMsgClientServer.CMsgClientConnectionStats.Stats_UDP'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'pkts_abandoned',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'conn_req_received',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'pkts_resent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'msgs_sent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'msgs_sent_failed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'msgs_recv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'datagrams_sent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'datagrams_recv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'bad_pkts_recv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'unknown_conn_pkts_recv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'missed_pkts_recv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'dup_pkts_recv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'failed_connect_challenges',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'micro_sec_avg_latency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'micro_sec_min_latency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'micro_sec_max_latency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'mem_pool_msg_in_use',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->connections_udp !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->connections_udp);
        }

        if ($this->connections_tcp !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->connections_tcp);
        }

        if ($this->stats_udp !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->stats_udp->serializedSize($sizeContext));
            $this->stats_udp->writeTo($context);
        }

        if ($this->pkts_abandoned !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->pkts_abandoned);
        }

        if ($this->conn_req_received !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->conn_req_received);
        }

        if ($this->pkts_resent !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->pkts_resent);
        }

        if ($this->msgs_sent !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->msgs_sent);
        }

        if ($this->msgs_sent_failed !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->msgs_sent_failed);
        }

        if ($this->msgs_recv !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->msgs_recv);
        }

        if ($this->datagrams_sent !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->datagrams_sent);
        }

        if ($this->datagrams_recv !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->datagrams_recv);
        }

        if ($this->bad_pkts_recv !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->bad_pkts_recv);
        }

        if ($this->unknown_conn_pkts_recv !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->unknown_conn_pkts_recv);
        }

        if ($this->missed_pkts_recv !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->missed_pkts_recv);
        }

        if ($this->dup_pkts_recv !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->dup_pkts_recv);
        }

        if ($this->failed_connect_challenges !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->failed_connect_challenges);
        }

        if ($this->micro_sec_avg_latency !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->micro_sec_avg_latency);
        }

        if ($this->micro_sec_min_latency !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeVarint($stream, $this->micro_sec_min_latency);
        }

        if ($this->micro_sec_max_latency !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->micro_sec_max_latency);
        }

        if ($this->mem_pool_msg_in_use !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->mem_pool_msg_in_use);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->connections_udp = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->connections_tcp = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats\Stats_UDP();

                $this->stats_udp = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->pkts_abandoned = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->conn_req_received = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->pkts_resent = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->msgs_sent = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->msgs_sent_failed = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->msgs_recv = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->datagrams_sent = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->datagrams_recv = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->bad_pkts_recv = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->unknown_conn_pkts_recv = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->missed_pkts_recv = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->dup_pkts_recv = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->failed_connect_challenges = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->micro_sec_avg_latency = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->micro_sec_min_latency = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->micro_sec_max_latency = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->mem_pool_msg_in_use = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->connections_udp !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->connections_udp);
        }

        if ($this->connections_tcp !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->connections_tcp);
        }

        if ($this->stats_udp !== null) {
            $innerSize = $this->stats_udp->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->pkts_abandoned !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pkts_abandoned);
        }

        if ($this->conn_req_received !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->conn_req_received);
        }

        if ($this->pkts_resent !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pkts_resent);
        }

        if ($this->msgs_sent !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->msgs_sent);
        }

        if ($this->msgs_sent_failed !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->msgs_sent_failed);
        }

        if ($this->msgs_recv !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->msgs_recv);
        }

        if ($this->datagrams_sent !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->datagrams_sent);
        }

        if ($this->datagrams_recv !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->datagrams_recv);
        }

        if ($this->bad_pkts_recv !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bad_pkts_recv);
        }

        if ($this->unknown_conn_pkts_recv !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unknown_conn_pkts_recv);
        }

        if ($this->missed_pkts_recv !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->missed_pkts_recv);
        }

        if ($this->dup_pkts_recv !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->dup_pkts_recv);
        }

        if ($this->failed_connect_challenges !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->failed_connect_challenges);
        }

        if ($this->micro_sec_avg_latency !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->micro_sec_avg_latency);
        }

        if ($this->micro_sec_min_latency !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->micro_sec_min_latency);
        }

        if ($this->micro_sec_max_latency !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->micro_sec_max_latency);
        }

        if ($this->mem_pool_msg_in_use !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->mem_pool_msg_in_use);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->connections_udp = null;
        $this->connections_tcp = null;
        $this->stats_udp = null;
        $this->pkts_abandoned = null;
        $this->conn_req_received = null;
        $this->pkts_resent = null;
        $this->msgs_sent = null;
        $this->msgs_sent_failed = null;
        $this->msgs_recv = null;
        $this->datagrams_sent = null;
        $this->datagrams_recv = null;
        $this->bad_pkts_recv = null;
        $this->unknown_conn_pkts_recv = null;
        $this->missed_pkts_recv = null;
        $this->dup_pkts_recv = null;
        $this->failed_connect_challenges = null;
        $this->micro_sec_avg_latency = null;
        $this->micro_sec_min_latency = null;
        $this->micro_sec_max_latency = null;
        $this->mem_pool_msg_in_use = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientConnectionStats\Stats_VConn) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->connections_udp = ($message->connections_udp !== null) ? $message->connections_udp : $this->connections_udp;
        $this->connections_tcp = ($message->connections_tcp !== null) ? $message->connections_tcp : $this->connections_tcp;
        $this->stats_udp = ($message->stats_udp !== null) ? $message->stats_udp : $this->stats_udp;
        $this->pkts_abandoned = ($message->pkts_abandoned !== null) ? $message->pkts_abandoned : $this->pkts_abandoned;
        $this->conn_req_received = ($message->conn_req_received !== null) ? $message->conn_req_received : $this->conn_req_received;
        $this->pkts_resent = ($message->pkts_resent !== null) ? $message->pkts_resent : $this->pkts_resent;
        $this->msgs_sent = ($message->msgs_sent !== null) ? $message->msgs_sent : $this->msgs_sent;
        $this->msgs_sent_failed = ($message->msgs_sent_failed !== null) ? $message->msgs_sent_failed : $this->msgs_sent_failed;
        $this->msgs_recv = ($message->msgs_recv !== null) ? $message->msgs_recv : $this->msgs_recv;
        $this->datagrams_sent = ($message->datagrams_sent !== null) ? $message->datagrams_sent : $this->datagrams_sent;
        $this->datagrams_recv = ($message->datagrams_recv !== null) ? $message->datagrams_recv : $this->datagrams_recv;
        $this->bad_pkts_recv = ($message->bad_pkts_recv !== null) ? $message->bad_pkts_recv : $this->bad_pkts_recv;
        $this->unknown_conn_pkts_recv = ($message->unknown_conn_pkts_recv !== null) ? $message->unknown_conn_pkts_recv : $this->unknown_conn_pkts_recv;
        $this->missed_pkts_recv = ($message->missed_pkts_recv !== null) ? $message->missed_pkts_recv : $this->missed_pkts_recv;
        $this->dup_pkts_recv = ($message->dup_pkts_recv !== null) ? $message->dup_pkts_recv : $this->dup_pkts_recv;
        $this->failed_connect_challenges = ($message->failed_connect_challenges !== null) ? $message->failed_connect_challenges : $this->failed_connect_challenges;
        $this->micro_sec_avg_latency = ($message->micro_sec_avg_latency !== null) ? $message->micro_sec_avg_latency : $this->micro_sec_avg_latency;
        $this->micro_sec_min_latency = ($message->micro_sec_min_latency !== null) ? $message->micro_sec_min_latency : $this->micro_sec_min_latency;
        $this->micro_sec_max_latency = ($message->micro_sec_max_latency !== null) ? $message->micro_sec_max_latency : $this->micro_sec_max_latency;
        $this->mem_pool_msg_in_use = ($message->mem_pool_msg_in_use !== null) ? $message->mem_pool_msg_in_use : $this->mem_pool_msg_in_use;
    }


}

