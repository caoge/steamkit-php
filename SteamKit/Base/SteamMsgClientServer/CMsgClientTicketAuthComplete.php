<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer.CMsgClientTicketAuthComplete
 */
class CMsgClientTicketAuthComplete extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steam_id optional fixed64 = 1
     *
     * @var int
     */
    protected $steam_id = null;

    /**
     * game_id optional fixed64 = 2
     *
     * @var int
     */
    protected $game_id = null;

    /**
     * estate optional uint32 = 3
     *
     * @var int
     */
    protected $estate = null;

    /**
     * eauth_session_response optional uint32 = 4
     *
     * @var int
     */
    protected $eauth_session_response = null;

    /**
     * DEPRECATED_ticket optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $DEPRECATED_ticket = null;

    /**
     * ticket_crc optional uint32 = 6
     *
     * @var int
     */
    protected $ticket_crc = null;

    /**
     * ticket_sequence optional uint32 = 7
     *
     * @var int
     */
    protected $ticket_sequence = null;

    /**
     * owner_steam_id optional fixed64 = 8
     *
     * @var int
     */
    protected $owner_steam_id = null;

    /**
     * Check if 'steam_id' has a value
     *
     * @return bool
     */
    public function hasSteamId()
    {
        return $this->steam_id !== null;
    }

    /**
     * Get 'steam_id' value
     *
     * @return int
     */
    public function getSteamId()
    {
        return $this->steam_id;
    }

    /**
     * Set 'steam_id' value
     *
     * @param int $value
     */
    public function setSteamId($value = null)
    {
        $this->steam_id = $value;
    }

    /**
     * Check if 'game_id' has a value
     *
     * @return bool
     */
    public function hasGameId()
    {
        return $this->game_id !== null;
    }

    /**
     * Get 'game_id' value
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->game_id;
    }

    /**
     * Set 'game_id' value
     *
     * @param int $value
     */
    public function setGameId($value = null)
    {
        $this->game_id = $value;
    }

    /**
     * Check if 'estate' has a value
     *
     * @return bool
     */
    public function hasEstate()
    {
        return $this->estate !== null;
    }

    /**
     * Get 'estate' value
     *
     * @return int
     */
    public function getEstate()
    {
        return $this->estate;
    }

    /**
     * Set 'estate' value
     *
     * @param int $value
     */
    public function setEstate($value = null)
    {
        $this->estate = $value;
    }

    /**
     * Check if 'eauth_session_response' has a value
     *
     * @return bool
     */
    public function hasEauthSessionResponse()
    {
        return $this->eauth_session_response !== null;
    }

    /**
     * Get 'eauth_session_response' value
     *
     * @return int
     */
    public function getEauthSessionResponse()
    {
        return $this->eauth_session_response;
    }

    /**
     * Set 'eauth_session_response' value
     *
     * @param int $value
     */
    public function setEauthSessionResponse($value = null)
    {
        $this->eauth_session_response = $value;
    }

    /**
     * Check if 'DEPRECATED_ticket' has a value
     *
     * @return bool
     */
    public function hasDEPRECATEDTicket()
    {
        return $this->DEPRECATED_ticket !== null;
    }

    /**
     * Get 'DEPRECATED_ticket' value
     *
     * @return \Protobuf\Stream
     */
    public function getDEPRECATEDTicket()
    {
        return $this->DEPRECATED_ticket;
    }

    /**
     * Set 'DEPRECATED_ticket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setDEPRECATEDTicket($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->DEPRECATED_ticket = $value;
    }

    /**
     * Check if 'ticket_crc' has a value
     *
     * @return bool
     */
    public function hasTicketCrc()
    {
        return $this->ticket_crc !== null;
    }

    /**
     * Get 'ticket_crc' value
     *
     * @return int
     */
    public function getTicketCrc()
    {
        return $this->ticket_crc;
    }

    /**
     * Set 'ticket_crc' value
     *
     * @param int $value
     */
    public function setTicketCrc($value = null)
    {
        $this->ticket_crc = $value;
    }

    /**
     * Check if 'ticket_sequence' has a value
     *
     * @return bool
     */
    public function hasTicketSequence()
    {
        return $this->ticket_sequence !== null;
    }

    /**
     * Get 'ticket_sequence' value
     *
     * @return int
     */
    public function getTicketSequence()
    {
        return $this->ticket_sequence;
    }

    /**
     * Set 'ticket_sequence' value
     *
     * @param int $value
     */
    public function setTicketSequence($value = null)
    {
        $this->ticket_sequence = $value;
    }

    /**
     * Check if 'owner_steam_id' has a value
     *
     * @return bool
     */
    public function hasOwnerSteamId()
    {
        return $this->owner_steam_id !== null;
    }

    /**
     * Get 'owner_steam_id' value
     *
     * @return int
     */
    public function getOwnerSteamId()
    {
        return $this->owner_steam_id;
    }

    /**
     * Set 'owner_steam_id' value
     *
     * @param int $value
     */
    public function setOwnerSteamId($value = null)
    {
        $this->owner_steam_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steam_id' => null,
            'game_id' => null,
            'estate' => null,
            'eauth_session_response' => null,
            'DEPRECATED_ticket' => null,
            'ticket_crc' => null,
            'ticket_sequence' => null,
            'owner_steam_id' => null
        ], $values);

        $message->setSteamId($values['steam_id']);
        $message->setGameId($values['game_id']);
        $message->setEstate($values['estate']);
        $message->setEauthSessionResponse($values['eauth_session_response']);
        $message->setDEPRECATEDTicket($values['DEPRECATED_ticket']);
        $message->setTicketCrc($values['ticket_crc']);
        $message->setTicketSequence($values['ticket_sequence']);
        $message->setOwnerSteamId($values['owner_steam_id']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientTicketAuthComplete',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'game_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'estate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'eauth_session_response',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'DEPRECATED_ticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'ticket_crc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'ticket_sequence',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'owner_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steam_id !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->steam_id);
        }

        if ($this->game_id !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->game_id);
        }

        if ($this->estate !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->estate);
        }

        if ($this->eauth_session_response !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->eauth_session_response);
        }

        if ($this->DEPRECATED_ticket !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->DEPRECATED_ticket);
        }

        if ($this->ticket_crc !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->ticket_crc);
        }

        if ($this->ticket_sequence !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->ticket_sequence);
        }

        if ($this->owner_steam_id !== null) {
            $writer->writeVarint($stream, 65);
            $writer->writeFixed64($stream, $this->owner_steam_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->game_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->estate = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->eauth_session_response = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->DEPRECATED_ticket = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ticket_crc = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ticket_sequence = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->owner_steam_id = $reader->readFixed64($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->game_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->estate !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->estate);
        }

        if ($this->eauth_session_response !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eauth_session_response);
        }

        if ($this->DEPRECATED_ticket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->DEPRECATED_ticket);
        }

        if ($this->ticket_crc !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ticket_crc);
        }

        if ($this->ticket_sequence !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ticket_sequence);
        }

        if ($this->owner_steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steam_id = null;
        $this->game_id = null;
        $this->estate = null;
        $this->eauth_session_response = null;
        $this->DEPRECATED_ticket = null;
        $this->ticket_crc = null;
        $this->ticket_sequence = null;
        $this->owner_steam_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientTicketAuthComplete) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steam_id = ($message->steam_id !== null) ? $message->steam_id : $this->steam_id;
        $this->game_id = ($message->game_id !== null) ? $message->game_id : $this->game_id;
        $this->estate = ($message->estate !== null) ? $message->estate : $this->estate;
        $this->eauth_session_response = ($message->eauth_session_response !== null) ? $message->eauth_session_response : $this->eauth_session_response;
        $this->DEPRECATED_ticket = ($message->DEPRECATED_ticket !== null) ? $message->DEPRECATED_ticket : $this->DEPRECATED_ticket;
        $this->ticket_crc = ($message->ticket_crc !== null) ? $message->ticket_crc : $this->ticket_crc;
        $this->ticket_sequence = ($message->ticket_sequence !== null) ? $message->ticket_sequence : $this->ticket_sequence;
        $this->owner_steam_id = ($message->owner_steam_id !== null) ? $message->owner_steam_id : $this->owner_steam_id;
    }


}

