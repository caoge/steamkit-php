<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver.proto
 */


namespace SteamKit\Base\SteamMsgClientServer;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer.CMsgClientChatInvite
 */
class CMsgClientChatInvite extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steam_id_invited optional fixed64 = 1
     *
     * @var int
     */
    protected $steam_id_invited = null;

    /**
     * steam_id_chat optional fixed64 = 2
     *
     * @var int
     */
    protected $steam_id_chat = null;

    /**
     * steam_id_patron optional fixed64 = 3
     *
     * @var int
     */
    protected $steam_id_patron = null;

    /**
     * chatroom_type optional int32 = 4
     *
     * @var int
     */
    protected $chatroom_type = null;

    /**
     * steam_id_friend_chat optional fixed64 = 5
     *
     * @var int
     */
    protected $steam_id_friend_chat = null;

    /**
     * chat_name optional string = 6
     *
     * @var string
     */
    protected $chat_name = null;

    /**
     * game_id optional fixed64 = 7
     *
     * @var int
     */
    protected $game_id = null;

    /**
     * Check if 'steam_id_invited' has a value
     *
     * @return bool
     */
    public function hasSteamIdInvited()
    {
        return $this->steam_id_invited !== null;
    }

    /**
     * Get 'steam_id_invited' value
     *
     * @return int
     */
    public function getSteamIdInvited()
    {
        return $this->steam_id_invited;
    }

    /**
     * Set 'steam_id_invited' value
     *
     * @param int $value
     */
    public function setSteamIdInvited($value = null)
    {
        $this->steam_id_invited = $value;
    }

    /**
     * Check if 'steam_id_chat' has a value
     *
     * @return bool
     */
    public function hasSteamIdChat()
    {
        return $this->steam_id_chat !== null;
    }

    /**
     * Get 'steam_id_chat' value
     *
     * @return int
     */
    public function getSteamIdChat()
    {
        return $this->steam_id_chat;
    }

    /**
     * Set 'steam_id_chat' value
     *
     * @param int $value
     */
    public function setSteamIdChat($value = null)
    {
        $this->steam_id_chat = $value;
    }

    /**
     * Check if 'steam_id_patron' has a value
     *
     * @return bool
     */
    public function hasSteamIdPatron()
    {
        return $this->steam_id_patron !== null;
    }

    /**
     * Get 'steam_id_patron' value
     *
     * @return int
     */
    public function getSteamIdPatron()
    {
        return $this->steam_id_patron;
    }

    /**
     * Set 'steam_id_patron' value
     *
     * @param int $value
     */
    public function setSteamIdPatron($value = null)
    {
        $this->steam_id_patron = $value;
    }

    /**
     * Check if 'chatroom_type' has a value
     *
     * @return bool
     */
    public function hasChatroomType()
    {
        return $this->chatroom_type !== null;
    }

    /**
     * Get 'chatroom_type' value
     *
     * @return int
     */
    public function getChatroomType()
    {
        return $this->chatroom_type;
    }

    /**
     * Set 'chatroom_type' value
     *
     * @param int $value
     */
    public function setChatroomType($value = null)
    {
        $this->chatroom_type = $value;
    }

    /**
     * Check if 'steam_id_friend_chat' has a value
     *
     * @return bool
     */
    public function hasSteamIdFriendChat()
    {
        return $this->steam_id_friend_chat !== null;
    }

    /**
     * Get 'steam_id_friend_chat' value
     *
     * @return int
     */
    public function getSteamIdFriendChat()
    {
        return $this->steam_id_friend_chat;
    }

    /**
     * Set 'steam_id_friend_chat' value
     *
     * @param int $value
     */
    public function setSteamIdFriendChat($value = null)
    {
        $this->steam_id_friend_chat = $value;
    }

    /**
     * Check if 'chat_name' has a value
     *
     * @return bool
     */
    public function hasChatName()
    {
        return $this->chat_name !== null;
    }

    /**
     * Get 'chat_name' value
     *
     * @return string
     */
    public function getChatName()
    {
        return $this->chat_name;
    }

    /**
     * Set 'chat_name' value
     *
     * @param string $value
     */
    public function setChatName($value = null)
    {
        $this->chat_name = $value;
    }

    /**
     * Check if 'game_id' has a value
     *
     * @return bool
     */
    public function hasGameId()
    {
        return $this->game_id !== null;
    }

    /**
     * Get 'game_id' value
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->game_id;
    }

    /**
     * Set 'game_id' value
     *
     * @param int $value
     */
    public function setGameId($value = null)
    {
        $this->game_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steam_id_invited' => null,
            'steam_id_chat' => null,
            'steam_id_patron' => null,
            'chatroom_type' => null,
            'steam_id_friend_chat' => null,
            'chat_name' => null,
            'game_id' => null
        ], $values);

        $message->setSteamIdInvited($values['steam_id_invited']);
        $message->setSteamIdChat($values['steam_id_chat']);
        $message->setSteamIdPatron($values['steam_id_patron']);
        $message->setChatroomType($values['chatroom_type']);
        $message->setSteamIdFriendChat($values['steam_id_friend_chat']);
        $message->setChatName($values['chat_name']);
        $message->setGameId($values['game_id']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientChatInvite',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steam_id_invited',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'steam_id_chat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'steam_id_patron',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'chatroom_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'steam_id_friend_chat',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'chat_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'game_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steam_id_invited !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->steam_id_invited);
        }

        if ($this->steam_id_chat !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->steam_id_chat);
        }

        if ($this->steam_id_patron !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeFixed64($stream, $this->steam_id_patron);
        }

        if ($this->chatroom_type !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->chatroom_type);
        }

        if ($this->steam_id_friend_chat !== null) {
            $writer->writeVarint($stream, 41);
            $writer->writeFixed64($stream, $this->steam_id_friend_chat);
        }

        if ($this->chat_name !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->chat_name);
        }

        if ($this->game_id !== null) {
            $writer->writeVarint($stream, 57);
            $writer->writeFixed64($stream, $this->game_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steam_id_invited = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steam_id_chat = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steam_id_patron = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->chatroom_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steam_id_friend_chat = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->chat_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->game_id = $reader->readFixed64($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steam_id_invited !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->steam_id_chat !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->steam_id_patron !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->chatroom_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->chatroom_type);
        }

        if ($this->steam_id_friend_chat !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->chat_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->chat_name);
        }

        if ($this->game_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steam_id_invited = null;
        $this->steam_id_chat = null;
        $this->steam_id_patron = null;
        $this->chatroom_type = null;
        $this->steam_id_friend_chat = null;
        $this->chat_name = null;
        $this->game_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer\CMsgClientChatInvite) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steam_id_invited = ($message->steam_id_invited !== null) ? $message->steam_id_invited : $this->steam_id_invited;
        $this->steam_id_chat = ($message->steam_id_chat !== null) ? $message->steam_id_chat : $this->steam_id_chat;
        $this->steam_id_patron = ($message->steam_id_patron !== null) ? $message->steam_id_patron : $this->steam_id_patron;
        $this->chatroom_type = ($message->chatroom_type !== null) ? $message->chatroom_type : $this->chatroom_type;
        $this->steam_id_friend_chat = ($message->steam_id_friend_chat !== null) ? $message->steam_id_friend_chat : $this->steam_id_friend_chat;
        $this->chat_name = ($message->chat_name !== null) ? $message->chat_name : $this->chat_name;
        $this->game_id = ($message->game_id !== null) ? $message->game_id : $this->game_id;
    }


}

