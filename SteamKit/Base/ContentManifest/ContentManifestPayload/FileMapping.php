<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/content_manifest.proto
 */


namespace SteamKit\Base\ContentManifest\ContentManifestPayload;

/**
 * Protobuf message :
 * SteamKit.Base.ContentManifest.ContentManifestPayload.FileMapping
 */
class FileMapping extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * filename optional string = 1
     *
     * @var string
     */
    protected $filename = null;

    /**
     * size optional uint64 = 2
     *
     * @var int
     */
    protected $size = null;

    /**
     * flags optional uint32 = 3
     *
     * @var int
     */
    protected $flags = null;

    /**
     * sha_filename optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $sha_filename = null;

    /**
     * sha_content optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $sha_content = null;

    /**
     * chunks repeated message = 6
     *
     * @var \Protobuf\Collection<\SteamKit\Base\ContentManifest\ContentManifestPayload\FileMapping\ChunkData>
     */
    protected $chunks = null;

    /**
     * linktarget optional string = 7
     *
     * @var string
     */
    protected $linktarget = null;

    /**
     * Check if 'filename' has a value
     *
     * @return bool
     */
    public function hasFilename()
    {
        return $this->filename !== null;
    }

    /**
     * Get 'filename' value
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * Set 'filename' value
     *
     * @param string $value
     */
    public function setFilename($value = null)
    {
        $this->filename = $value;
    }

    /**
     * Check if 'size' has a value
     *
     * @return bool
     */
    public function hasSize()
    {
        return $this->size !== null;
    }

    /**
     * Get 'size' value
     *
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * Set 'size' value
     *
     * @param int $value
     */
    public function setSize($value = null)
    {
        $this->size = $value;
    }

    /**
     * Check if 'flags' has a value
     *
     * @return bool
     */
    public function hasFlags()
    {
        return $this->flags !== null;
    }

    /**
     * Get 'flags' value
     *
     * @return int
     */
    public function getFlags()
    {
        return $this->flags;
    }

    /**
     * Set 'flags' value
     *
     * @param int $value
     */
    public function setFlags($value = null)
    {
        $this->flags = $value;
    }

    /**
     * Check if 'sha_filename' has a value
     *
     * @return bool
     */
    public function hasShaFilename()
    {
        return $this->sha_filename !== null;
    }

    /**
     * Get 'sha_filename' value
     *
     * @return \Protobuf\Stream
     */
    public function getShaFilename()
    {
        return $this->sha_filename;
    }

    /**
     * Set 'sha_filename' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setShaFilename($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->sha_filename = $value;
    }

    /**
     * Check if 'sha_content' has a value
     *
     * @return bool
     */
    public function hasShaContent()
    {
        return $this->sha_content !== null;
    }

    /**
     * Get 'sha_content' value
     *
     * @return \Protobuf\Stream
     */
    public function getShaContent()
    {
        return $this->sha_content;
    }

    /**
     * Set 'sha_content' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setShaContent($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->sha_content = $value;
    }

    /**
     * Check if 'chunks' has a value
     *
     * @return bool
     */
    public function hasChunksList()
    {
        return $this->chunks !== null;
    }

    /**
     * Get 'chunks' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\ContentManifest\ContentManifestPayload\FileMapping\ChunkData>
     */
    public function getChunksList()
    {
        return $this->chunks;
    }

    /**
     * Set 'chunks' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\ContentManifest\ContentManifestPayload\FileMapping\ChunkData> $value
     */
    public function setChunksList(\Protobuf\Collection $value = null)
    {
        $this->chunks = $value;
    }

    /**
     * Add a new element to 'chunks'
     *
     * @param
     * \SteamKit\Base\ContentManifest\ContentManifestPayload\FileMapping\ChunkData
     * $value
     */
    public function addChunks(\SteamKit\Base\ContentManifest\ContentManifestPayload\FileMapping\ChunkData $value)
    {
        if ($this->chunks === null) {
            $this->chunks = new \Protobuf\MessageCollection();
        }

        $this->chunks->add($value);
    }

    /**
     * Check if 'linktarget' has a value
     *
     * @return bool
     */
    public function hasLinktarget()
    {
        return $this->linktarget !== null;
    }

    /**
     * Get 'linktarget' value
     *
     * @return string
     */
    public function getLinktarget()
    {
        return $this->linktarget;
    }

    /**
     * Set 'linktarget' value
     *
     * @param string $value
     */
    public function setLinktarget($value = null)
    {
        $this->linktarget = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'filename' => null,
            'size' => null,
            'flags' => null,
            'sha_filename' => null,
            'sha_content' => null,
            'chunks' => [],
            'linktarget' => null
        ], $values);

        $message->setFilename($values['filename']);
        $message->setSize($values['size']);
        $message->setFlags($values['flags']);
        $message->setShaFilename($values['sha_filename']);
        $message->setShaContent($values['sha_content']);
        $message->setLinktarget($values['linktarget']);

        foreach ($values['chunks'] as $item) {
            $message->addChunks($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'FileMapping',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'filename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'size',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'sha_filename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'sha_content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'chunks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.ContentManifest.ContentManifestPayload.FileMapping.ChunkData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'linktarget',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->filename !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->filename);
        }

        if ($this->size !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->size);
        }

        if ($this->flags !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->flags);
        }

        if ($this->sha_filename !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->sha_filename);
        }

        if ($this->sha_content !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->sha_content);
        }

        if ($this->chunks !== null) {
            foreach ($this->chunks as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->linktarget !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->linktarget);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->filename = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->sha_filename = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->sha_content = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\ContentManifest\ContentManifestPayload\FileMapping\ChunkData();

                if ($this->chunks === null) {
                    $this->chunks = new \Protobuf\MessageCollection();
                }

                $this->chunks->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->linktarget = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->filename !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->filename);
        }

        if ($this->size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->size);
        }

        if ($this->flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->flags);
        }

        if ($this->sha_filename !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->sha_filename);
        }

        if ($this->sha_content !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->sha_content);
        }

        if ($this->chunks !== null) {
            foreach ($this->chunks as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->linktarget !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->linktarget);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->filename = null;
        $this->size = null;
        $this->flags = null;
        $this->sha_filename = null;
        $this->sha_content = null;
        $this->chunks = null;
        $this->linktarget = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\ContentManifest\ContentManifestPayload\FileMapping) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->filename = ($message->filename !== null) ? $message->filename : $this->filename;
        $this->size = ($message->size !== null) ? $message->size : $this->size;
        $this->flags = ($message->flags !== null) ? $message->flags : $this->flags;
        $this->sha_filename = ($message->sha_filename !== null) ? $message->sha_filename : $this->sha_filename;
        $this->sha_content = ($message->sha_content !== null) ? $message->sha_content : $this->sha_content;
        $this->chunks = ($message->chunks !== null) ? $message->chunks : $this->chunks;
        $this->linktarget = ($message->linktarget !== null) ? $message->linktarget : $this->linktarget;
    }


}

