<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/content_manifest.proto
 */


namespace SteamKit\Base\ContentManifest;

/**
 * Protobuf message : SteamKit.Base.ContentManifest.ContentManifestMetadata
 */
class ContentManifestMetadata extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * depot_id optional uint32 = 1
     *
     * @var int
     */
    protected $depot_id = null;

    /**
     * gid_manifest optional uint64 = 2
     *
     * @var int
     */
    protected $gid_manifest = null;

    /**
     * creation_time optional uint32 = 3
     *
     * @var int
     */
    protected $creation_time = null;

    /**
     * filenames_encrypted optional bool = 4
     *
     * @var bool
     */
    protected $filenames_encrypted = null;

    /**
     * cb_disk_original optional uint64 = 5
     *
     * @var int
     */
    protected $cb_disk_original = null;

    /**
     * cb_disk_compressed optional uint64 = 6
     *
     * @var int
     */
    protected $cb_disk_compressed = null;

    /**
     * unique_chunks optional uint32 = 7
     *
     * @var int
     */
    protected $unique_chunks = null;

    /**
     * crc_encrypted optional uint32 = 8
     *
     * @var int
     */
    protected $crc_encrypted = null;

    /**
     * crc_clear optional uint32 = 9
     *
     * @var int
     */
    protected $crc_clear = null;

    /**
     * Check if 'depot_id' has a value
     *
     * @return bool
     */
    public function hasDepotId()
    {
        return $this->depot_id !== null;
    }

    /**
     * Get 'depot_id' value
     *
     * @return int
     */
    public function getDepotId()
    {
        return $this->depot_id;
    }

    /**
     * Set 'depot_id' value
     *
     * @param int $value
     */
    public function setDepotId($value = null)
    {
        $this->depot_id = $value;
    }

    /**
     * Check if 'gid_manifest' has a value
     *
     * @return bool
     */
    public function hasGidManifest()
    {
        return $this->gid_manifest !== null;
    }

    /**
     * Get 'gid_manifest' value
     *
     * @return int
     */
    public function getGidManifest()
    {
        return $this->gid_manifest;
    }

    /**
     * Set 'gid_manifest' value
     *
     * @param int $value
     */
    public function setGidManifest($value = null)
    {
        $this->gid_manifest = $value;
    }

    /**
     * Check if 'creation_time' has a value
     *
     * @return bool
     */
    public function hasCreationTime()
    {
        return $this->creation_time !== null;
    }

    /**
     * Get 'creation_time' value
     *
     * @return int
     */
    public function getCreationTime()
    {
        return $this->creation_time;
    }

    /**
     * Set 'creation_time' value
     *
     * @param int $value
     */
    public function setCreationTime($value = null)
    {
        $this->creation_time = $value;
    }

    /**
     * Check if 'filenames_encrypted' has a value
     *
     * @return bool
     */
    public function hasFilenamesEncrypted()
    {
        return $this->filenames_encrypted !== null;
    }

    /**
     * Get 'filenames_encrypted' value
     *
     * @return bool
     */
    public function getFilenamesEncrypted()
    {
        return $this->filenames_encrypted;
    }

    /**
     * Set 'filenames_encrypted' value
     *
     * @param bool $value
     */
    public function setFilenamesEncrypted($value = null)
    {
        $this->filenames_encrypted = $value;
    }

    /**
     * Check if 'cb_disk_original' has a value
     *
     * @return bool
     */
    public function hasCbDiskOriginal()
    {
        return $this->cb_disk_original !== null;
    }

    /**
     * Get 'cb_disk_original' value
     *
     * @return int
     */
    public function getCbDiskOriginal()
    {
        return $this->cb_disk_original;
    }

    /**
     * Set 'cb_disk_original' value
     *
     * @param int $value
     */
    public function setCbDiskOriginal($value = null)
    {
        $this->cb_disk_original = $value;
    }

    /**
     * Check if 'cb_disk_compressed' has a value
     *
     * @return bool
     */
    public function hasCbDiskCompressed()
    {
        return $this->cb_disk_compressed !== null;
    }

    /**
     * Get 'cb_disk_compressed' value
     *
     * @return int
     */
    public function getCbDiskCompressed()
    {
        return $this->cb_disk_compressed;
    }

    /**
     * Set 'cb_disk_compressed' value
     *
     * @param int $value
     */
    public function setCbDiskCompressed($value = null)
    {
        $this->cb_disk_compressed = $value;
    }

    /**
     * Check if 'unique_chunks' has a value
     *
     * @return bool
     */
    public function hasUniqueChunks()
    {
        return $this->unique_chunks !== null;
    }

    /**
     * Get 'unique_chunks' value
     *
     * @return int
     */
    public function getUniqueChunks()
    {
        return $this->unique_chunks;
    }

    /**
     * Set 'unique_chunks' value
     *
     * @param int $value
     */
    public function setUniqueChunks($value = null)
    {
        $this->unique_chunks = $value;
    }

    /**
     * Check if 'crc_encrypted' has a value
     *
     * @return bool
     */
    public function hasCrcEncrypted()
    {
        return $this->crc_encrypted !== null;
    }

    /**
     * Get 'crc_encrypted' value
     *
     * @return int
     */
    public function getCrcEncrypted()
    {
        return $this->crc_encrypted;
    }

    /**
     * Set 'crc_encrypted' value
     *
     * @param int $value
     */
    public function setCrcEncrypted($value = null)
    {
        $this->crc_encrypted = $value;
    }

    /**
     * Check if 'crc_clear' has a value
     *
     * @return bool
     */
    public function hasCrcClear()
    {
        return $this->crc_clear !== null;
    }

    /**
     * Get 'crc_clear' value
     *
     * @return int
     */
    public function getCrcClear()
    {
        return $this->crc_clear;
    }

    /**
     * Set 'crc_clear' value
     *
     * @param int $value
     */
    public function setCrcClear($value = null)
    {
        $this->crc_clear = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'depot_id' => null,
            'gid_manifest' => null,
            'creation_time' => null,
            'filenames_encrypted' => null,
            'cb_disk_original' => null,
            'cb_disk_compressed' => null,
            'unique_chunks' => null,
            'crc_encrypted' => null,
            'crc_clear' => null
        ], $values);

        $message->setDepotId($values['depot_id']);
        $message->setGidManifest($values['gid_manifest']);
        $message->setCreationTime($values['creation_time']);
        $message->setFilenamesEncrypted($values['filenames_encrypted']);
        $message->setCbDiskOriginal($values['cb_disk_original']);
        $message->setCbDiskCompressed($values['cb_disk_compressed']);
        $message->setUniqueChunks($values['unique_chunks']);
        $message->setCrcEncrypted($values['crc_encrypted']);
        $message->setCrcClear($values['crc_clear']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ContentManifestMetadata',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'depot_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'gid_manifest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'creation_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'filenames_encrypted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'cb_disk_original',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'cb_disk_compressed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'unique_chunks',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'crc_encrypted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'crc_clear',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->depot_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->depot_id);
        }

        if ($this->gid_manifest !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->gid_manifest);
        }

        if ($this->creation_time !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->creation_time);
        }

        if ($this->filenames_encrypted !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->filenames_encrypted);
        }

        if ($this->cb_disk_original !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->cb_disk_original);
        }

        if ($this->cb_disk_compressed !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->cb_disk_compressed);
        }

        if ($this->unique_chunks !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->unique_chunks);
        }

        if ($this->crc_encrypted !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->crc_encrypted);
        }

        if ($this->crc_clear !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->crc_clear);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->depot_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->gid_manifest = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->creation_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->filenames_encrypted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->cb_disk_original = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->cb_disk_compressed = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->unique_chunks = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->crc_encrypted = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->crc_clear = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->depot_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->depot_id);
        }

        if ($this->gid_manifest !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->gid_manifest);
        }

        if ($this->creation_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->creation_time);
        }

        if ($this->filenames_encrypted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->cb_disk_original !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cb_disk_original);
        }

        if ($this->cb_disk_compressed !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cb_disk_compressed);
        }

        if ($this->unique_chunks !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unique_chunks);
        }

        if ($this->crc_encrypted !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->crc_encrypted);
        }

        if ($this->crc_clear !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->crc_clear);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->depot_id = null;
        $this->gid_manifest = null;
        $this->creation_time = null;
        $this->filenames_encrypted = null;
        $this->cb_disk_original = null;
        $this->cb_disk_compressed = null;
        $this->unique_chunks = null;
        $this->crc_encrypted = null;
        $this->crc_clear = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\ContentManifest\ContentManifestMetadata) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->depot_id = ($message->depot_id !== null) ? $message->depot_id : $this->depot_id;
        $this->gid_manifest = ($message->gid_manifest !== null) ? $message->gid_manifest : $this->gid_manifest;
        $this->creation_time = ($message->creation_time !== null) ? $message->creation_time : $this->creation_time;
        $this->filenames_encrypted = ($message->filenames_encrypted !== null) ? $message->filenames_encrypted : $this->filenames_encrypted;
        $this->cb_disk_original = ($message->cb_disk_original !== null) ? $message->cb_disk_original : $this->cb_disk_original;
        $this->cb_disk_compressed = ($message->cb_disk_compressed !== null) ? $message->cb_disk_compressed : $this->cb_disk_compressed;
        $this->unique_chunks = ($message->unique_chunks !== null) ? $message->unique_chunks : $this->unique_chunks;
        $this->crc_encrypted = ($message->crc_encrypted !== null) ? $message->crc_encrypted : $this->crc_encrypted;
        $this->crc_clear = ($message->crc_clear !== null) ? $message->crc_clear : $this->crc_clear;
    }


}

