<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/encrypted_app_ticket.proto
 */


namespace SteamKit\Base\SteamMsgAppTicket;

/**
 * Protobuf message : SteamKit.Base.SteamMsgAppTicket.EncryptedAppTicket
 */
class EncryptedAppTicket extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * ticket_version_no optional uint32 = 1
     *
     * @var int
     */
    protected $ticket_version_no = null;

    /**
     * crc_encryptedticket optional uint32 = 2
     *
     * @var int
     */
    protected $crc_encryptedticket = null;

    /**
     * cb_encrypteduserdata optional uint32 = 3
     *
     * @var int
     */
    protected $cb_encrypteduserdata = null;

    /**
     * cb_encrypted_appownershipticket optional uint32 = 4
     *
     * @var int
     */
    protected $cb_encrypted_appownershipticket = null;

    /**
     * encrypted_ticket optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $encrypted_ticket = null;

    /**
     * Check if 'ticket_version_no' has a value
     *
     * @return bool
     */
    public function hasTicketVersionNo()
    {
        return $this->ticket_version_no !== null;
    }

    /**
     * Get 'ticket_version_no' value
     *
     * @return int
     */
    public function getTicketVersionNo()
    {
        return $this->ticket_version_no;
    }

    /**
     * Set 'ticket_version_no' value
     *
     * @param int $value
     */
    public function setTicketVersionNo($value = null)
    {
        $this->ticket_version_no = $value;
    }

    /**
     * Check if 'crc_encryptedticket' has a value
     *
     * @return bool
     */
    public function hasCrcEncryptedticket()
    {
        return $this->crc_encryptedticket !== null;
    }

    /**
     * Get 'crc_encryptedticket' value
     *
     * @return int
     */
    public function getCrcEncryptedticket()
    {
        return $this->crc_encryptedticket;
    }

    /**
     * Set 'crc_encryptedticket' value
     *
     * @param int $value
     */
    public function setCrcEncryptedticket($value = null)
    {
        $this->crc_encryptedticket = $value;
    }

    /**
     * Check if 'cb_encrypteduserdata' has a value
     *
     * @return bool
     */
    public function hasCbEncrypteduserdata()
    {
        return $this->cb_encrypteduserdata !== null;
    }

    /**
     * Get 'cb_encrypteduserdata' value
     *
     * @return int
     */
    public function getCbEncrypteduserdata()
    {
        return $this->cb_encrypteduserdata;
    }

    /**
     * Set 'cb_encrypteduserdata' value
     *
     * @param int $value
     */
    public function setCbEncrypteduserdata($value = null)
    {
        $this->cb_encrypteduserdata = $value;
    }

    /**
     * Check if 'cb_encrypted_appownershipticket' has a value
     *
     * @return bool
     */
    public function hasCbEncryptedAppownershipticket()
    {
        return $this->cb_encrypted_appownershipticket !== null;
    }

    /**
     * Get 'cb_encrypted_appownershipticket' value
     *
     * @return int
     */
    public function getCbEncryptedAppownershipticket()
    {
        return $this->cb_encrypted_appownershipticket;
    }

    /**
     * Set 'cb_encrypted_appownershipticket' value
     *
     * @param int $value
     */
    public function setCbEncryptedAppownershipticket($value = null)
    {
        $this->cb_encrypted_appownershipticket = $value;
    }

    /**
     * Check if 'encrypted_ticket' has a value
     *
     * @return bool
     */
    public function hasEncryptedTicket()
    {
        return $this->encrypted_ticket !== null;
    }

    /**
     * Get 'encrypted_ticket' value
     *
     * @return \Protobuf\Stream
     */
    public function getEncryptedTicket()
    {
        return $this->encrypted_ticket;
    }

    /**
     * Set 'encrypted_ticket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setEncryptedTicket($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->encrypted_ticket = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'ticket_version_no' => null,
            'crc_encryptedticket' => null,
            'cb_encrypteduserdata' => null,
            'cb_encrypted_appownershipticket' => null,
            'encrypted_ticket' => null
        ], $values);

        $message->setTicketVersionNo($values['ticket_version_no']);
        $message->setCrcEncryptedticket($values['crc_encryptedticket']);
        $message->setCbEncrypteduserdata($values['cb_encrypteduserdata']);
        $message->setCbEncryptedAppownershipticket($values['cb_encrypted_appownershipticket']);
        $message->setEncryptedTicket($values['encrypted_ticket']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'EncryptedAppTicket',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'ticket_version_no',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'crc_encryptedticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'cb_encrypteduserdata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'cb_encrypted_appownershipticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'encrypted_ticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->ticket_version_no !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->ticket_version_no);
        }

        if ($this->crc_encryptedticket !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->crc_encryptedticket);
        }

        if ($this->cb_encrypteduserdata !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->cb_encrypteduserdata);
        }

        if ($this->cb_encrypted_appownershipticket !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->cb_encrypted_appownershipticket);
        }

        if ($this->encrypted_ticket !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->encrypted_ticket);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ticket_version_no = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->crc_encryptedticket = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cb_encrypteduserdata = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cb_encrypted_appownershipticket = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->encrypted_ticket = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->ticket_version_no !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ticket_version_no);
        }

        if ($this->crc_encryptedticket !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->crc_encryptedticket);
        }

        if ($this->cb_encrypteduserdata !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cb_encrypteduserdata);
        }

        if ($this->cb_encrypted_appownershipticket !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cb_encrypted_appownershipticket);
        }

        if ($this->encrypted_ticket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->encrypted_ticket);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->ticket_version_no = null;
        $this->crc_encryptedticket = null;
        $this->cb_encrypteduserdata = null;
        $this->cb_encrypted_appownershipticket = null;
        $this->encrypted_ticket = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgAppTicket\EncryptedAppTicket) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->ticket_version_no = ($message->ticket_version_no !== null) ? $message->ticket_version_no : $this->ticket_version_no;
        $this->crc_encryptedticket = ($message->crc_encryptedticket !== null) ? $message->crc_encryptedticket : $this->crc_encryptedticket;
        $this->cb_encrypteduserdata = ($message->cb_encrypteduserdata !== null) ? $message->cb_encrypteduserdata : $this->cb_encrypteduserdata;
        $this->cb_encrypted_appownershipticket = ($message->cb_encrypted_appownershipticket !== null) ? $message->cb_encrypted_appownershipticket : $this->cb_encrypted_appownershipticket;
        $this->encrypted_ticket = ($message->encrypted_ticket !== null) ? $message->encrypted_ticket : $this->encrypted_ticket;
    }


}

