<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_base.proto
 */


namespace SteamKit\Base\SteamMsgBase;

/**
 * Protobuf message : SteamKit.Base.SteamMsgBase.CMsgAuthTicket
 */
class CMsgAuthTicket extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * estate optional uint32 = 1
     *
     * @var int
     */
    protected $estate = null;

    /**
     * eresult optional uint32 = 2
     *
     * @var int
     */
    protected $eresult = null;

    /**
     * steamid optional fixed64 = 3
     *
     * @var int
     */
    protected $steamid = null;

    /**
     * gameid optional fixed64 = 4
     *
     * @var int
     */
    protected $gameid = null;

    /**
     * h_steam_pipe optional uint32 = 5
     *
     * @var int
     */
    protected $h_steam_pipe = null;

    /**
     * ticket_crc optional uint32 = 6
     *
     * @var int
     */
    protected $ticket_crc = null;

    /**
     * ticket optional bytes = 7
     *
     * @var \Protobuf\Stream
     */
    protected $ticket = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->eresult = '2';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'estate' has a value
     *
     * @return bool
     */
    public function hasEstate()
    {
        return $this->estate !== null;
    }

    /**
     * Get 'estate' value
     *
     * @return int
     */
    public function getEstate()
    {
        return $this->estate;
    }

    /**
     * Set 'estate' value
     *
     * @param int $value
     */
    public function setEstate($value = null)
    {
        $this->estate = $value;
    }

    /**
     * Check if 'eresult' has a value
     *
     * @return bool
     */
    public function hasEresult()
    {
        return $this->eresult !== null;
    }

    /**
     * Get 'eresult' value
     *
     * @return int
     */
    public function getEresult()
    {
        return $this->eresult;
    }

    /**
     * Set 'eresult' value
     *
     * @param int $value
     */
    public function setEresult($value = null)
    {
        $this->eresult = $value;
    }

    /**
     * Check if 'steamid' has a value
     *
     * @return bool
     */
    public function hasSteamid()
    {
        return $this->steamid !== null;
    }

    /**
     * Get 'steamid' value
     *
     * @return int
     */
    public function getSteamid()
    {
        return $this->steamid;
    }

    /**
     * Set 'steamid' value
     *
     * @param int $value
     */
    public function setSteamid($value = null)
    {
        $this->steamid = $value;
    }

    /**
     * Check if 'gameid' has a value
     *
     * @return bool
     */
    public function hasGameid()
    {
        return $this->gameid !== null;
    }

    /**
     * Get 'gameid' value
     *
     * @return int
     */
    public function getGameid()
    {
        return $this->gameid;
    }

    /**
     * Set 'gameid' value
     *
     * @param int $value
     */
    public function setGameid($value = null)
    {
        $this->gameid = $value;
    }

    /**
     * Check if 'h_steam_pipe' has a value
     *
     * @return bool
     */
    public function hasHSteamPipe()
    {
        return $this->h_steam_pipe !== null;
    }

    /**
     * Get 'h_steam_pipe' value
     *
     * @return int
     */
    public function getHSteamPipe()
    {
        return $this->h_steam_pipe;
    }

    /**
     * Set 'h_steam_pipe' value
     *
     * @param int $value
     */
    public function setHSteamPipe($value = null)
    {
        $this->h_steam_pipe = $value;
    }

    /**
     * Check if 'ticket_crc' has a value
     *
     * @return bool
     */
    public function hasTicketCrc()
    {
        return $this->ticket_crc !== null;
    }

    /**
     * Get 'ticket_crc' value
     *
     * @return int
     */
    public function getTicketCrc()
    {
        return $this->ticket_crc;
    }

    /**
     * Set 'ticket_crc' value
     *
     * @param int $value
     */
    public function setTicketCrc($value = null)
    {
        $this->ticket_crc = $value;
    }

    /**
     * Check if 'ticket' has a value
     *
     * @return bool
     */
    public function hasTicket()
    {
        return $this->ticket !== null;
    }

    /**
     * Get 'ticket' value
     *
     * @return \Protobuf\Stream
     */
    public function getTicket()
    {
        return $this->ticket;
    }

    /**
     * Set 'ticket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setTicket($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->ticket = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'estate' => null,
            'eresult' => '2',
            'steamid' => null,
            'gameid' => null,
            'h_steam_pipe' => null,
            'ticket_crc' => null,
            'ticket' => null
        ], $values);

        $message->setEstate($values['estate']);
        $message->setEresult($values['eresult']);
        $message->setSteamid($values['steamid']);
        $message->setGameid($values['gameid']);
        $message->setHSteamPipe($values['h_steam_pipe']);
        $message->setTicketCrc($values['ticket_crc']);
        $message->setTicket($values['ticket']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgAuthTicket',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'estate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'eresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'steamid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'gameid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'h_steam_pipe',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'ticket_crc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'ticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->estate !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->estate);
        }

        if ($this->eresult !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->eresult);
        }

        if ($this->steamid !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeFixed64($stream, $this->steamid);
        }

        if ($this->gameid !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeFixed64($stream, $this->gameid);
        }

        if ($this->h_steam_pipe !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->h_steam_pipe);
        }

        if ($this->ticket_crc !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->ticket_crc);
        }

        if ($this->ticket !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeByteStream($stream, $this->ticket);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->estate = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->eresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steamid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->gameid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->h_steam_pipe = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ticket_crc = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->ticket = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->estate !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->estate);
        }

        if ($this->eresult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult);
        }

        if ($this->steamid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->gameid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->h_steam_pipe !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->h_steam_pipe);
        }

        if ($this->ticket_crc !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ticket_crc);
        }

        if ($this->ticket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->ticket);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->estate = null;
        $this->eresult = '2';
        $this->steamid = null;
        $this->gameid = null;
        $this->h_steam_pipe = null;
        $this->ticket_crc = null;
        $this->ticket = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgBase\CMsgAuthTicket) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->estate = ($message->estate !== null) ? $message->estate : $this->estate;
        $this->eresult = ($message->eresult !== null) ? $message->eresult : $this->eresult;
        $this->steamid = ($message->steamid !== null) ? $message->steamid : $this->steamid;
        $this->gameid = ($message->gameid !== null) ? $message->gameid : $this->gameid;
        $this->h_steam_pipe = ($message->h_steam_pipe !== null) ? $message->h_steam_pipe : $this->h_steam_pipe;
        $this->ticket_crc = ($message->ticket_crc !== null) ? $message->ticket_crc : $this->ticket_crc;
        $this->ticket = ($message->ticket !== null) ? $message->ticket : $this->ticket;
    }


}

