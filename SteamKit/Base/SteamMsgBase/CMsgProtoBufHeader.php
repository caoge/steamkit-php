<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_base.proto
 */


namespace SteamKit\Base\SteamMsgBase;

/**
 * Protobuf message : SteamKit.Base.SteamMsgBase.CMsgProtoBufHeader
 */
class CMsgProtoBufHeader extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steamid optional fixed64 = 1
     *
     * @var int
     */
    protected $steamid = null;

    /**
     * client_sessionid optional int32 = 2
     *
     * @var int
     */
    protected $client_sessionid = null;

    /**
     * routing_appid optional uint32 = 3
     *
     * @var int
     */
    protected $routing_appid = null;

    /**
     * jobid_source optional fixed64 = 10
     *
     * @var int
     */
    protected $jobid_source = null;

    /**
     * jobid_target optional fixed64 = 11
     *
     * @var int
     */
    protected $jobid_target = null;

    /**
     * target_job_name optional string = 12
     *
     * @var string
     */
    protected $target_job_name = null;

    /**
     * seq_num optional int32 = 24
     *
     * @var int
     */
    protected $seq_num = null;

    /**
     * eresult optional int32 = 13
     *
     * @var int
     */
    protected $eresult = null;

    /**
     * error_message optional string = 14
     *
     * @var string
     */
    protected $error_message = null;

    /**
     * ip optional uint32 = 15
     *
     * @var int
     */
    protected $ip = null;

    /**
     * auth_account_flags optional uint32 = 16
     *
     * @var int
     */
    protected $auth_account_flags = null;

    /**
     * token_source optional uint32 = 22
     *
     * @var int
     */
    protected $token_source = null;

    /**
     * admin_spoofing_user optional bool = 23
     *
     * @var bool
     */
    protected $admin_spoofing_user = null;

    /**
     * transport_error optional int32 = 17
     *
     * @var int
     */
    protected $transport_error = null;

    /**
     * messageid optional uint64 = 18
     *
     * @var int
     */
    protected $messageid = null;

    /**
     * publisher_group_id optional uint32 = 19
     *
     * @var int
     */
    protected $publisher_group_id = null;

    /**
     * sysid optional uint32 = 20
     *
     * @var int
     */
    protected $sysid = null;

    /**
     * trace_tag optional uint64 = 21
     *
     * @var int
     */
    protected $trace_tag = null;

    /**
     * webapi_key_id optional uint32 = 25
     *
     * @var int
     */
    protected $webapi_key_id = null;

    /**
     * is_from_external_source optional bool = 26
     *
     * @var bool
     */
    protected $is_from_external_source = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->jobid_source = '18446744073709551615';
        $this->jobid_target = '18446744073709551615';
        $this->eresult = '2';
        $this->transport_error = '1';
        $this->messageid = '18446744073709551615';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'steamid' has a value
     *
     * @return bool
     */
    public function hasSteamid()
    {
        return $this->steamid !== null;
    }

    /**
     * Get 'steamid' value
     *
     * @return int
     */
    public function getSteamid()
    {
        return $this->steamid;
    }

    /**
     * Set 'steamid' value
     *
     * @param int $value
     */
    public function setSteamid($value = null)
    {
        $this->steamid = $value;
    }

    /**
     * Check if 'client_sessionid' has a value
     *
     * @return bool
     */
    public function hasClientSessionid()
    {
        return $this->client_sessionid !== null;
    }

    /**
     * Get 'client_sessionid' value
     *
     * @return int
     */
    public function getClientSessionid()
    {
        return $this->client_sessionid;
    }

    /**
     * Set 'client_sessionid' value
     *
     * @param int $value
     */
    public function setClientSessionid($value = null)
    {
        $this->client_sessionid = $value;
    }

    /**
     * Check if 'routing_appid' has a value
     *
     * @return bool
     */
    public function hasRoutingAppid()
    {
        return $this->routing_appid !== null;
    }

    /**
     * Get 'routing_appid' value
     *
     * @return int
     */
    public function getRoutingAppid()
    {
        return $this->routing_appid;
    }

    /**
     * Set 'routing_appid' value
     *
     * @param int $value
     */
    public function setRoutingAppid($value = null)
    {
        $this->routing_appid = $value;
    }

    /**
     * Check if 'jobid_source' has a value
     *
     * @return bool
     */
    public function hasJobidSource()
    {
        return $this->jobid_source !== null;
    }

    /**
     * Get 'jobid_source' value
     *
     * @return int
     */
    public function getJobidSource()
    {
        return $this->jobid_source;
    }

    /**
     * Set 'jobid_source' value
     *
     * @param int $value
     */
    public function setJobidSource($value = null)
    {
        $this->jobid_source = $value;
    }

    /**
     * Check if 'jobid_target' has a value
     *
     * @return bool
     */
    public function hasJobidTarget()
    {
        return $this->jobid_target !== null;
    }

    /**
     * Get 'jobid_target' value
     *
     * @return int
     */
    public function getJobidTarget()
    {
        return $this->jobid_target;
    }

    /**
     * Set 'jobid_target' value
     *
     * @param int $value
     */
    public function setJobidTarget($value = null)
    {
        $this->jobid_target = $value;
    }

    /**
     * Check if 'target_job_name' has a value
     *
     * @return bool
     */
    public function hasTargetJobName()
    {
        return $this->target_job_name !== null;
    }

    /**
     * Get 'target_job_name' value
     *
     * @return string
     */
    public function getTargetJobName()
    {
        return $this->target_job_name;
    }

    /**
     * Set 'target_job_name' value
     *
     * @param string $value
     */
    public function setTargetJobName($value = null)
    {
        $this->target_job_name = $value;
    }

    /**
     * Check if 'seq_num' has a value
     *
     * @return bool
     */
    public function hasSeqNum()
    {
        return $this->seq_num !== null;
    }

    /**
     * Get 'seq_num' value
     *
     * @return int
     */
    public function getSeqNum()
    {
        return $this->seq_num;
    }

    /**
     * Set 'seq_num' value
     *
     * @param int $value
     */
    public function setSeqNum($value = null)
    {
        $this->seq_num = $value;
    }

    /**
     * Check if 'eresult' has a value
     *
     * @return bool
     */
    public function hasEresult()
    {
        return $this->eresult !== null;
    }

    /**
     * Get 'eresult' value
     *
     * @return int
     */
    public function getEresult()
    {
        return $this->eresult;
    }

    /**
     * Set 'eresult' value
     *
     * @param int $value
     */
    public function setEresult($value = null)
    {
        $this->eresult = $value;
    }

    /**
     * Check if 'error_message' has a value
     *
     * @return bool
     */
    public function hasErrorMessage()
    {
        return $this->error_message !== null;
    }

    /**
     * Get 'error_message' value
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }

    /**
     * Set 'error_message' value
     *
     * @param string $value
     */
    public function setErrorMessage($value = null)
    {
        $this->error_message = $value;
    }

    /**
     * Check if 'ip' has a value
     *
     * @return bool
     */
    public function hasIp()
    {
        return $this->ip !== null;
    }

    /**
     * Get 'ip' value
     *
     * @return int
     */
    public function getIp()
    {
        return $this->ip;
    }

    /**
     * Set 'ip' value
     *
     * @param int $value
     */
    public function setIp($value = null)
    {
        $this->ip = $value;
    }

    /**
     * Check if 'auth_account_flags' has a value
     *
     * @return bool
     */
    public function hasAuthAccountFlags()
    {
        return $this->auth_account_flags !== null;
    }

    /**
     * Get 'auth_account_flags' value
     *
     * @return int
     */
    public function getAuthAccountFlags()
    {
        return $this->auth_account_flags;
    }

    /**
     * Set 'auth_account_flags' value
     *
     * @param int $value
     */
    public function setAuthAccountFlags($value = null)
    {
        $this->auth_account_flags = $value;
    }

    /**
     * Check if 'token_source' has a value
     *
     * @return bool
     */
    public function hasTokenSource()
    {
        return $this->token_source !== null;
    }

    /**
     * Get 'token_source' value
     *
     * @return int
     */
    public function getTokenSource()
    {
        return $this->token_source;
    }

    /**
     * Set 'token_source' value
     *
     * @param int $value
     */
    public function setTokenSource($value = null)
    {
        $this->token_source = $value;
    }

    /**
     * Check if 'admin_spoofing_user' has a value
     *
     * @return bool
     */
    public function hasAdminSpoofingUser()
    {
        return $this->admin_spoofing_user !== null;
    }

    /**
     * Get 'admin_spoofing_user' value
     *
     * @return bool
     */
    public function getAdminSpoofingUser()
    {
        return $this->admin_spoofing_user;
    }

    /**
     * Set 'admin_spoofing_user' value
     *
     * @param bool $value
     */
    public function setAdminSpoofingUser($value = null)
    {
        $this->admin_spoofing_user = $value;
    }

    /**
     * Check if 'transport_error' has a value
     *
     * @return bool
     */
    public function hasTransportError()
    {
        return $this->transport_error !== null;
    }

    /**
     * Get 'transport_error' value
     *
     * @return int
     */
    public function getTransportError()
    {
        return $this->transport_error;
    }

    /**
     * Set 'transport_error' value
     *
     * @param int $value
     */
    public function setTransportError($value = null)
    {
        $this->transport_error = $value;
    }

    /**
     * Check if 'messageid' has a value
     *
     * @return bool
     */
    public function hasMessageid()
    {
        return $this->messageid !== null;
    }

    /**
     * Get 'messageid' value
     *
     * @return int
     */
    public function getMessageid()
    {
        return $this->messageid;
    }

    /**
     * Set 'messageid' value
     *
     * @param int $value
     */
    public function setMessageid($value = null)
    {
        $this->messageid = $value;
    }

    /**
     * Check if 'publisher_group_id' has a value
     *
     * @return bool
     */
    public function hasPublisherGroupId()
    {
        return $this->publisher_group_id !== null;
    }

    /**
     * Get 'publisher_group_id' value
     *
     * @return int
     */
    public function getPublisherGroupId()
    {
        return $this->publisher_group_id;
    }

    /**
     * Set 'publisher_group_id' value
     *
     * @param int $value
     */
    public function setPublisherGroupId($value = null)
    {
        $this->publisher_group_id = $value;
    }

    /**
     * Check if 'sysid' has a value
     *
     * @return bool
     */
    public function hasSysid()
    {
        return $this->sysid !== null;
    }

    /**
     * Get 'sysid' value
     *
     * @return int
     */
    public function getSysid()
    {
        return $this->sysid;
    }

    /**
     * Set 'sysid' value
     *
     * @param int $value
     */
    public function setSysid($value = null)
    {
        $this->sysid = $value;
    }

    /**
     * Check if 'trace_tag' has a value
     *
     * @return bool
     */
    public function hasTraceTag()
    {
        return $this->trace_tag !== null;
    }

    /**
     * Get 'trace_tag' value
     *
     * @return int
     */
    public function getTraceTag()
    {
        return $this->trace_tag;
    }

    /**
     * Set 'trace_tag' value
     *
     * @param int $value
     */
    public function setTraceTag($value = null)
    {
        $this->trace_tag = $value;
    }

    /**
     * Check if 'webapi_key_id' has a value
     *
     * @return bool
     */
    public function hasWebapiKeyId()
    {
        return $this->webapi_key_id !== null;
    }

    /**
     * Get 'webapi_key_id' value
     *
     * @return int
     */
    public function getWebapiKeyId()
    {
        return $this->webapi_key_id;
    }

    /**
     * Set 'webapi_key_id' value
     *
     * @param int $value
     */
    public function setWebapiKeyId($value = null)
    {
        $this->webapi_key_id = $value;
    }

    /**
     * Check if 'is_from_external_source' has a value
     *
     * @return bool
     */
    public function hasIsFromExternalSource()
    {
        return $this->is_from_external_source !== null;
    }

    /**
     * Get 'is_from_external_source' value
     *
     * @return bool
     */
    public function getIsFromExternalSource()
    {
        return $this->is_from_external_source;
    }

    /**
     * Set 'is_from_external_source' value
     *
     * @param bool $value
     */
    public function setIsFromExternalSource($value = null)
    {
        $this->is_from_external_source = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steamid' => null,
            'client_sessionid' => null,
            'routing_appid' => null,
            'jobid_source' => '18446744073709551615',
            'jobid_target' => '18446744073709551615',
            'target_job_name' => null,
            'seq_num' => null,
            'eresult' => '2',
            'error_message' => null,
            'ip' => null,
            'auth_account_flags' => null,
            'token_source' => null,
            'admin_spoofing_user' => null,
            'transport_error' => '1',
            'messageid' => '18446744073709551615',
            'publisher_group_id' => null,
            'sysid' => null,
            'trace_tag' => null,
            'webapi_key_id' => null,
            'is_from_external_source' => null
        ], $values);

        $message->setSteamid($values['steamid']);
        $message->setClientSessionid($values['client_sessionid']);
        $message->setRoutingAppid($values['routing_appid']);
        $message->setJobidSource($values['jobid_source']);
        $message->setJobidTarget($values['jobid_target']);
        $message->setTargetJobName($values['target_job_name']);
        $message->setSeqNum($values['seq_num']);
        $message->setEresult($values['eresult']);
        $message->setErrorMessage($values['error_message']);
        $message->setIp($values['ip']);
        $message->setAuthAccountFlags($values['auth_account_flags']);
        $message->setTokenSource($values['token_source']);
        $message->setAdminSpoofingUser($values['admin_spoofing_user']);
        $message->setTransportError($values['transport_error']);
        $message->setMessageid($values['messageid']);
        $message->setPublisherGroupId($values['publisher_group_id']);
        $message->setSysid($values['sysid']);
        $message->setTraceTag($values['trace_tag']);
        $message->setWebapiKeyId($values['webapi_key_id']);
        $message->setIsFromExternalSource($values['is_from_external_source']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgProtoBufHeader',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steamid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'client_sessionid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'routing_appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'jobid_source',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '18446744073709551615'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'jobid_target',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '18446744073709551615'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'target_job_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'seq_num',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'eresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'error_message',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'auth_account_flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'token_source',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'admin_spoofing_user',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'transport_error',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '1'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'messageid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '18446744073709551615'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'publisher_group_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'sysid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'trace_tag',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'webapi_key_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'is_from_external_source',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steamid !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->steamid);
        }

        if ($this->client_sessionid !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->client_sessionid);
        }

        if ($this->routing_appid !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->routing_appid);
        }

        if ($this->jobid_source !== null) {
            $writer->writeVarint($stream, 81);
            $writer->writeFixed64($stream, $this->jobid_source);
        }

        if ($this->jobid_target !== null) {
            $writer->writeVarint($stream, 89);
            $writer->writeFixed64($stream, $this->jobid_target);
        }

        if ($this->target_job_name !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->target_job_name);
        }

        if ($this->seq_num !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeVarint($stream, $this->seq_num);
        }

        if ($this->eresult !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->eresult);
        }

        if ($this->error_message !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->error_message);
        }

        if ($this->ip !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->ip);
        }

        if ($this->auth_account_flags !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->auth_account_flags);
        }

        if ($this->token_source !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeVarint($stream, $this->token_source);
        }

        if ($this->admin_spoofing_user !== null) {
            $writer->writeVarint($stream, 184);
            $writer->writeBool($stream, $this->admin_spoofing_user);
        }

        if ($this->transport_error !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->transport_error);
        }

        if ($this->messageid !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeVarint($stream, $this->messageid);
        }

        if ($this->publisher_group_id !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->publisher_group_id);
        }

        if ($this->sysid !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->sysid);
        }

        if ($this->trace_tag !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->trace_tag);
        }

        if ($this->webapi_key_id !== null) {
            $writer->writeVarint($stream, 200);
            $writer->writeVarint($stream, $this->webapi_key_id);
        }

        if ($this->is_from_external_source !== null) {
            $writer->writeVarint($stream, 208);
            $writer->writeBool($stream, $this->is_from_external_source);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steamid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->client_sessionid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->routing_appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->jobid_source = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->jobid_target = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->target_job_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->seq_num = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->eresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->error_message = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->auth_account_flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->token_source = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->admin_spoofing_user = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->transport_error = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->messageid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->publisher_group_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->sysid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->trace_tag = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->webapi_key_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_from_external_source = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steamid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->client_sessionid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->client_sessionid);
        }

        if ($this->routing_appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->routing_appid);
        }

        if ($this->jobid_source !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->jobid_target !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->target_job_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->target_job_name);
        }

        if ($this->seq_num !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->seq_num);
        }

        if ($this->eresult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult);
        }

        if ($this->error_message !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->error_message);
        }

        if ($this->ip !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ip);
        }

        if ($this->auth_account_flags !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->auth_account_flags);
        }

        if ($this->token_source !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->token_source);
        }

        if ($this->admin_spoofing_user !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->transport_error !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->transport_error);
        }

        if ($this->messageid !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->messageid);
        }

        if ($this->publisher_group_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->publisher_group_id);
        }

        if ($this->sysid !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->sysid);
        }

        if ($this->trace_tag !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->trace_tag);
        }

        if ($this->webapi_key_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->webapi_key_id);
        }

        if ($this->is_from_external_source !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steamid = null;
        $this->client_sessionid = null;
        $this->routing_appid = null;
        $this->jobid_source = '18446744073709551615';
        $this->jobid_target = '18446744073709551615';
        $this->target_job_name = null;
        $this->seq_num = null;
        $this->eresult = '2';
        $this->error_message = null;
        $this->ip = null;
        $this->auth_account_flags = null;
        $this->token_source = null;
        $this->admin_spoofing_user = null;
        $this->transport_error = '1';
        $this->messageid = '18446744073709551615';
        $this->publisher_group_id = null;
        $this->sysid = null;
        $this->trace_tag = null;
        $this->webapi_key_id = null;
        $this->is_from_external_source = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgBase\CMsgProtoBufHeader) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steamid = ($message->steamid !== null) ? $message->steamid : $this->steamid;
        $this->client_sessionid = ($message->client_sessionid !== null) ? $message->client_sessionid : $this->client_sessionid;
        $this->routing_appid = ($message->routing_appid !== null) ? $message->routing_appid : $this->routing_appid;
        $this->jobid_source = ($message->jobid_source !== null) ? $message->jobid_source : $this->jobid_source;
        $this->jobid_target = ($message->jobid_target !== null) ? $message->jobid_target : $this->jobid_target;
        $this->target_job_name = ($message->target_job_name !== null) ? $message->target_job_name : $this->target_job_name;
        $this->seq_num = ($message->seq_num !== null) ? $message->seq_num : $this->seq_num;
        $this->eresult = ($message->eresult !== null) ? $message->eresult : $this->eresult;
        $this->error_message = ($message->error_message !== null) ? $message->error_message : $this->error_message;
        $this->ip = ($message->ip !== null) ? $message->ip : $this->ip;
        $this->auth_account_flags = ($message->auth_account_flags !== null) ? $message->auth_account_flags : $this->auth_account_flags;
        $this->token_source = ($message->token_source !== null) ? $message->token_source : $this->token_source;
        $this->admin_spoofing_user = ($message->admin_spoofing_user !== null) ? $message->admin_spoofing_user : $this->admin_spoofing_user;
        $this->transport_error = ($message->transport_error !== null) ? $message->transport_error : $this->transport_error;
        $this->messageid = ($message->messageid !== null) ? $message->messageid : $this->messageid;
        $this->publisher_group_id = ($message->publisher_group_id !== null) ? $message->publisher_group_id : $this->publisher_group_id;
        $this->sysid = ($message->sysid !== null) ? $message->sysid : $this->sysid;
        $this->trace_tag = ($message->trace_tag !== null) ? $message->trace_tag : $this->trace_tag;
        $this->webapi_key_id = ($message->webapi_key_id !== null) ? $message->webapi_key_id : $this->webapi_key_id;
        $this->is_from_external_source = ($message->is_from_external_source !== null) ? $message->is_from_external_source : $this->is_from_external_source;
    }


}

