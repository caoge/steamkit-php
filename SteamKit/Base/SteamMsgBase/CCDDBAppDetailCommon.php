<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_base.proto
 */


namespace SteamKit\Base\SteamMsgBase;

/**
 * Protobuf message : SteamKit.Base.SteamMsgBase.CCDDBAppDetailCommon
 */
class CCDDBAppDetailCommon extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * appid optional uint32 = 1
     *
     * @var int
     */
    protected $appid = null;

    /**
     * name optional string = 2
     *
     * @var string
     */
    protected $name = null;

    /**
     * icon optional string = 3
     *
     * @var string
     */
    protected $icon = null;

    /**
     * logo optional string = 4
     *
     * @var string
     */
    protected $logo = null;

    /**
     * logo_small optional string = 5
     *
     * @var string
     */
    protected $logo_small = null;

    /**
     * tool optional bool = 6
     *
     * @var bool
     */
    protected $tool = null;

    /**
     * demo optional bool = 7
     *
     * @var bool
     */
    protected $demo = null;

    /**
     * media optional bool = 8
     *
     * @var bool
     */
    protected $media = null;

    /**
     * community_visible_stats optional bool = 9
     *
     * @var bool
     */
    protected $community_visible_stats = null;

    /**
     * friendly_name optional string = 10
     *
     * @var string
     */
    protected $friendly_name = null;

    /**
     * propagation optional string = 11
     *
     * @var string
     */
    protected $propagation = null;

    /**
     * has_adult_content optional bool = 12
     *
     * @var bool
     */
    protected $has_adult_content = null;

    /**
     * Check if 'appid' has a value
     *
     * @return bool
     */
    public function hasAppid()
    {
        return $this->appid !== null;
    }

    /**
     * Get 'appid' value
     *
     * @return int
     */
    public function getAppid()
    {
        return $this->appid;
    }

    /**
     * Set 'appid' value
     *
     * @param int $value
     */
    public function setAppid($value = null)
    {
        $this->appid = $value;
    }

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'icon' has a value
     *
     * @return bool
     */
    public function hasIcon()
    {
        return $this->icon !== null;
    }

    /**
     * Get 'icon' value
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->icon;
    }

    /**
     * Set 'icon' value
     *
     * @param string $value
     */
    public function setIcon($value = null)
    {
        $this->icon = $value;
    }

    /**
     * Check if 'logo' has a value
     *
     * @return bool
     */
    public function hasLogo()
    {
        return $this->logo !== null;
    }

    /**
     * Get 'logo' value
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->logo;
    }

    /**
     * Set 'logo' value
     *
     * @param string $value
     */
    public function setLogo($value = null)
    {
        $this->logo = $value;
    }

    /**
     * Check if 'logo_small' has a value
     *
     * @return bool
     */
    public function hasLogoSmall()
    {
        return $this->logo_small !== null;
    }

    /**
     * Get 'logo_small' value
     *
     * @return string
     */
    public function getLogoSmall()
    {
        return $this->logo_small;
    }

    /**
     * Set 'logo_small' value
     *
     * @param string $value
     */
    public function setLogoSmall($value = null)
    {
        $this->logo_small = $value;
    }

    /**
     * Check if 'tool' has a value
     *
     * @return bool
     */
    public function hasTool()
    {
        return $this->tool !== null;
    }

    /**
     * Get 'tool' value
     *
     * @return bool
     */
    public function getTool()
    {
        return $this->tool;
    }

    /**
     * Set 'tool' value
     *
     * @param bool $value
     */
    public function setTool($value = null)
    {
        $this->tool = $value;
    }

    /**
     * Check if 'demo' has a value
     *
     * @return bool
     */
    public function hasDemo()
    {
        return $this->demo !== null;
    }

    /**
     * Get 'demo' value
     *
     * @return bool
     */
    public function getDemo()
    {
        return $this->demo;
    }

    /**
     * Set 'demo' value
     *
     * @param bool $value
     */
    public function setDemo($value = null)
    {
        $this->demo = $value;
    }

    /**
     * Check if 'media' has a value
     *
     * @return bool
     */
    public function hasMedia()
    {
        return $this->media !== null;
    }

    /**
     * Get 'media' value
     *
     * @return bool
     */
    public function getMedia()
    {
        return $this->media;
    }

    /**
     * Set 'media' value
     *
     * @param bool $value
     */
    public function setMedia($value = null)
    {
        $this->media = $value;
    }

    /**
     * Check if 'community_visible_stats' has a value
     *
     * @return bool
     */
    public function hasCommunityVisibleStats()
    {
        return $this->community_visible_stats !== null;
    }

    /**
     * Get 'community_visible_stats' value
     *
     * @return bool
     */
    public function getCommunityVisibleStats()
    {
        return $this->community_visible_stats;
    }

    /**
     * Set 'community_visible_stats' value
     *
     * @param bool $value
     */
    public function setCommunityVisibleStats($value = null)
    {
        $this->community_visible_stats = $value;
    }

    /**
     * Check if 'friendly_name' has a value
     *
     * @return bool
     */
    public function hasFriendlyName()
    {
        return $this->friendly_name !== null;
    }

    /**
     * Get 'friendly_name' value
     *
     * @return string
     */
    public function getFriendlyName()
    {
        return $this->friendly_name;
    }

    /**
     * Set 'friendly_name' value
     *
     * @param string $value
     */
    public function setFriendlyName($value = null)
    {
        $this->friendly_name = $value;
    }

    /**
     * Check if 'propagation' has a value
     *
     * @return bool
     */
    public function hasPropagation()
    {
        return $this->propagation !== null;
    }

    /**
     * Get 'propagation' value
     *
     * @return string
     */
    public function getPropagation()
    {
        return $this->propagation;
    }

    /**
     * Set 'propagation' value
     *
     * @param string $value
     */
    public function setPropagation($value = null)
    {
        $this->propagation = $value;
    }

    /**
     * Check if 'has_adult_content' has a value
     *
     * @return bool
     */
    public function hasHasAdultContent()
    {
        return $this->has_adult_content !== null;
    }

    /**
     * Get 'has_adult_content' value
     *
     * @return bool
     */
    public function getHasAdultContent()
    {
        return $this->has_adult_content;
    }

    /**
     * Set 'has_adult_content' value
     *
     * @param bool $value
     */
    public function setHasAdultContent($value = null)
    {
        $this->has_adult_content = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'appid' => null,
            'name' => null,
            'icon' => null,
            'logo' => null,
            'logo_small' => null,
            'tool' => null,
            'demo' => null,
            'media' => null,
            'community_visible_stats' => null,
            'friendly_name' => null,
            'propagation' => null,
            'has_adult_content' => null
        ], $values);

        $message->setAppid($values['appid']);
        $message->setName($values['name']);
        $message->setIcon($values['icon']);
        $message->setLogo($values['logo']);
        $message->setLogoSmall($values['logo_small']);
        $message->setTool($values['tool']);
        $message->setDemo($values['demo']);
        $message->setMedia($values['media']);
        $message->setCommunityVisibleStats($values['community_visible_stats']);
        $message->setFriendlyName($values['friendly_name']);
        $message->setPropagation($values['propagation']);
        $message->setHasAdultContent($values['has_adult_content']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CCDDBAppDetailCommon',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'icon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'logo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'logo_small',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'tool',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'demo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'media',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'community_visible_stats',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'friendly_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'propagation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'has_adult_content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->appid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->appid);
        }

        if ($this->name !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->name);
        }

        if ($this->icon !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->icon);
        }

        if ($this->logo !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->logo);
        }

        if ($this->logo_small !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->logo_small);
        }

        if ($this->tool !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->tool);
        }

        if ($this->demo !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->demo);
        }

        if ($this->media !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->media);
        }

        if ($this->community_visible_stats !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->community_visible_stats);
        }

        if ($this->friendly_name !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->friendly_name);
        }

        if ($this->propagation !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->propagation);
        }

        if ($this->has_adult_content !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->has_adult_content);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->icon = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->logo = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->logo_small = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->tool = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->demo = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->media = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->community_visible_stats = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->friendly_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->propagation = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->has_adult_content = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->appid);
        }

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->icon !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->icon);
        }

        if ($this->logo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->logo);
        }

        if ($this->logo_small !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->logo_small);
        }

        if ($this->tool !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->demo !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->media !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->community_visible_stats !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->friendly_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->friendly_name);
        }

        if ($this->propagation !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->propagation);
        }

        if ($this->has_adult_content !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->appid = null;
        $this->name = null;
        $this->icon = null;
        $this->logo = null;
        $this->logo_small = null;
        $this->tool = null;
        $this->demo = null;
        $this->media = null;
        $this->community_visible_stats = null;
        $this->friendly_name = null;
        $this->propagation = null;
        $this->has_adult_content = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgBase\CCDDBAppDetailCommon) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->appid = ($message->appid !== null) ? $message->appid : $this->appid;
        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->icon = ($message->icon !== null) ? $message->icon : $this->icon;
        $this->logo = ($message->logo !== null) ? $message->logo : $this->logo;
        $this->logo_small = ($message->logo_small !== null) ? $message->logo_small : $this->logo_small;
        $this->tool = ($message->tool !== null) ? $message->tool : $this->tool;
        $this->demo = ($message->demo !== null) ? $message->demo : $this->demo;
        $this->media = ($message->media !== null) ? $message->media : $this->media;
        $this->community_visible_stats = ($message->community_visible_stats !== null) ? $message->community_visible_stats : $this->community_visible_stats;
        $this->friendly_name = ($message->friendly_name !== null) ? $message->friendly_name : $this->friendly_name;
        $this->propagation = ($message->propagation !== null) ? $message->propagation : $this->propagation;
        $this->has_adult_content = ($message->has_adult_content !== null) ? $message->has_adult_content : $this->has_adult_content;
    }


}

