<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_base.proto
 */


namespace SteamKit\Base\SteamMsgBase;

/**
 * Protobuf extension : SteamKit.Base.SteamMsgBase.Extension
 */
class Extension implements \Protobuf\Extension
{

    /**
     * Extension field : msgpool_soft_limit optional int32 = 50000
     *
     * @var \Protobuf\Extension
     */
    protected static $msgpool_soft_limit = null;

    /**
     * Extension field : msgpool_hard_limit optional int32 = 50001
     *
     * @var \Protobuf\Extension
     */
    protected static $msgpool_hard_limit = null;

    /**
     * Extension field : force_php_generation optional bool = 50000
     *
     * @var \Protobuf\Extension
     */
    protected static $force_php_generation = null;

    /**
     * Register all extensions
     *
     * @param \Protobuf\Extension\ExtensionRegistry
     */
    public static function registerAllExtensions(\Protobuf\Extension\ExtensionRegistry $registry)
    {
        $registry->add(self::msgpoolSoftLimit());
        $registry->add(self::msgpoolHardLimit());
        $registry->add(self::forcePhpGeneration());
    }

    /**
     * Extension field : msgpool_soft_limit
     *
     * @return \Protobuf\Extension
     */
    public static function msgpoolSoftLimit()
    {
        if (self::$msgpool_soft_limit !== null) {
            return self::$msgpool_soft_limit;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 5);

            $value = $reader->readVarint($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400000);
            $writer->writeVarint($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += $calculator->computeVarintSize($value);

            return $size;
        };

        return self::$msgpool_soft_limit = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\MessageOptions', 'msgpool_soft_limit', 50000, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }

    /**
     * Extension field : msgpool_hard_limit
     *
     * @return \Protobuf\Extension
     */
    public static function msgpoolHardLimit()
    {
        if (self::$msgpool_hard_limit !== null) {
            return self::$msgpool_hard_limit;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 5);

            $value = $reader->readVarint($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400008);
            $writer->writeVarint($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += $calculator->computeVarintSize($value);

            return $size;
        };

        return self::$msgpool_hard_limit = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\MessageOptions', 'msgpool_hard_limit', 50001, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }

    /**
     * Extension field : force_php_generation
     *
     * @return \Protobuf\Extension
     */
    public static function forcePhpGeneration()
    {
        if (self::$force_php_generation !== null) {
            return self::$force_php_generation;
        }

        $readCallback = function (\Protobuf\ReadContext $context, $wire) {
            $reader = $context->getReader();
            $length = $context->getLength();
            $stream = $context->getStream();

            \Protobuf\WireFormat::assertWireType($wire, 8);

            $value = $reader->readBool($stream);

            return $value;
        };

        $writeCallback = function (\Protobuf\WriteContext $context, $value) {
            $stream      = $context->getStream();
            $writer      = $context->getWriter();
            $sizeContext = $context->getComputeSizeContext();

            $writer->writeVarint($stream, 400000);
            $writer->writeBool($stream, $value);
        };

        $sizeCallback = function (\Protobuf\ComputeSizeContext $context, $value) {
            $calculator = $context->getSizeCalculator();
            $size       = 0;

            $size += 3;
            $size += 1;

            return $size;
        };

        return self::$force_php_generation = new \Protobuf\Extension\ExtensionField('\\google\\protobuf\\FileOptions', 'force_php_generation', 50000, $readCallback, $writeCallback, $sizeCallback, __METHOD__);
    }


}

