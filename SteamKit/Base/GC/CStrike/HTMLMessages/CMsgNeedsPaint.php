<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : cstrike/htmlmessages.proto
 */


namespace SteamKit\Base\GC\CStrike\HTMLMessages;

/**
 * Protobuf message : SteamKit.Base.GC.CStrike.HTMLMessages.CMsgNeedsPaint
 */
class CMsgNeedsPaint extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * browser_handle optional uint32 = 1
     *
     * @var int
     */
    protected $browser_handle = null;

    /**
     * rgba optional uint64 = 2
     *
     * @var int
     */
    protected $rgba = null;

    /**
     * wide optional uint32 = 3
     *
     * @var int
     */
    protected $wide = null;

    /**
     * tall optional uint32 = 4
     *
     * @var int
     */
    protected $tall = null;

    /**
     * textureid optional uint32 = 5
     *
     * @var int
     */
    protected $textureid = null;

    /**
     * updatex optional uint32 = 6
     *
     * @var int
     */
    protected $updatex = null;

    /**
     * updatey optional uint32 = 7
     *
     * @var int
     */
    protected $updatey = null;

    /**
     * updatewide optional uint32 = 8
     *
     * @var int
     */
    protected $updatewide = null;

    /**
     * updatetall optional uint32 = 9
     *
     * @var int
     */
    protected $updatetall = null;

    /**
     * scrollx optional uint32 = 10
     *
     * @var int
     */
    protected $scrollx = null;

    /**
     * scrolly optional uint32 = 11
     *
     * @var int
     */
    protected $scrolly = null;

    /**
     * combobox_rgba optional uint64 = 12
     *
     * @var int
     */
    protected $combobox_rgba = null;

    /**
     * combobox_wide optional uint32 = 13
     *
     * @var int
     */
    protected $combobox_wide = null;

    /**
     * combobox_tall optional uint32 = 14
     *
     * @var int
     */
    protected $combobox_tall = null;

    /**
     * pageserial optional uint32 = 15
     *
     * @var int
     */
    protected $pageserial = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->combobox_rgba = '0';
        $this->combobox_wide = '0';
        $this->combobox_tall = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'browser_handle' has a value
     *
     * @return bool
     */
    public function hasBrowserHandle()
    {
        return $this->browser_handle !== null;
    }

    /**
     * Get 'browser_handle' value
     *
     * @return int
     */
    public function getBrowserHandle()
    {
        return $this->browser_handle;
    }

    /**
     * Set 'browser_handle' value
     *
     * @param int $value
     */
    public function setBrowserHandle($value = null)
    {
        $this->browser_handle = $value;
    }

    /**
     * Check if 'rgba' has a value
     *
     * @return bool
     */
    public function hasRgba()
    {
        return $this->rgba !== null;
    }

    /**
     * Get 'rgba' value
     *
     * @return int
     */
    public function getRgba()
    {
        return $this->rgba;
    }

    /**
     * Set 'rgba' value
     *
     * @param int $value
     */
    public function setRgba($value = null)
    {
        $this->rgba = $value;
    }

    /**
     * Check if 'wide' has a value
     *
     * @return bool
     */
    public function hasWide()
    {
        return $this->wide !== null;
    }

    /**
     * Get 'wide' value
     *
     * @return int
     */
    public function getWide()
    {
        return $this->wide;
    }

    /**
     * Set 'wide' value
     *
     * @param int $value
     */
    public function setWide($value = null)
    {
        $this->wide = $value;
    }

    /**
     * Check if 'tall' has a value
     *
     * @return bool
     */
    public function hasTall()
    {
        return $this->tall !== null;
    }

    /**
     * Get 'tall' value
     *
     * @return int
     */
    public function getTall()
    {
        return $this->tall;
    }

    /**
     * Set 'tall' value
     *
     * @param int $value
     */
    public function setTall($value = null)
    {
        $this->tall = $value;
    }

    /**
     * Check if 'textureid' has a value
     *
     * @return bool
     */
    public function hasTextureid()
    {
        return $this->textureid !== null;
    }

    /**
     * Get 'textureid' value
     *
     * @return int
     */
    public function getTextureid()
    {
        return $this->textureid;
    }

    /**
     * Set 'textureid' value
     *
     * @param int $value
     */
    public function setTextureid($value = null)
    {
        $this->textureid = $value;
    }

    /**
     * Check if 'updatex' has a value
     *
     * @return bool
     */
    public function hasUpdatex()
    {
        return $this->updatex !== null;
    }

    /**
     * Get 'updatex' value
     *
     * @return int
     */
    public function getUpdatex()
    {
        return $this->updatex;
    }

    /**
     * Set 'updatex' value
     *
     * @param int $value
     */
    public function setUpdatex($value = null)
    {
        $this->updatex = $value;
    }

    /**
     * Check if 'updatey' has a value
     *
     * @return bool
     */
    public function hasUpdatey()
    {
        return $this->updatey !== null;
    }

    /**
     * Get 'updatey' value
     *
     * @return int
     */
    public function getUpdatey()
    {
        return $this->updatey;
    }

    /**
     * Set 'updatey' value
     *
     * @param int $value
     */
    public function setUpdatey($value = null)
    {
        $this->updatey = $value;
    }

    /**
     * Check if 'updatewide' has a value
     *
     * @return bool
     */
    public function hasUpdatewide()
    {
        return $this->updatewide !== null;
    }

    /**
     * Get 'updatewide' value
     *
     * @return int
     */
    public function getUpdatewide()
    {
        return $this->updatewide;
    }

    /**
     * Set 'updatewide' value
     *
     * @param int $value
     */
    public function setUpdatewide($value = null)
    {
        $this->updatewide = $value;
    }

    /**
     * Check if 'updatetall' has a value
     *
     * @return bool
     */
    public function hasUpdatetall()
    {
        return $this->updatetall !== null;
    }

    /**
     * Get 'updatetall' value
     *
     * @return int
     */
    public function getUpdatetall()
    {
        return $this->updatetall;
    }

    /**
     * Set 'updatetall' value
     *
     * @param int $value
     */
    public function setUpdatetall($value = null)
    {
        $this->updatetall = $value;
    }

    /**
     * Check if 'scrollx' has a value
     *
     * @return bool
     */
    public function hasScrollx()
    {
        return $this->scrollx !== null;
    }

    /**
     * Get 'scrollx' value
     *
     * @return int
     */
    public function getScrollx()
    {
        return $this->scrollx;
    }

    /**
     * Set 'scrollx' value
     *
     * @param int $value
     */
    public function setScrollx($value = null)
    {
        $this->scrollx = $value;
    }

    /**
     * Check if 'scrolly' has a value
     *
     * @return bool
     */
    public function hasScrolly()
    {
        return $this->scrolly !== null;
    }

    /**
     * Get 'scrolly' value
     *
     * @return int
     */
    public function getScrolly()
    {
        return $this->scrolly;
    }

    /**
     * Set 'scrolly' value
     *
     * @param int $value
     */
    public function setScrolly($value = null)
    {
        $this->scrolly = $value;
    }

    /**
     * Check if 'combobox_rgba' has a value
     *
     * @return bool
     */
    public function hasComboboxRgba()
    {
        return $this->combobox_rgba !== null;
    }

    /**
     * Get 'combobox_rgba' value
     *
     * @return int
     */
    public function getComboboxRgba()
    {
        return $this->combobox_rgba;
    }

    /**
     * Set 'combobox_rgba' value
     *
     * @param int $value
     */
    public function setComboboxRgba($value = null)
    {
        $this->combobox_rgba = $value;
    }

    /**
     * Check if 'combobox_wide' has a value
     *
     * @return bool
     */
    public function hasComboboxWide()
    {
        return $this->combobox_wide !== null;
    }

    /**
     * Get 'combobox_wide' value
     *
     * @return int
     */
    public function getComboboxWide()
    {
        return $this->combobox_wide;
    }

    /**
     * Set 'combobox_wide' value
     *
     * @param int $value
     */
    public function setComboboxWide($value = null)
    {
        $this->combobox_wide = $value;
    }

    /**
     * Check if 'combobox_tall' has a value
     *
     * @return bool
     */
    public function hasComboboxTall()
    {
        return $this->combobox_tall !== null;
    }

    /**
     * Get 'combobox_tall' value
     *
     * @return int
     */
    public function getComboboxTall()
    {
        return $this->combobox_tall;
    }

    /**
     * Set 'combobox_tall' value
     *
     * @param int $value
     */
    public function setComboboxTall($value = null)
    {
        $this->combobox_tall = $value;
    }

    /**
     * Check if 'pageserial' has a value
     *
     * @return bool
     */
    public function hasPageserial()
    {
        return $this->pageserial !== null;
    }

    /**
     * Get 'pageserial' value
     *
     * @return int
     */
    public function getPageserial()
    {
        return $this->pageserial;
    }

    /**
     * Set 'pageserial' value
     *
     * @param int $value
     */
    public function setPageserial($value = null)
    {
        $this->pageserial = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'browser_handle' => null,
            'rgba' => null,
            'wide' => null,
            'tall' => null,
            'textureid' => null,
            'updatex' => null,
            'updatey' => null,
            'updatewide' => null,
            'updatetall' => null,
            'scrollx' => null,
            'scrolly' => null,
            'combobox_rgba' => '0',
            'combobox_wide' => '0',
            'combobox_tall' => '0',
            'pageserial' => null
        ], $values);

        $message->setBrowserHandle($values['browser_handle']);
        $message->setRgba($values['rgba']);
        $message->setWide($values['wide']);
        $message->setTall($values['tall']);
        $message->setTextureid($values['textureid']);
        $message->setUpdatex($values['updatex']);
        $message->setUpdatey($values['updatey']);
        $message->setUpdatewide($values['updatewide']);
        $message->setUpdatetall($values['updatetall']);
        $message->setScrollx($values['scrollx']);
        $message->setScrolly($values['scrolly']);
        $message->setComboboxRgba($values['combobox_rgba']);
        $message->setComboboxWide($values['combobox_wide']);
        $message->setComboboxTall($values['combobox_tall']);
        $message->setPageserial($values['pageserial']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgNeedsPaint',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'browser_handle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'rgba',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'wide',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'tall',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'textureid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'updatex',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'updatey',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'updatewide',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'updatetall',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'scrollx',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'scrolly',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'combobox_rgba',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'combobox_wide',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'combobox_tall',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'pageserial',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->browser_handle !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->browser_handle);
        }

        if ($this->rgba !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->rgba);
        }

        if ($this->wide !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->wide);
        }

        if ($this->tall !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->tall);
        }

        if ($this->textureid !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->textureid);
        }

        if ($this->updatex !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->updatex);
        }

        if ($this->updatey !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->updatey);
        }

        if ($this->updatewide !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->updatewide);
        }

        if ($this->updatetall !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->updatetall);
        }

        if ($this->scrollx !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->scrollx);
        }

        if ($this->scrolly !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->scrolly);
        }

        if ($this->combobox_rgba !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->combobox_rgba);
        }

        if ($this->combobox_wide !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->combobox_wide);
        }

        if ($this->combobox_tall !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->combobox_tall);
        }

        if ($this->pageserial !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->pageserial);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->browser_handle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->rgba = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->wide = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->tall = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->textureid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->updatex = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->updatey = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->updatewide = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->updatetall = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->scrollx = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->scrolly = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->combobox_rgba = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->combobox_wide = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->combobox_tall = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->pageserial = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->browser_handle !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->browser_handle);
        }

        if ($this->rgba !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->rgba);
        }

        if ($this->wide !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->wide);
        }

        if ($this->tall !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->tall);
        }

        if ($this->textureid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->textureid);
        }

        if ($this->updatex !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->updatex);
        }

        if ($this->updatey !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->updatey);
        }

        if ($this->updatewide !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->updatewide);
        }

        if ($this->updatetall !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->updatetall);
        }

        if ($this->scrollx !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->scrollx);
        }

        if ($this->scrolly !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->scrolly);
        }

        if ($this->combobox_rgba !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->combobox_rgba);
        }

        if ($this->combobox_wide !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->combobox_wide);
        }

        if ($this->combobox_tall !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->combobox_tall);
        }

        if ($this->pageserial !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pageserial);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->browser_handle = null;
        $this->rgba = null;
        $this->wide = null;
        $this->tall = null;
        $this->textureid = null;
        $this->updatex = null;
        $this->updatey = null;
        $this->updatewide = null;
        $this->updatetall = null;
        $this->scrollx = null;
        $this->scrolly = null;
        $this->combobox_rgba = '0';
        $this->combobox_wide = '0';
        $this->combobox_tall = '0';
        $this->pageserial = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CStrike\HTMLMessages\CMsgNeedsPaint) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->browser_handle = ($message->browser_handle !== null) ? $message->browser_handle : $this->browser_handle;
        $this->rgba = ($message->rgba !== null) ? $message->rgba : $this->rgba;
        $this->wide = ($message->wide !== null) ? $message->wide : $this->wide;
        $this->tall = ($message->tall !== null) ? $message->tall : $this->tall;
        $this->textureid = ($message->textureid !== null) ? $message->textureid : $this->textureid;
        $this->updatex = ($message->updatex !== null) ? $message->updatex : $this->updatex;
        $this->updatey = ($message->updatey !== null) ? $message->updatey : $this->updatey;
        $this->updatewide = ($message->updatewide !== null) ? $message->updatewide : $this->updatewide;
        $this->updatetall = ($message->updatetall !== null) ? $message->updatetall : $this->updatetall;
        $this->scrollx = ($message->scrollx !== null) ? $message->scrollx : $this->scrollx;
        $this->scrolly = ($message->scrolly !== null) ? $message->scrolly : $this->scrolly;
        $this->combobox_rgba = ($message->combobox_rgba !== null) ? $message->combobox_rgba : $this->combobox_rgba;
        $this->combobox_wide = ($message->combobox_wide !== null) ? $message->combobox_wide : $this->combobox_wide;
        $this->combobox_tall = ($message->combobox_tall !== null) ? $message->combobox_tall : $this->combobox_tall;
        $this->pageserial = ($message->pageserial !== null) ? $message->pageserial : $this->pageserial;
    }


}

