<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : cstrike/htmlmessages.proto
 */


namespace SteamKit\Base\GC\CStrike\HTMLMessages;

/**
 * Protobuf message : SteamKit.Base.GC.CStrike.HTMLMessages.CMsgBrowserErrorStrings
 */
class CMsgBrowserErrorStrings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * browser_handle optional uint32 = 1
     *
     * @var int
     */
    protected $browser_handle = null;

    /**
     * title optional string = 2
     *
     * @var string
     */
    protected $title = null;

    /**
     * header optional string = 3
     *
     * @var string
     */
    protected $header = null;

    /**
     * cache_miss optional string = 4
     *
     * @var string
     */
    protected $cache_miss = null;

    /**
     * bad_url optional string = 5
     *
     * @var string
     */
    protected $bad_url = null;

    /**
     * connection_problem optional string = 6
     *
     * @var string
     */
    protected $connection_problem = null;

    /**
     * proxy_problem optional string = 7
     *
     * @var string
     */
    protected $proxy_problem = null;

    /**
     * unknown optional string = 8
     *
     * @var string
     */
    protected $unknown = null;

    /**
     * Check if 'browser_handle' has a value
     *
     * @return bool
     */
    public function hasBrowserHandle()
    {
        return $this->browser_handle !== null;
    }

    /**
     * Get 'browser_handle' value
     *
     * @return int
     */
    public function getBrowserHandle()
    {
        return $this->browser_handle;
    }

    /**
     * Set 'browser_handle' value
     *
     * @param int $value
     */
    public function setBrowserHandle($value = null)
    {
        $this->browser_handle = $value;
    }

    /**
     * Check if 'title' has a value
     *
     * @return bool
     */
    public function hasTitle()
    {
        return $this->title !== null;
    }

    /**
     * Get 'title' value
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set 'title' value
     *
     * @param string $value
     */
    public function setTitle($value = null)
    {
        $this->title = $value;
    }

    /**
     * Check if 'header' has a value
     *
     * @return bool
     */
    public function hasHeader()
    {
        return $this->header !== null;
    }

    /**
     * Get 'header' value
     *
     * @return string
     */
    public function getHeader()
    {
        return $this->header;
    }

    /**
     * Set 'header' value
     *
     * @param string $value
     */
    public function setHeader($value = null)
    {
        $this->header = $value;
    }

    /**
     * Check if 'cache_miss' has a value
     *
     * @return bool
     */
    public function hasCacheMiss()
    {
        return $this->cache_miss !== null;
    }

    /**
     * Get 'cache_miss' value
     *
     * @return string
     */
    public function getCacheMiss()
    {
        return $this->cache_miss;
    }

    /**
     * Set 'cache_miss' value
     *
     * @param string $value
     */
    public function setCacheMiss($value = null)
    {
        $this->cache_miss = $value;
    }

    /**
     * Check if 'bad_url' has a value
     *
     * @return bool
     */
    public function hasBadUrl()
    {
        return $this->bad_url !== null;
    }

    /**
     * Get 'bad_url' value
     *
     * @return string
     */
    public function getBadUrl()
    {
        return $this->bad_url;
    }

    /**
     * Set 'bad_url' value
     *
     * @param string $value
     */
    public function setBadUrl($value = null)
    {
        $this->bad_url = $value;
    }

    /**
     * Check if 'connection_problem' has a value
     *
     * @return bool
     */
    public function hasConnectionProblem()
    {
        return $this->connection_problem !== null;
    }

    /**
     * Get 'connection_problem' value
     *
     * @return string
     */
    public function getConnectionProblem()
    {
        return $this->connection_problem;
    }

    /**
     * Set 'connection_problem' value
     *
     * @param string $value
     */
    public function setConnectionProblem($value = null)
    {
        $this->connection_problem = $value;
    }

    /**
     * Check if 'proxy_problem' has a value
     *
     * @return bool
     */
    public function hasProxyProblem()
    {
        return $this->proxy_problem !== null;
    }

    /**
     * Get 'proxy_problem' value
     *
     * @return string
     */
    public function getProxyProblem()
    {
        return $this->proxy_problem;
    }

    /**
     * Set 'proxy_problem' value
     *
     * @param string $value
     */
    public function setProxyProblem($value = null)
    {
        $this->proxy_problem = $value;
    }

    /**
     * Check if 'unknown' has a value
     *
     * @return bool
     */
    public function hasUnknown()
    {
        return $this->unknown !== null;
    }

    /**
     * Get 'unknown' value
     *
     * @return string
     */
    public function getUnknown()
    {
        return $this->unknown;
    }

    /**
     * Set 'unknown' value
     *
     * @param string $value
     */
    public function setUnknown($value = null)
    {
        $this->unknown = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'browser_handle' => null,
            'title' => null,
            'header' => null,
            'cache_miss' => null,
            'bad_url' => null,
            'connection_problem' => null,
            'proxy_problem' => null,
            'unknown' => null
        ], $values);

        $message->setBrowserHandle($values['browser_handle']);
        $message->setTitle($values['title']);
        $message->setHeader($values['header']);
        $message->setCacheMiss($values['cache_miss']);
        $message->setBadUrl($values['bad_url']);
        $message->setConnectionProblem($values['connection_problem']);
        $message->setProxyProblem($values['proxy_problem']);
        $message->setUnknown($values['unknown']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgBrowserErrorStrings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'browser_handle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'title',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'header',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'cache_miss',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'bad_url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'connection_problem',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'proxy_problem',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'unknown',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->browser_handle !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->browser_handle);
        }

        if ($this->title !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->title);
        }

        if ($this->header !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->header);
        }

        if ($this->cache_miss !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->cache_miss);
        }

        if ($this->bad_url !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->bad_url);
        }

        if ($this->connection_problem !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->connection_problem);
        }

        if ($this->proxy_problem !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->proxy_problem);
        }

        if ($this->unknown !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->unknown);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->browser_handle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->title = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->header = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->cache_miss = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->bad_url = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->connection_problem = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->proxy_problem = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->unknown = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->browser_handle !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->browser_handle);
        }

        if ($this->title !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->title);
        }

        if ($this->header !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->header);
        }

        if ($this->cache_miss !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->cache_miss);
        }

        if ($this->bad_url !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->bad_url);
        }

        if ($this->connection_problem !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->connection_problem);
        }

        if ($this->proxy_problem !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->proxy_problem);
        }

        if ($this->unknown !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->unknown);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->browser_handle = null;
        $this->title = null;
        $this->header = null;
        $this->cache_miss = null;
        $this->bad_url = null;
        $this->connection_problem = null;
        $this->proxy_problem = null;
        $this->unknown = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CStrike\HTMLMessages\CMsgBrowserErrorStrings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->browser_handle = ($message->browser_handle !== null) ? $message->browser_handle : $this->browser_handle;
        $this->title = ($message->title !== null) ? $message->title : $this->title;
        $this->header = ($message->header !== null) ? $message->header : $this->header;
        $this->cache_miss = ($message->cache_miss !== null) ? $message->cache_miss : $this->cache_miss;
        $this->bad_url = ($message->bad_url !== null) ? $message->bad_url : $this->bad_url;
        $this->connection_problem = ($message->connection_problem !== null) ? $message->connection_problem : $this->connection_problem;
        $this->proxy_problem = ($message->proxy_problem !== null) ? $message->proxy_problem : $this->proxy_problem;
        $this->unknown = ($message->unknown !== null) ? $message->unknown : $this->unknown;
    }


}

