<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : cstrike/htmlmessages.proto
 */


namespace SteamKit\Base\GC\CStrike\HTMLMessages;

/**
 * Protobuf message :
 * SteamKit.Base.GC.CStrike.HTMLMessages.CMsgZoomToElementAtPositionResponse
 */
class CMsgZoomToElementAtPositionResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * browser_handle optional uint32 = 1
     *
     * @var int
     */
    protected $browser_handle = null;

    /**
     * initial_x optional sint32 = 2
     *
     * @var int
     */
    protected $initial_x = null;

    /**
     * initial_y optional sint32 = 3
     *
     * @var int
     */
    protected $initial_y = null;

    /**
     * initial_width optional uint32 = 4
     *
     * @var int
     */
    protected $initial_width = null;

    /**
     * initial_height optional uint32 = 5
     *
     * @var int
     */
    protected $initial_height = null;

    /**
     * final_x optional sint32 = 6
     *
     * @var int
     */
    protected $final_x = null;

    /**
     * final_y optional sint32 = 7
     *
     * @var int
     */
    protected $final_y = null;

    /**
     * final_width optional uint32 = 8
     *
     * @var int
     */
    protected $final_width = null;

    /**
     * final_height optional uint32 = 9
     *
     * @var int
     */
    protected $final_height = null;

    /**
     * zoom optional float = 10
     *
     * @var float
     */
    protected $zoom = null;

    /**
     * Check if 'browser_handle' has a value
     *
     * @return bool
     */
    public function hasBrowserHandle()
    {
        return $this->browser_handle !== null;
    }

    /**
     * Get 'browser_handle' value
     *
     * @return int
     */
    public function getBrowserHandle()
    {
        return $this->browser_handle;
    }

    /**
     * Set 'browser_handle' value
     *
     * @param int $value
     */
    public function setBrowserHandle($value = null)
    {
        $this->browser_handle = $value;
    }

    /**
     * Check if 'initial_x' has a value
     *
     * @return bool
     */
    public function hasInitialX()
    {
        return $this->initial_x !== null;
    }

    /**
     * Get 'initial_x' value
     *
     * @return int
     */
    public function getInitialX()
    {
        return $this->initial_x;
    }

    /**
     * Set 'initial_x' value
     *
     * @param int $value
     */
    public function setInitialX($value = null)
    {
        $this->initial_x = $value;
    }

    /**
     * Check if 'initial_y' has a value
     *
     * @return bool
     */
    public function hasInitialY()
    {
        return $this->initial_y !== null;
    }

    /**
     * Get 'initial_y' value
     *
     * @return int
     */
    public function getInitialY()
    {
        return $this->initial_y;
    }

    /**
     * Set 'initial_y' value
     *
     * @param int $value
     */
    public function setInitialY($value = null)
    {
        $this->initial_y = $value;
    }

    /**
     * Check if 'initial_width' has a value
     *
     * @return bool
     */
    public function hasInitialWidth()
    {
        return $this->initial_width !== null;
    }

    /**
     * Get 'initial_width' value
     *
     * @return int
     */
    public function getInitialWidth()
    {
        return $this->initial_width;
    }

    /**
     * Set 'initial_width' value
     *
     * @param int $value
     */
    public function setInitialWidth($value = null)
    {
        $this->initial_width = $value;
    }

    /**
     * Check if 'initial_height' has a value
     *
     * @return bool
     */
    public function hasInitialHeight()
    {
        return $this->initial_height !== null;
    }

    /**
     * Get 'initial_height' value
     *
     * @return int
     */
    public function getInitialHeight()
    {
        return $this->initial_height;
    }

    /**
     * Set 'initial_height' value
     *
     * @param int $value
     */
    public function setInitialHeight($value = null)
    {
        $this->initial_height = $value;
    }

    /**
     * Check if 'final_x' has a value
     *
     * @return bool
     */
    public function hasFinalX()
    {
        return $this->final_x !== null;
    }

    /**
     * Get 'final_x' value
     *
     * @return int
     */
    public function getFinalX()
    {
        return $this->final_x;
    }

    /**
     * Set 'final_x' value
     *
     * @param int $value
     */
    public function setFinalX($value = null)
    {
        $this->final_x = $value;
    }

    /**
     * Check if 'final_y' has a value
     *
     * @return bool
     */
    public function hasFinalY()
    {
        return $this->final_y !== null;
    }

    /**
     * Get 'final_y' value
     *
     * @return int
     */
    public function getFinalY()
    {
        return $this->final_y;
    }

    /**
     * Set 'final_y' value
     *
     * @param int $value
     */
    public function setFinalY($value = null)
    {
        $this->final_y = $value;
    }

    /**
     * Check if 'final_width' has a value
     *
     * @return bool
     */
    public function hasFinalWidth()
    {
        return $this->final_width !== null;
    }

    /**
     * Get 'final_width' value
     *
     * @return int
     */
    public function getFinalWidth()
    {
        return $this->final_width;
    }

    /**
     * Set 'final_width' value
     *
     * @param int $value
     */
    public function setFinalWidth($value = null)
    {
        $this->final_width = $value;
    }

    /**
     * Check if 'final_height' has a value
     *
     * @return bool
     */
    public function hasFinalHeight()
    {
        return $this->final_height !== null;
    }

    /**
     * Get 'final_height' value
     *
     * @return int
     */
    public function getFinalHeight()
    {
        return $this->final_height;
    }

    /**
     * Set 'final_height' value
     *
     * @param int $value
     */
    public function setFinalHeight($value = null)
    {
        $this->final_height = $value;
    }

    /**
     * Check if 'zoom' has a value
     *
     * @return bool
     */
    public function hasZoom()
    {
        return $this->zoom !== null;
    }

    /**
     * Get 'zoom' value
     *
     * @return float
     */
    public function getZoom()
    {
        return $this->zoom;
    }

    /**
     * Set 'zoom' value
     *
     * @param float $value
     */
    public function setZoom($value = null)
    {
        $this->zoom = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'browser_handle' => null,
            'initial_x' => null,
            'initial_y' => null,
            'initial_width' => null,
            'initial_height' => null,
            'final_x' => null,
            'final_y' => null,
            'final_width' => null,
            'final_height' => null,
            'zoom' => null
        ], $values);

        $message->setBrowserHandle($values['browser_handle']);
        $message->setInitialX($values['initial_x']);
        $message->setInitialY($values['initial_y']);
        $message->setInitialWidth($values['initial_width']);
        $message->setInitialHeight($values['initial_height']);
        $message->setFinalX($values['final_x']);
        $message->setFinalY($values['final_y']);
        $message->setFinalWidth($values['final_width']);
        $message->setFinalHeight($values['final_height']);
        $message->setZoom($values['zoom']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgZoomToElementAtPositionResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'browser_handle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'initial_x',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'initial_y',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'initial_width',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'initial_height',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'final_x',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'final_y',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'final_width',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'final_height',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'zoom',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->browser_handle !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->browser_handle);
        }

        if ($this->initial_x !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeZigzag32($stream, $this->initial_x);
        }

        if ($this->initial_y !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeZigzag32($stream, $this->initial_y);
        }

        if ($this->initial_width !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->initial_width);
        }

        if ($this->initial_height !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->initial_height);
        }

        if ($this->final_x !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeZigzag32($stream, $this->final_x);
        }

        if ($this->final_y !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeZigzag32($stream, $this->final_y);
        }

        if ($this->final_width !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->final_width);
        }

        if ($this->final_height !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->final_height);
        }

        if ($this->zoom !== null) {
            $writer->writeVarint($stream, 85);
            $writer->writeFloat($stream, $this->zoom);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->browser_handle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->initial_x = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->initial_y = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->initial_width = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->initial_height = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->final_x = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->final_y = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->final_width = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->final_height = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->zoom = $reader->readFloat($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->browser_handle !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->browser_handle);
        }

        if ($this->initial_x !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->initial_x);
        }

        if ($this->initial_y !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->initial_y);
        }

        if ($this->initial_width !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->initial_width);
        }

        if ($this->initial_height !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->initial_height);
        }

        if ($this->final_x !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->final_x);
        }

        if ($this->final_y !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->final_y);
        }

        if ($this->final_width !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->final_width);
        }

        if ($this->final_height !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->final_height);
        }

        if ($this->zoom !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->browser_handle = null;
        $this->initial_x = null;
        $this->initial_y = null;
        $this->initial_width = null;
        $this->initial_height = null;
        $this->final_x = null;
        $this->final_y = null;
        $this->final_width = null;
        $this->final_height = null;
        $this->zoom = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CStrike\HTMLMessages\CMsgZoomToElementAtPositionResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->browser_handle = ($message->browser_handle !== null) ? $message->browser_handle : $this->browser_handle;
        $this->initial_x = ($message->initial_x !== null) ? $message->initial_x : $this->initial_x;
        $this->initial_y = ($message->initial_y !== null) ? $message->initial_y : $this->initial_y;
        $this->initial_width = ($message->initial_width !== null) ? $message->initial_width : $this->initial_width;
        $this->initial_height = ($message->initial_height !== null) ? $message->initial_height : $this->initial_height;
        $this->final_x = ($message->final_x !== null) ? $message->final_x : $this->final_x;
        $this->final_y = ($message->final_y !== null) ? $message->final_y : $this->final_y;
        $this->final_width = ($message->final_width !== null) ? $message->final_width : $this->final_width;
        $this->final_height = ($message->final_height !== null) ? $message->final_height : $this->final_height;
        $this->zoom = ($message->zoom !== null) ? $message->zoom : $this->zoom;
    }


}

