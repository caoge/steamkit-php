<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steamdatagram_messages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamDatagramMsg;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramLinkLifetimeStats
 */
class CMsgSteamDatagramLinkLifetimeStats extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * packets_sent optional uint64 = 3
     *
     * @var int
     */
    protected $packets_sent = null;

    /**
     * kb_sent optional uint64 = 4
     *
     * @var int
     */
    protected $kb_sent = null;

    /**
     * packets_recv optional uint64 = 5
     *
     * @var int
     */
    protected $packets_recv = null;

    /**
     * kb_recv optional uint64 = 6
     *
     * @var int
     */
    protected $kb_recv = null;

    /**
     * packets_recv_sequenced optional uint64 = 7
     *
     * @var int
     */
    protected $packets_recv_sequenced = null;

    /**
     * packets_recv_dropped optional uint64 = 8
     *
     * @var int
     */
    protected $packets_recv_dropped = null;

    /**
     * packets_recv_out_of_order optional uint64 = 9
     *
     * @var int
     */
    protected $packets_recv_out_of_order = null;

    /**
     * packets_recv_duplicate optional uint64 = 10
     *
     * @var int
     */
    protected $packets_recv_duplicate = null;

    /**
     * packets_recv_lurch optional uint64 = 11
     *
     * @var int
     */
    protected $packets_recv_lurch = null;

    /**
     * quality_histogram_100 optional uint32 = 21
     *
     * @var int
     */
    protected $quality_histogram_100 = null;

    /**
     * quality_histogram_99 optional uint32 = 22
     *
     * @var int
     */
    protected $quality_histogram_99 = null;

    /**
     * quality_histogram_97 optional uint32 = 23
     *
     * @var int
     */
    protected $quality_histogram_97 = null;

    /**
     * quality_histogram_95 optional uint32 = 24
     *
     * @var int
     */
    protected $quality_histogram_95 = null;

    /**
     * quality_histogram_90 optional uint32 = 25
     *
     * @var int
     */
    protected $quality_histogram_90 = null;

    /**
     * quality_histogram_75 optional uint32 = 26
     *
     * @var int
     */
    protected $quality_histogram_75 = null;

    /**
     * quality_histogram_50 optional uint32 = 27
     *
     * @var int
     */
    protected $quality_histogram_50 = null;

    /**
     * quality_histogram_1 optional uint32 = 28
     *
     * @var int
     */
    protected $quality_histogram_1 = null;

    /**
     * quality_histogram_dead optional uint32 = 29
     *
     * @var int
     */
    protected $quality_histogram_dead = null;

    /**
     * quality_ntile_2nd optional uint32 = 30
     *
     * @var int
     */
    protected $quality_ntile_2nd = null;

    /**
     * quality_ntile_5th optional uint32 = 31
     *
     * @var int
     */
    protected $quality_ntile_5th = null;

    /**
     * quality_ntile_25th optional uint32 = 32
     *
     * @var int
     */
    protected $quality_ntile_25th = null;

    /**
     * quality_ntile_50th optional uint32 = 33
     *
     * @var int
     */
    protected $quality_ntile_50th = null;

    /**
     * ping_histogram_25 optional uint32 = 41
     *
     * @var int
     */
    protected $ping_histogram_25 = null;

    /**
     * ping_histogram_50 optional uint32 = 42
     *
     * @var int
     */
    protected $ping_histogram_50 = null;

    /**
     * ping_histogram_75 optional uint32 = 43
     *
     * @var int
     */
    protected $ping_histogram_75 = null;

    /**
     * ping_histogram_100 optional uint32 = 44
     *
     * @var int
     */
    protected $ping_histogram_100 = null;

    /**
     * ping_histogram_125 optional uint32 = 45
     *
     * @var int
     */
    protected $ping_histogram_125 = null;

    /**
     * ping_histogram_150 optional uint32 = 46
     *
     * @var int
     */
    protected $ping_histogram_150 = null;

    /**
     * ping_histogram_200 optional uint32 = 47
     *
     * @var int
     */
    protected $ping_histogram_200 = null;

    /**
     * ping_histogram_300 optional uint32 = 48
     *
     * @var int
     */
    protected $ping_histogram_300 = null;

    /**
     * ping_histogram_max optional uint32 = 49
     *
     * @var int
     */
    protected $ping_histogram_max = null;

    /**
     * ping_ntile_5th optional uint32 = 50
     *
     * @var int
     */
    protected $ping_ntile_5th = null;

    /**
     * ping_ntile_50th optional uint32 = 51
     *
     * @var int
     */
    protected $ping_ntile_50th = null;

    /**
     * ping_ntile_75th optional uint32 = 52
     *
     * @var int
     */
    protected $ping_ntile_75th = null;

    /**
     * ping_ntile_95th optional uint32 = 53
     *
     * @var int
     */
    protected $ping_ntile_95th = null;

    /**
     * ping_ntile_98th optional uint32 = 54
     *
     * @var int
     */
    protected $ping_ntile_98th = null;

    /**
     * jitter_histogram_negligible optional uint32 = 61
     *
     * @var int
     */
    protected $jitter_histogram_negligible = null;

    /**
     * jitter_histogram_1 optional uint32 = 62
     *
     * @var int
     */
    protected $jitter_histogram_1 = null;

    /**
     * jitter_histogram_2 optional uint32 = 63
     *
     * @var int
     */
    protected $jitter_histogram_2 = null;

    /**
     * jitter_histogram_5 optional uint32 = 64
     *
     * @var int
     */
    protected $jitter_histogram_5 = null;

    /**
     * jitter_histogram_10 optional uint32 = 65
     *
     * @var int
     */
    protected $jitter_histogram_10 = null;

    /**
     * jitter_histogram_20 optional uint32 = 66
     *
     * @var int
     */
    protected $jitter_histogram_20 = null;

    /**
     * Check if 'packets_sent' has a value
     *
     * @return bool
     */
    public function hasPacketsSent()
    {
        return $this->packets_sent !== null;
    }

    /**
     * Get 'packets_sent' value
     *
     * @return int
     */
    public function getPacketsSent()
    {
        return $this->packets_sent;
    }

    /**
     * Set 'packets_sent' value
     *
     * @param int $value
     */
    public function setPacketsSent($value = null)
    {
        $this->packets_sent = $value;
    }

    /**
     * Check if 'kb_sent' has a value
     *
     * @return bool
     */
    public function hasKbSent()
    {
        return $this->kb_sent !== null;
    }

    /**
     * Get 'kb_sent' value
     *
     * @return int
     */
    public function getKbSent()
    {
        return $this->kb_sent;
    }

    /**
     * Set 'kb_sent' value
     *
     * @param int $value
     */
    public function setKbSent($value = null)
    {
        $this->kb_sent = $value;
    }

    /**
     * Check if 'packets_recv' has a value
     *
     * @return bool
     */
    public function hasPacketsRecv()
    {
        return $this->packets_recv !== null;
    }

    /**
     * Get 'packets_recv' value
     *
     * @return int
     */
    public function getPacketsRecv()
    {
        return $this->packets_recv;
    }

    /**
     * Set 'packets_recv' value
     *
     * @param int $value
     */
    public function setPacketsRecv($value = null)
    {
        $this->packets_recv = $value;
    }

    /**
     * Check if 'kb_recv' has a value
     *
     * @return bool
     */
    public function hasKbRecv()
    {
        return $this->kb_recv !== null;
    }

    /**
     * Get 'kb_recv' value
     *
     * @return int
     */
    public function getKbRecv()
    {
        return $this->kb_recv;
    }

    /**
     * Set 'kb_recv' value
     *
     * @param int $value
     */
    public function setKbRecv($value = null)
    {
        $this->kb_recv = $value;
    }

    /**
     * Check if 'packets_recv_sequenced' has a value
     *
     * @return bool
     */
    public function hasPacketsRecvSequenced()
    {
        return $this->packets_recv_sequenced !== null;
    }

    /**
     * Get 'packets_recv_sequenced' value
     *
     * @return int
     */
    public function getPacketsRecvSequenced()
    {
        return $this->packets_recv_sequenced;
    }

    /**
     * Set 'packets_recv_sequenced' value
     *
     * @param int $value
     */
    public function setPacketsRecvSequenced($value = null)
    {
        $this->packets_recv_sequenced = $value;
    }

    /**
     * Check if 'packets_recv_dropped' has a value
     *
     * @return bool
     */
    public function hasPacketsRecvDropped()
    {
        return $this->packets_recv_dropped !== null;
    }

    /**
     * Get 'packets_recv_dropped' value
     *
     * @return int
     */
    public function getPacketsRecvDropped()
    {
        return $this->packets_recv_dropped;
    }

    /**
     * Set 'packets_recv_dropped' value
     *
     * @param int $value
     */
    public function setPacketsRecvDropped($value = null)
    {
        $this->packets_recv_dropped = $value;
    }

    /**
     * Check if 'packets_recv_out_of_order' has a value
     *
     * @return bool
     */
    public function hasPacketsRecvOutOfOrder()
    {
        return $this->packets_recv_out_of_order !== null;
    }

    /**
     * Get 'packets_recv_out_of_order' value
     *
     * @return int
     */
    public function getPacketsRecvOutOfOrder()
    {
        return $this->packets_recv_out_of_order;
    }

    /**
     * Set 'packets_recv_out_of_order' value
     *
     * @param int $value
     */
    public function setPacketsRecvOutOfOrder($value = null)
    {
        $this->packets_recv_out_of_order = $value;
    }

    /**
     * Check if 'packets_recv_duplicate' has a value
     *
     * @return bool
     */
    public function hasPacketsRecvDuplicate()
    {
        return $this->packets_recv_duplicate !== null;
    }

    /**
     * Get 'packets_recv_duplicate' value
     *
     * @return int
     */
    public function getPacketsRecvDuplicate()
    {
        return $this->packets_recv_duplicate;
    }

    /**
     * Set 'packets_recv_duplicate' value
     *
     * @param int $value
     */
    public function setPacketsRecvDuplicate($value = null)
    {
        $this->packets_recv_duplicate = $value;
    }

    /**
     * Check if 'packets_recv_lurch' has a value
     *
     * @return bool
     */
    public function hasPacketsRecvLurch()
    {
        return $this->packets_recv_lurch !== null;
    }

    /**
     * Get 'packets_recv_lurch' value
     *
     * @return int
     */
    public function getPacketsRecvLurch()
    {
        return $this->packets_recv_lurch;
    }

    /**
     * Set 'packets_recv_lurch' value
     *
     * @param int $value
     */
    public function setPacketsRecvLurch($value = null)
    {
        $this->packets_recv_lurch = $value;
    }

    /**
     * Check if 'quality_histogram_100' has a value
     *
     * @return bool
     */
    public function hasQualityHistogram100()
    {
        return $this->quality_histogram_100 !== null;
    }

    /**
     * Get 'quality_histogram_100' value
     *
     * @return int
     */
    public function getQualityHistogram100()
    {
        return $this->quality_histogram_100;
    }

    /**
     * Set 'quality_histogram_100' value
     *
     * @param int $value
     */
    public function setQualityHistogram100($value = null)
    {
        $this->quality_histogram_100 = $value;
    }

    /**
     * Check if 'quality_histogram_99' has a value
     *
     * @return bool
     */
    public function hasQualityHistogram99()
    {
        return $this->quality_histogram_99 !== null;
    }

    /**
     * Get 'quality_histogram_99' value
     *
     * @return int
     */
    public function getQualityHistogram99()
    {
        return $this->quality_histogram_99;
    }

    /**
     * Set 'quality_histogram_99' value
     *
     * @param int $value
     */
    public function setQualityHistogram99($value = null)
    {
        $this->quality_histogram_99 = $value;
    }

    /**
     * Check if 'quality_histogram_97' has a value
     *
     * @return bool
     */
    public function hasQualityHistogram97()
    {
        return $this->quality_histogram_97 !== null;
    }

    /**
     * Get 'quality_histogram_97' value
     *
     * @return int
     */
    public function getQualityHistogram97()
    {
        return $this->quality_histogram_97;
    }

    /**
     * Set 'quality_histogram_97' value
     *
     * @param int $value
     */
    public function setQualityHistogram97($value = null)
    {
        $this->quality_histogram_97 = $value;
    }

    /**
     * Check if 'quality_histogram_95' has a value
     *
     * @return bool
     */
    public function hasQualityHistogram95()
    {
        return $this->quality_histogram_95 !== null;
    }

    /**
     * Get 'quality_histogram_95' value
     *
     * @return int
     */
    public function getQualityHistogram95()
    {
        return $this->quality_histogram_95;
    }

    /**
     * Set 'quality_histogram_95' value
     *
     * @param int $value
     */
    public function setQualityHistogram95($value = null)
    {
        $this->quality_histogram_95 = $value;
    }

    /**
     * Check if 'quality_histogram_90' has a value
     *
     * @return bool
     */
    public function hasQualityHistogram90()
    {
        return $this->quality_histogram_90 !== null;
    }

    /**
     * Get 'quality_histogram_90' value
     *
     * @return int
     */
    public function getQualityHistogram90()
    {
        return $this->quality_histogram_90;
    }

    /**
     * Set 'quality_histogram_90' value
     *
     * @param int $value
     */
    public function setQualityHistogram90($value = null)
    {
        $this->quality_histogram_90 = $value;
    }

    /**
     * Check if 'quality_histogram_75' has a value
     *
     * @return bool
     */
    public function hasQualityHistogram75()
    {
        return $this->quality_histogram_75 !== null;
    }

    /**
     * Get 'quality_histogram_75' value
     *
     * @return int
     */
    public function getQualityHistogram75()
    {
        return $this->quality_histogram_75;
    }

    /**
     * Set 'quality_histogram_75' value
     *
     * @param int $value
     */
    public function setQualityHistogram75($value = null)
    {
        $this->quality_histogram_75 = $value;
    }

    /**
     * Check if 'quality_histogram_50' has a value
     *
     * @return bool
     */
    public function hasQualityHistogram50()
    {
        return $this->quality_histogram_50 !== null;
    }

    /**
     * Get 'quality_histogram_50' value
     *
     * @return int
     */
    public function getQualityHistogram50()
    {
        return $this->quality_histogram_50;
    }

    /**
     * Set 'quality_histogram_50' value
     *
     * @param int $value
     */
    public function setQualityHistogram50($value = null)
    {
        $this->quality_histogram_50 = $value;
    }

    /**
     * Check if 'quality_histogram_1' has a value
     *
     * @return bool
     */
    public function hasQualityHistogram1()
    {
        return $this->quality_histogram_1 !== null;
    }

    /**
     * Get 'quality_histogram_1' value
     *
     * @return int
     */
    public function getQualityHistogram1()
    {
        return $this->quality_histogram_1;
    }

    /**
     * Set 'quality_histogram_1' value
     *
     * @param int $value
     */
    public function setQualityHistogram1($value = null)
    {
        $this->quality_histogram_1 = $value;
    }

    /**
     * Check if 'quality_histogram_dead' has a value
     *
     * @return bool
     */
    public function hasQualityHistogramDead()
    {
        return $this->quality_histogram_dead !== null;
    }

    /**
     * Get 'quality_histogram_dead' value
     *
     * @return int
     */
    public function getQualityHistogramDead()
    {
        return $this->quality_histogram_dead;
    }

    /**
     * Set 'quality_histogram_dead' value
     *
     * @param int $value
     */
    public function setQualityHistogramDead($value = null)
    {
        $this->quality_histogram_dead = $value;
    }

    /**
     * Check if 'quality_ntile_2nd' has a value
     *
     * @return bool
     */
    public function hasQualityNtile2nd()
    {
        return $this->quality_ntile_2nd !== null;
    }

    /**
     * Get 'quality_ntile_2nd' value
     *
     * @return int
     */
    public function getQualityNtile2nd()
    {
        return $this->quality_ntile_2nd;
    }

    /**
     * Set 'quality_ntile_2nd' value
     *
     * @param int $value
     */
    public function setQualityNtile2nd($value = null)
    {
        $this->quality_ntile_2nd = $value;
    }

    /**
     * Check if 'quality_ntile_5th' has a value
     *
     * @return bool
     */
    public function hasQualityNtile5th()
    {
        return $this->quality_ntile_5th !== null;
    }

    /**
     * Get 'quality_ntile_5th' value
     *
     * @return int
     */
    public function getQualityNtile5th()
    {
        return $this->quality_ntile_5th;
    }

    /**
     * Set 'quality_ntile_5th' value
     *
     * @param int $value
     */
    public function setQualityNtile5th($value = null)
    {
        $this->quality_ntile_5th = $value;
    }

    /**
     * Check if 'quality_ntile_25th' has a value
     *
     * @return bool
     */
    public function hasQualityNtile25th()
    {
        return $this->quality_ntile_25th !== null;
    }

    /**
     * Get 'quality_ntile_25th' value
     *
     * @return int
     */
    public function getQualityNtile25th()
    {
        return $this->quality_ntile_25th;
    }

    /**
     * Set 'quality_ntile_25th' value
     *
     * @param int $value
     */
    public function setQualityNtile25th($value = null)
    {
        $this->quality_ntile_25th = $value;
    }

    /**
     * Check if 'quality_ntile_50th' has a value
     *
     * @return bool
     */
    public function hasQualityNtile50th()
    {
        return $this->quality_ntile_50th !== null;
    }

    /**
     * Get 'quality_ntile_50th' value
     *
     * @return int
     */
    public function getQualityNtile50th()
    {
        return $this->quality_ntile_50th;
    }

    /**
     * Set 'quality_ntile_50th' value
     *
     * @param int $value
     */
    public function setQualityNtile50th($value = null)
    {
        $this->quality_ntile_50th = $value;
    }

    /**
     * Check if 'ping_histogram_25' has a value
     *
     * @return bool
     */
    public function hasPingHistogram25()
    {
        return $this->ping_histogram_25 !== null;
    }

    /**
     * Get 'ping_histogram_25' value
     *
     * @return int
     */
    public function getPingHistogram25()
    {
        return $this->ping_histogram_25;
    }

    /**
     * Set 'ping_histogram_25' value
     *
     * @param int $value
     */
    public function setPingHistogram25($value = null)
    {
        $this->ping_histogram_25 = $value;
    }

    /**
     * Check if 'ping_histogram_50' has a value
     *
     * @return bool
     */
    public function hasPingHistogram50()
    {
        return $this->ping_histogram_50 !== null;
    }

    /**
     * Get 'ping_histogram_50' value
     *
     * @return int
     */
    public function getPingHistogram50()
    {
        return $this->ping_histogram_50;
    }

    /**
     * Set 'ping_histogram_50' value
     *
     * @param int $value
     */
    public function setPingHistogram50($value = null)
    {
        $this->ping_histogram_50 = $value;
    }

    /**
     * Check if 'ping_histogram_75' has a value
     *
     * @return bool
     */
    public function hasPingHistogram75()
    {
        return $this->ping_histogram_75 !== null;
    }

    /**
     * Get 'ping_histogram_75' value
     *
     * @return int
     */
    public function getPingHistogram75()
    {
        return $this->ping_histogram_75;
    }

    /**
     * Set 'ping_histogram_75' value
     *
     * @param int $value
     */
    public function setPingHistogram75($value = null)
    {
        $this->ping_histogram_75 = $value;
    }

    /**
     * Check if 'ping_histogram_100' has a value
     *
     * @return bool
     */
    public function hasPingHistogram100()
    {
        return $this->ping_histogram_100 !== null;
    }

    /**
     * Get 'ping_histogram_100' value
     *
     * @return int
     */
    public function getPingHistogram100()
    {
        return $this->ping_histogram_100;
    }

    /**
     * Set 'ping_histogram_100' value
     *
     * @param int $value
     */
    public function setPingHistogram100($value = null)
    {
        $this->ping_histogram_100 = $value;
    }

    /**
     * Check if 'ping_histogram_125' has a value
     *
     * @return bool
     */
    public function hasPingHistogram125()
    {
        return $this->ping_histogram_125 !== null;
    }

    /**
     * Get 'ping_histogram_125' value
     *
     * @return int
     */
    public function getPingHistogram125()
    {
        return $this->ping_histogram_125;
    }

    /**
     * Set 'ping_histogram_125' value
     *
     * @param int $value
     */
    public function setPingHistogram125($value = null)
    {
        $this->ping_histogram_125 = $value;
    }

    /**
     * Check if 'ping_histogram_150' has a value
     *
     * @return bool
     */
    public function hasPingHistogram150()
    {
        return $this->ping_histogram_150 !== null;
    }

    /**
     * Get 'ping_histogram_150' value
     *
     * @return int
     */
    public function getPingHistogram150()
    {
        return $this->ping_histogram_150;
    }

    /**
     * Set 'ping_histogram_150' value
     *
     * @param int $value
     */
    public function setPingHistogram150($value = null)
    {
        $this->ping_histogram_150 = $value;
    }

    /**
     * Check if 'ping_histogram_200' has a value
     *
     * @return bool
     */
    public function hasPingHistogram200()
    {
        return $this->ping_histogram_200 !== null;
    }

    /**
     * Get 'ping_histogram_200' value
     *
     * @return int
     */
    public function getPingHistogram200()
    {
        return $this->ping_histogram_200;
    }

    /**
     * Set 'ping_histogram_200' value
     *
     * @param int $value
     */
    public function setPingHistogram200($value = null)
    {
        $this->ping_histogram_200 = $value;
    }

    /**
     * Check if 'ping_histogram_300' has a value
     *
     * @return bool
     */
    public function hasPingHistogram300()
    {
        return $this->ping_histogram_300 !== null;
    }

    /**
     * Get 'ping_histogram_300' value
     *
     * @return int
     */
    public function getPingHistogram300()
    {
        return $this->ping_histogram_300;
    }

    /**
     * Set 'ping_histogram_300' value
     *
     * @param int $value
     */
    public function setPingHistogram300($value = null)
    {
        $this->ping_histogram_300 = $value;
    }

    /**
     * Check if 'ping_histogram_max' has a value
     *
     * @return bool
     */
    public function hasPingHistogramMax()
    {
        return $this->ping_histogram_max !== null;
    }

    /**
     * Get 'ping_histogram_max' value
     *
     * @return int
     */
    public function getPingHistogramMax()
    {
        return $this->ping_histogram_max;
    }

    /**
     * Set 'ping_histogram_max' value
     *
     * @param int $value
     */
    public function setPingHistogramMax($value = null)
    {
        $this->ping_histogram_max = $value;
    }

    /**
     * Check if 'ping_ntile_5th' has a value
     *
     * @return bool
     */
    public function hasPingNtile5th()
    {
        return $this->ping_ntile_5th !== null;
    }

    /**
     * Get 'ping_ntile_5th' value
     *
     * @return int
     */
    public function getPingNtile5th()
    {
        return $this->ping_ntile_5th;
    }

    /**
     * Set 'ping_ntile_5th' value
     *
     * @param int $value
     */
    public function setPingNtile5th($value = null)
    {
        $this->ping_ntile_5th = $value;
    }

    /**
     * Check if 'ping_ntile_50th' has a value
     *
     * @return bool
     */
    public function hasPingNtile50th()
    {
        return $this->ping_ntile_50th !== null;
    }

    /**
     * Get 'ping_ntile_50th' value
     *
     * @return int
     */
    public function getPingNtile50th()
    {
        return $this->ping_ntile_50th;
    }

    /**
     * Set 'ping_ntile_50th' value
     *
     * @param int $value
     */
    public function setPingNtile50th($value = null)
    {
        $this->ping_ntile_50th = $value;
    }

    /**
     * Check if 'ping_ntile_75th' has a value
     *
     * @return bool
     */
    public function hasPingNtile75th()
    {
        return $this->ping_ntile_75th !== null;
    }

    /**
     * Get 'ping_ntile_75th' value
     *
     * @return int
     */
    public function getPingNtile75th()
    {
        return $this->ping_ntile_75th;
    }

    /**
     * Set 'ping_ntile_75th' value
     *
     * @param int $value
     */
    public function setPingNtile75th($value = null)
    {
        $this->ping_ntile_75th = $value;
    }

    /**
     * Check if 'ping_ntile_95th' has a value
     *
     * @return bool
     */
    public function hasPingNtile95th()
    {
        return $this->ping_ntile_95th !== null;
    }

    /**
     * Get 'ping_ntile_95th' value
     *
     * @return int
     */
    public function getPingNtile95th()
    {
        return $this->ping_ntile_95th;
    }

    /**
     * Set 'ping_ntile_95th' value
     *
     * @param int $value
     */
    public function setPingNtile95th($value = null)
    {
        $this->ping_ntile_95th = $value;
    }

    /**
     * Check if 'ping_ntile_98th' has a value
     *
     * @return bool
     */
    public function hasPingNtile98th()
    {
        return $this->ping_ntile_98th !== null;
    }

    /**
     * Get 'ping_ntile_98th' value
     *
     * @return int
     */
    public function getPingNtile98th()
    {
        return $this->ping_ntile_98th;
    }

    /**
     * Set 'ping_ntile_98th' value
     *
     * @param int $value
     */
    public function setPingNtile98th($value = null)
    {
        $this->ping_ntile_98th = $value;
    }

    /**
     * Check if 'jitter_histogram_negligible' has a value
     *
     * @return bool
     */
    public function hasJitterHistogramNegligible()
    {
        return $this->jitter_histogram_negligible !== null;
    }

    /**
     * Get 'jitter_histogram_negligible' value
     *
     * @return int
     */
    public function getJitterHistogramNegligible()
    {
        return $this->jitter_histogram_negligible;
    }

    /**
     * Set 'jitter_histogram_negligible' value
     *
     * @param int $value
     */
    public function setJitterHistogramNegligible($value = null)
    {
        $this->jitter_histogram_negligible = $value;
    }

    /**
     * Check if 'jitter_histogram_1' has a value
     *
     * @return bool
     */
    public function hasJitterHistogram1()
    {
        return $this->jitter_histogram_1 !== null;
    }

    /**
     * Get 'jitter_histogram_1' value
     *
     * @return int
     */
    public function getJitterHistogram1()
    {
        return $this->jitter_histogram_1;
    }

    /**
     * Set 'jitter_histogram_1' value
     *
     * @param int $value
     */
    public function setJitterHistogram1($value = null)
    {
        $this->jitter_histogram_1 = $value;
    }

    /**
     * Check if 'jitter_histogram_2' has a value
     *
     * @return bool
     */
    public function hasJitterHistogram2()
    {
        return $this->jitter_histogram_2 !== null;
    }

    /**
     * Get 'jitter_histogram_2' value
     *
     * @return int
     */
    public function getJitterHistogram2()
    {
        return $this->jitter_histogram_2;
    }

    /**
     * Set 'jitter_histogram_2' value
     *
     * @param int $value
     */
    public function setJitterHistogram2($value = null)
    {
        $this->jitter_histogram_2 = $value;
    }

    /**
     * Check if 'jitter_histogram_5' has a value
     *
     * @return bool
     */
    public function hasJitterHistogram5()
    {
        return $this->jitter_histogram_5 !== null;
    }

    /**
     * Get 'jitter_histogram_5' value
     *
     * @return int
     */
    public function getJitterHistogram5()
    {
        return $this->jitter_histogram_5;
    }

    /**
     * Set 'jitter_histogram_5' value
     *
     * @param int $value
     */
    public function setJitterHistogram5($value = null)
    {
        $this->jitter_histogram_5 = $value;
    }

    /**
     * Check if 'jitter_histogram_10' has a value
     *
     * @return bool
     */
    public function hasJitterHistogram10()
    {
        return $this->jitter_histogram_10 !== null;
    }

    /**
     * Get 'jitter_histogram_10' value
     *
     * @return int
     */
    public function getJitterHistogram10()
    {
        return $this->jitter_histogram_10;
    }

    /**
     * Set 'jitter_histogram_10' value
     *
     * @param int $value
     */
    public function setJitterHistogram10($value = null)
    {
        $this->jitter_histogram_10 = $value;
    }

    /**
     * Check if 'jitter_histogram_20' has a value
     *
     * @return bool
     */
    public function hasJitterHistogram20()
    {
        return $this->jitter_histogram_20 !== null;
    }

    /**
     * Get 'jitter_histogram_20' value
     *
     * @return int
     */
    public function getJitterHistogram20()
    {
        return $this->jitter_histogram_20;
    }

    /**
     * Set 'jitter_histogram_20' value
     *
     * @param int $value
     */
    public function setJitterHistogram20($value = null)
    {
        $this->jitter_histogram_20 = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'packets_sent' => null,
            'kb_sent' => null,
            'packets_recv' => null,
            'kb_recv' => null,
            'packets_recv_sequenced' => null,
            'packets_recv_dropped' => null,
            'packets_recv_out_of_order' => null,
            'packets_recv_duplicate' => null,
            'packets_recv_lurch' => null,
            'quality_histogram_100' => null,
            'quality_histogram_99' => null,
            'quality_histogram_97' => null,
            'quality_histogram_95' => null,
            'quality_histogram_90' => null,
            'quality_histogram_75' => null,
            'quality_histogram_50' => null,
            'quality_histogram_1' => null,
            'quality_histogram_dead' => null,
            'quality_ntile_2nd' => null,
            'quality_ntile_5th' => null,
            'quality_ntile_25th' => null,
            'quality_ntile_50th' => null,
            'ping_histogram_25' => null,
            'ping_histogram_50' => null,
            'ping_histogram_75' => null,
            'ping_histogram_100' => null,
            'ping_histogram_125' => null,
            'ping_histogram_150' => null,
            'ping_histogram_200' => null,
            'ping_histogram_300' => null,
            'ping_histogram_max' => null,
            'ping_ntile_5th' => null,
            'ping_ntile_50th' => null,
            'ping_ntile_75th' => null,
            'ping_ntile_95th' => null,
            'ping_ntile_98th' => null,
            'jitter_histogram_negligible' => null,
            'jitter_histogram_1' => null,
            'jitter_histogram_2' => null,
            'jitter_histogram_5' => null,
            'jitter_histogram_10' => null,
            'jitter_histogram_20' => null
        ], $values);

        $message->setPacketsSent($values['packets_sent']);
        $message->setKbSent($values['kb_sent']);
        $message->setPacketsRecv($values['packets_recv']);
        $message->setKbRecv($values['kb_recv']);
        $message->setPacketsRecvSequenced($values['packets_recv_sequenced']);
        $message->setPacketsRecvDropped($values['packets_recv_dropped']);
        $message->setPacketsRecvOutOfOrder($values['packets_recv_out_of_order']);
        $message->setPacketsRecvDuplicate($values['packets_recv_duplicate']);
        $message->setPacketsRecvLurch($values['packets_recv_lurch']);
        $message->setQualityHistogram100($values['quality_histogram_100']);
        $message->setQualityHistogram99($values['quality_histogram_99']);
        $message->setQualityHistogram97($values['quality_histogram_97']);
        $message->setQualityHistogram95($values['quality_histogram_95']);
        $message->setQualityHistogram90($values['quality_histogram_90']);
        $message->setQualityHistogram75($values['quality_histogram_75']);
        $message->setQualityHistogram50($values['quality_histogram_50']);
        $message->setQualityHistogram1($values['quality_histogram_1']);
        $message->setQualityHistogramDead($values['quality_histogram_dead']);
        $message->setQualityNtile2nd($values['quality_ntile_2nd']);
        $message->setQualityNtile5th($values['quality_ntile_5th']);
        $message->setQualityNtile25th($values['quality_ntile_25th']);
        $message->setQualityNtile50th($values['quality_ntile_50th']);
        $message->setPingHistogram25($values['ping_histogram_25']);
        $message->setPingHistogram50($values['ping_histogram_50']);
        $message->setPingHistogram75($values['ping_histogram_75']);
        $message->setPingHistogram100($values['ping_histogram_100']);
        $message->setPingHistogram125($values['ping_histogram_125']);
        $message->setPingHistogram150($values['ping_histogram_150']);
        $message->setPingHistogram200($values['ping_histogram_200']);
        $message->setPingHistogram300($values['ping_histogram_300']);
        $message->setPingHistogramMax($values['ping_histogram_max']);
        $message->setPingNtile5th($values['ping_ntile_5th']);
        $message->setPingNtile50th($values['ping_ntile_50th']);
        $message->setPingNtile75th($values['ping_ntile_75th']);
        $message->setPingNtile95th($values['ping_ntile_95th']);
        $message->setPingNtile98th($values['ping_ntile_98th']);
        $message->setJitterHistogramNegligible($values['jitter_histogram_negligible']);
        $message->setJitterHistogram1($values['jitter_histogram_1']);
        $message->setJitterHistogram2($values['jitter_histogram_2']);
        $message->setJitterHistogram5($values['jitter_histogram_5']);
        $message->setJitterHistogram10($values['jitter_histogram_10']);
        $message->setJitterHistogram20($values['jitter_histogram_20']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgSteamDatagramLinkLifetimeStats',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'packets_sent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'kb_sent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'packets_recv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'kb_recv',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'packets_recv_sequenced',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'packets_recv_dropped',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'packets_recv_out_of_order',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'packets_recv_duplicate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'packets_recv_lurch',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'quality_histogram_100',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'quality_histogram_99',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'quality_histogram_97',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'quality_histogram_95',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'quality_histogram_90',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'quality_histogram_75',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'quality_histogram_50',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 28,
                    'name' => 'quality_histogram_1',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 29,
                    'name' => 'quality_histogram_dead',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 30,
                    'name' => 'quality_ntile_2nd',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 31,
                    'name' => 'quality_ntile_5th',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 32,
                    'name' => 'quality_ntile_25th',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 33,
                    'name' => 'quality_ntile_50th',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 41,
                    'name' => 'ping_histogram_25',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 42,
                    'name' => 'ping_histogram_50',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 43,
                    'name' => 'ping_histogram_75',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 44,
                    'name' => 'ping_histogram_100',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 45,
                    'name' => 'ping_histogram_125',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 46,
                    'name' => 'ping_histogram_150',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 47,
                    'name' => 'ping_histogram_200',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 48,
                    'name' => 'ping_histogram_300',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 49,
                    'name' => 'ping_histogram_max',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 50,
                    'name' => 'ping_ntile_5th',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 51,
                    'name' => 'ping_ntile_50th',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 52,
                    'name' => 'ping_ntile_75th',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 53,
                    'name' => 'ping_ntile_95th',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 54,
                    'name' => 'ping_ntile_98th',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 61,
                    'name' => 'jitter_histogram_negligible',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 62,
                    'name' => 'jitter_histogram_1',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 63,
                    'name' => 'jitter_histogram_2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 64,
                    'name' => 'jitter_histogram_5',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 65,
                    'name' => 'jitter_histogram_10',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 66,
                    'name' => 'jitter_histogram_20',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->packets_sent !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->packets_sent);
        }

        if ($this->kb_sent !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->kb_sent);
        }

        if ($this->packets_recv !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->packets_recv);
        }

        if ($this->kb_recv !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->kb_recv);
        }

        if ($this->packets_recv_sequenced !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->packets_recv_sequenced);
        }

        if ($this->packets_recv_dropped !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->packets_recv_dropped);
        }

        if ($this->packets_recv_out_of_order !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->packets_recv_out_of_order);
        }

        if ($this->packets_recv_duplicate !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->packets_recv_duplicate);
        }

        if ($this->packets_recv_lurch !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->packets_recv_lurch);
        }

        if ($this->quality_histogram_100 !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->quality_histogram_100);
        }

        if ($this->quality_histogram_99 !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeVarint($stream, $this->quality_histogram_99);
        }

        if ($this->quality_histogram_97 !== null) {
            $writer->writeVarint($stream, 184);
            $writer->writeVarint($stream, $this->quality_histogram_97);
        }

        if ($this->quality_histogram_95 !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeVarint($stream, $this->quality_histogram_95);
        }

        if ($this->quality_histogram_90 !== null) {
            $writer->writeVarint($stream, 200);
            $writer->writeVarint($stream, $this->quality_histogram_90);
        }

        if ($this->quality_histogram_75 !== null) {
            $writer->writeVarint($stream, 208);
            $writer->writeVarint($stream, $this->quality_histogram_75);
        }

        if ($this->quality_histogram_50 !== null) {
            $writer->writeVarint($stream, 216);
            $writer->writeVarint($stream, $this->quality_histogram_50);
        }

        if ($this->quality_histogram_1 !== null) {
            $writer->writeVarint($stream, 224);
            $writer->writeVarint($stream, $this->quality_histogram_1);
        }

        if ($this->quality_histogram_dead !== null) {
            $writer->writeVarint($stream, 232);
            $writer->writeVarint($stream, $this->quality_histogram_dead);
        }

        if ($this->quality_ntile_2nd !== null) {
            $writer->writeVarint($stream, 240);
            $writer->writeVarint($stream, $this->quality_ntile_2nd);
        }

        if ($this->quality_ntile_5th !== null) {
            $writer->writeVarint($stream, 248);
            $writer->writeVarint($stream, $this->quality_ntile_5th);
        }

        if ($this->quality_ntile_25th !== null) {
            $writer->writeVarint($stream, 256);
            $writer->writeVarint($stream, $this->quality_ntile_25th);
        }

        if ($this->quality_ntile_50th !== null) {
            $writer->writeVarint($stream, 264);
            $writer->writeVarint($stream, $this->quality_ntile_50th);
        }

        if ($this->ping_histogram_25 !== null) {
            $writer->writeVarint($stream, 328);
            $writer->writeVarint($stream, $this->ping_histogram_25);
        }

        if ($this->ping_histogram_50 !== null) {
            $writer->writeVarint($stream, 336);
            $writer->writeVarint($stream, $this->ping_histogram_50);
        }

        if ($this->ping_histogram_75 !== null) {
            $writer->writeVarint($stream, 344);
            $writer->writeVarint($stream, $this->ping_histogram_75);
        }

        if ($this->ping_histogram_100 !== null) {
            $writer->writeVarint($stream, 352);
            $writer->writeVarint($stream, $this->ping_histogram_100);
        }

        if ($this->ping_histogram_125 !== null) {
            $writer->writeVarint($stream, 360);
            $writer->writeVarint($stream, $this->ping_histogram_125);
        }

        if ($this->ping_histogram_150 !== null) {
            $writer->writeVarint($stream, 368);
            $writer->writeVarint($stream, $this->ping_histogram_150);
        }

        if ($this->ping_histogram_200 !== null) {
            $writer->writeVarint($stream, 376);
            $writer->writeVarint($stream, $this->ping_histogram_200);
        }

        if ($this->ping_histogram_300 !== null) {
            $writer->writeVarint($stream, 384);
            $writer->writeVarint($stream, $this->ping_histogram_300);
        }

        if ($this->ping_histogram_max !== null) {
            $writer->writeVarint($stream, 392);
            $writer->writeVarint($stream, $this->ping_histogram_max);
        }

        if ($this->ping_ntile_5th !== null) {
            $writer->writeVarint($stream, 400);
            $writer->writeVarint($stream, $this->ping_ntile_5th);
        }

        if ($this->ping_ntile_50th !== null) {
            $writer->writeVarint($stream, 408);
            $writer->writeVarint($stream, $this->ping_ntile_50th);
        }

        if ($this->ping_ntile_75th !== null) {
            $writer->writeVarint($stream, 416);
            $writer->writeVarint($stream, $this->ping_ntile_75th);
        }

        if ($this->ping_ntile_95th !== null) {
            $writer->writeVarint($stream, 424);
            $writer->writeVarint($stream, $this->ping_ntile_95th);
        }

        if ($this->ping_ntile_98th !== null) {
            $writer->writeVarint($stream, 432);
            $writer->writeVarint($stream, $this->ping_ntile_98th);
        }

        if ($this->jitter_histogram_negligible !== null) {
            $writer->writeVarint($stream, 488);
            $writer->writeVarint($stream, $this->jitter_histogram_negligible);
        }

        if ($this->jitter_histogram_1 !== null) {
            $writer->writeVarint($stream, 496);
            $writer->writeVarint($stream, $this->jitter_histogram_1);
        }

        if ($this->jitter_histogram_2 !== null) {
            $writer->writeVarint($stream, 504);
            $writer->writeVarint($stream, $this->jitter_histogram_2);
        }

        if ($this->jitter_histogram_5 !== null) {
            $writer->writeVarint($stream, 512);
            $writer->writeVarint($stream, $this->jitter_histogram_5);
        }

        if ($this->jitter_histogram_10 !== null) {
            $writer->writeVarint($stream, 520);
            $writer->writeVarint($stream, $this->jitter_histogram_10);
        }

        if ($this->jitter_histogram_20 !== null) {
            $writer->writeVarint($stream, 528);
            $writer->writeVarint($stream, $this->jitter_histogram_20);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->packets_sent = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->kb_sent = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->packets_recv = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->kb_recv = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->packets_recv_sequenced = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->packets_recv_dropped = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->packets_recv_out_of_order = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->packets_recv_duplicate = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->packets_recv_lurch = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_100 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_99 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_97 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_95 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_90 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_75 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_50 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_1 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_histogram_dead = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_ntile_2nd = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_ntile_5th = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 32) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_ntile_25th = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 33) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->quality_ntile_50th = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 41) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_25 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 42) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_50 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 43) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_75 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 44) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_100 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 45) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_125 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 46) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_150 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 47) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_200 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 48) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_300 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 49) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_histogram_max = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 50) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_ntile_5th = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 51) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_ntile_50th = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 52) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_ntile_75th = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 53) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_ntile_95th = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 54) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_ntile_98th = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 61) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->jitter_histogram_negligible = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 62) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->jitter_histogram_1 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 63) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->jitter_histogram_2 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 64) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->jitter_histogram_5 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 65) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->jitter_histogram_10 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 66) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->jitter_histogram_20 = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->packets_sent !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_sent);
        }

        if ($this->kb_sent !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->kb_sent);
        }

        if ($this->packets_recv !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_recv);
        }

        if ($this->kb_recv !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->kb_recv);
        }

        if ($this->packets_recv_sequenced !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_recv_sequenced);
        }

        if ($this->packets_recv_dropped !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_recv_dropped);
        }

        if ($this->packets_recv_out_of_order !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_recv_out_of_order);
        }

        if ($this->packets_recv_duplicate !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_recv_duplicate);
        }

        if ($this->packets_recv_lurch !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_recv_lurch);
        }

        if ($this->quality_histogram_100 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_100);
        }

        if ($this->quality_histogram_99 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_99);
        }

        if ($this->quality_histogram_97 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_97);
        }

        if ($this->quality_histogram_95 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_95);
        }

        if ($this->quality_histogram_90 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_90);
        }

        if ($this->quality_histogram_75 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_75);
        }

        if ($this->quality_histogram_50 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_50);
        }

        if ($this->quality_histogram_1 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_1);
        }

        if ($this->quality_histogram_dead !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_histogram_dead);
        }

        if ($this->quality_ntile_2nd !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_ntile_2nd);
        }

        if ($this->quality_ntile_5th !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_ntile_5th);
        }

        if ($this->quality_ntile_25th !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_ntile_25th);
        }

        if ($this->quality_ntile_50th !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->quality_ntile_50th);
        }

        if ($this->ping_histogram_25 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_25);
        }

        if ($this->ping_histogram_50 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_50);
        }

        if ($this->ping_histogram_75 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_75);
        }

        if ($this->ping_histogram_100 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_100);
        }

        if ($this->ping_histogram_125 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_125);
        }

        if ($this->ping_histogram_150 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_150);
        }

        if ($this->ping_histogram_200 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_200);
        }

        if ($this->ping_histogram_300 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_300);
        }

        if ($this->ping_histogram_max !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_histogram_max);
        }

        if ($this->ping_ntile_5th !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_ntile_5th);
        }

        if ($this->ping_ntile_50th !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_ntile_50th);
        }

        if ($this->ping_ntile_75th !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_ntile_75th);
        }

        if ($this->ping_ntile_95th !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_ntile_95th);
        }

        if ($this->ping_ntile_98th !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->ping_ntile_98th);
        }

        if ($this->jitter_histogram_negligible !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->jitter_histogram_negligible);
        }

        if ($this->jitter_histogram_1 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->jitter_histogram_1);
        }

        if ($this->jitter_histogram_2 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->jitter_histogram_2);
        }

        if ($this->jitter_histogram_5 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->jitter_histogram_5);
        }

        if ($this->jitter_histogram_10 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->jitter_histogram_10);
        }

        if ($this->jitter_histogram_20 !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->jitter_histogram_20);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->packets_sent = null;
        $this->kb_sent = null;
        $this->packets_recv = null;
        $this->kb_recv = null;
        $this->packets_recv_sequenced = null;
        $this->packets_recv_dropped = null;
        $this->packets_recv_out_of_order = null;
        $this->packets_recv_duplicate = null;
        $this->packets_recv_lurch = null;
        $this->quality_histogram_100 = null;
        $this->quality_histogram_99 = null;
        $this->quality_histogram_97 = null;
        $this->quality_histogram_95 = null;
        $this->quality_histogram_90 = null;
        $this->quality_histogram_75 = null;
        $this->quality_histogram_50 = null;
        $this->quality_histogram_1 = null;
        $this->quality_histogram_dead = null;
        $this->quality_ntile_2nd = null;
        $this->quality_ntile_5th = null;
        $this->quality_ntile_25th = null;
        $this->quality_ntile_50th = null;
        $this->ping_histogram_25 = null;
        $this->ping_histogram_50 = null;
        $this->ping_histogram_75 = null;
        $this->ping_histogram_100 = null;
        $this->ping_histogram_125 = null;
        $this->ping_histogram_150 = null;
        $this->ping_histogram_200 = null;
        $this->ping_histogram_300 = null;
        $this->ping_histogram_max = null;
        $this->ping_ntile_5th = null;
        $this->ping_ntile_50th = null;
        $this->ping_ntile_75th = null;
        $this->ping_ntile_95th = null;
        $this->ping_ntile_98th = null;
        $this->jitter_histogram_negligible = null;
        $this->jitter_histogram_1 = null;
        $this->jitter_histogram_2 = null;
        $this->jitter_histogram_5 = null;
        $this->jitter_histogram_10 = null;
        $this->jitter_histogram_20 = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramLinkLifetimeStats) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->packets_sent = ($message->packets_sent !== null) ? $message->packets_sent : $this->packets_sent;
        $this->kb_sent = ($message->kb_sent !== null) ? $message->kb_sent : $this->kb_sent;
        $this->packets_recv = ($message->packets_recv !== null) ? $message->packets_recv : $this->packets_recv;
        $this->kb_recv = ($message->kb_recv !== null) ? $message->kb_recv : $this->kb_recv;
        $this->packets_recv_sequenced = ($message->packets_recv_sequenced !== null) ? $message->packets_recv_sequenced : $this->packets_recv_sequenced;
        $this->packets_recv_dropped = ($message->packets_recv_dropped !== null) ? $message->packets_recv_dropped : $this->packets_recv_dropped;
        $this->packets_recv_out_of_order = ($message->packets_recv_out_of_order !== null) ? $message->packets_recv_out_of_order : $this->packets_recv_out_of_order;
        $this->packets_recv_duplicate = ($message->packets_recv_duplicate !== null) ? $message->packets_recv_duplicate : $this->packets_recv_duplicate;
        $this->packets_recv_lurch = ($message->packets_recv_lurch !== null) ? $message->packets_recv_lurch : $this->packets_recv_lurch;
        $this->quality_histogram_100 = ($message->quality_histogram_100 !== null) ? $message->quality_histogram_100 : $this->quality_histogram_100;
        $this->quality_histogram_99 = ($message->quality_histogram_99 !== null) ? $message->quality_histogram_99 : $this->quality_histogram_99;
        $this->quality_histogram_97 = ($message->quality_histogram_97 !== null) ? $message->quality_histogram_97 : $this->quality_histogram_97;
        $this->quality_histogram_95 = ($message->quality_histogram_95 !== null) ? $message->quality_histogram_95 : $this->quality_histogram_95;
        $this->quality_histogram_90 = ($message->quality_histogram_90 !== null) ? $message->quality_histogram_90 : $this->quality_histogram_90;
        $this->quality_histogram_75 = ($message->quality_histogram_75 !== null) ? $message->quality_histogram_75 : $this->quality_histogram_75;
        $this->quality_histogram_50 = ($message->quality_histogram_50 !== null) ? $message->quality_histogram_50 : $this->quality_histogram_50;
        $this->quality_histogram_1 = ($message->quality_histogram_1 !== null) ? $message->quality_histogram_1 : $this->quality_histogram_1;
        $this->quality_histogram_dead = ($message->quality_histogram_dead !== null) ? $message->quality_histogram_dead : $this->quality_histogram_dead;
        $this->quality_ntile_2nd = ($message->quality_ntile_2nd !== null) ? $message->quality_ntile_2nd : $this->quality_ntile_2nd;
        $this->quality_ntile_5th = ($message->quality_ntile_5th !== null) ? $message->quality_ntile_5th : $this->quality_ntile_5th;
        $this->quality_ntile_25th = ($message->quality_ntile_25th !== null) ? $message->quality_ntile_25th : $this->quality_ntile_25th;
        $this->quality_ntile_50th = ($message->quality_ntile_50th !== null) ? $message->quality_ntile_50th : $this->quality_ntile_50th;
        $this->ping_histogram_25 = ($message->ping_histogram_25 !== null) ? $message->ping_histogram_25 : $this->ping_histogram_25;
        $this->ping_histogram_50 = ($message->ping_histogram_50 !== null) ? $message->ping_histogram_50 : $this->ping_histogram_50;
        $this->ping_histogram_75 = ($message->ping_histogram_75 !== null) ? $message->ping_histogram_75 : $this->ping_histogram_75;
        $this->ping_histogram_100 = ($message->ping_histogram_100 !== null) ? $message->ping_histogram_100 : $this->ping_histogram_100;
        $this->ping_histogram_125 = ($message->ping_histogram_125 !== null) ? $message->ping_histogram_125 : $this->ping_histogram_125;
        $this->ping_histogram_150 = ($message->ping_histogram_150 !== null) ? $message->ping_histogram_150 : $this->ping_histogram_150;
        $this->ping_histogram_200 = ($message->ping_histogram_200 !== null) ? $message->ping_histogram_200 : $this->ping_histogram_200;
        $this->ping_histogram_300 = ($message->ping_histogram_300 !== null) ? $message->ping_histogram_300 : $this->ping_histogram_300;
        $this->ping_histogram_max = ($message->ping_histogram_max !== null) ? $message->ping_histogram_max : $this->ping_histogram_max;
        $this->ping_ntile_5th = ($message->ping_ntile_5th !== null) ? $message->ping_ntile_5th : $this->ping_ntile_5th;
        $this->ping_ntile_50th = ($message->ping_ntile_50th !== null) ? $message->ping_ntile_50th : $this->ping_ntile_50th;
        $this->ping_ntile_75th = ($message->ping_ntile_75th !== null) ? $message->ping_ntile_75th : $this->ping_ntile_75th;
        $this->ping_ntile_95th = ($message->ping_ntile_95th !== null) ? $message->ping_ntile_95th : $this->ping_ntile_95th;
        $this->ping_ntile_98th = ($message->ping_ntile_98th !== null) ? $message->ping_ntile_98th : $this->ping_ntile_98th;
        $this->jitter_histogram_negligible = ($message->jitter_histogram_negligible !== null) ? $message->jitter_histogram_negligible : $this->jitter_histogram_negligible;
        $this->jitter_histogram_1 = ($message->jitter_histogram_1 !== null) ? $message->jitter_histogram_1 : $this->jitter_histogram_1;
        $this->jitter_histogram_2 = ($message->jitter_histogram_2 !== null) ? $message->jitter_histogram_2 : $this->jitter_histogram_2;
        $this->jitter_histogram_5 = ($message->jitter_histogram_5 !== null) ? $message->jitter_histogram_5 : $this->jitter_histogram_5;
        $this->jitter_histogram_10 = ($message->jitter_histogram_10 !== null) ? $message->jitter_histogram_10 : $this->jitter_histogram_10;
        $this->jitter_histogram_20 = ($message->jitter_histogram_20 !== null) ? $message->jitter_histogram_20 : $this->jitter_histogram_20;
    }


}

