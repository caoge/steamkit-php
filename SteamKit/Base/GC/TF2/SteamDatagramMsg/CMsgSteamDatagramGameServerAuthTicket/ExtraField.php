<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steamdatagram_messages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramGameServerAuthTicket.ExtraField
 */
class ExtraField extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * name optional string = 1
     *
     * @var string
     */
    protected $name = null;

    /**
     * string_value optional string = 2
     *
     * @var string
     */
    protected $string_value = null;

    /**
     * int32_value optional sint32 = 3
     *
     * @var int
     */
    protected $int32_value = null;

    /**
     * fixed32_value optional fixed32 = 4
     *
     * @var int
     */
    protected $fixed32_value = null;

    /**
     * fixed64_value optional fixed64 = 5
     *
     * @var int
     */
    protected $fixed64_value = null;

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'string_value' has a value
     *
     * @return bool
     */
    public function hasStringValue()
    {
        return $this->string_value !== null;
    }

    /**
     * Get 'string_value' value
     *
     * @return string
     */
    public function getStringValue()
    {
        return $this->string_value;
    }

    /**
     * Set 'string_value' value
     *
     * @param string $value
     */
    public function setStringValue($value = null)
    {
        $this->string_value = $value;
    }

    /**
     * Check if 'int32_value' has a value
     *
     * @return bool
     */
    public function hasInt32Value()
    {
        return $this->int32_value !== null;
    }

    /**
     * Get 'int32_value' value
     *
     * @return int
     */
    public function getInt32Value()
    {
        return $this->int32_value;
    }

    /**
     * Set 'int32_value' value
     *
     * @param int $value
     */
    public function setInt32Value($value = null)
    {
        $this->int32_value = $value;
    }

    /**
     * Check if 'fixed32_value' has a value
     *
     * @return bool
     */
    public function hasFixed32Value()
    {
        return $this->fixed32_value !== null;
    }

    /**
     * Get 'fixed32_value' value
     *
     * @return int
     */
    public function getFixed32Value()
    {
        return $this->fixed32_value;
    }

    /**
     * Set 'fixed32_value' value
     *
     * @param int $value
     */
    public function setFixed32Value($value = null)
    {
        $this->fixed32_value = $value;
    }

    /**
     * Check if 'fixed64_value' has a value
     *
     * @return bool
     */
    public function hasFixed64Value()
    {
        return $this->fixed64_value !== null;
    }

    /**
     * Get 'fixed64_value' value
     *
     * @return int
     */
    public function getFixed64Value()
    {
        return $this->fixed64_value;
    }

    /**
     * Set 'fixed64_value' value
     *
     * @param int $value
     */
    public function setFixed64Value($value = null)
    {
        $this->fixed64_value = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'name' => null,
            'string_value' => null,
            'int32_value' => null,
            'fixed32_value' => null,
            'fixed64_value' => null
        ], $values);

        $message->setName($values['name']);
        $message->setStringValue($values['string_value']);
        $message->setInt32Value($values['int32_value']);
        $message->setFixed32Value($values['fixed32_value']);
        $message->setFixed64Value($values['fixed64_value']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ExtraField',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'string_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'int32_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'fixed32_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'fixed64_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->name);
        }

        if ($this->string_value !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->string_value);
        }

        if ($this->int32_value !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeZigzag32($stream, $this->int32_value);
        }

        if ($this->fixed32_value !== null) {
            $writer->writeVarint($stream, 37);
            $writer->writeFixed32($stream, $this->fixed32_value);
        }

        if ($this->fixed64_value !== null) {
            $writer->writeVarint($stream, 41);
            $writer->writeFixed64($stream, $this->fixed64_value);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->string_value = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->int32_value = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->fixed32_value = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->fixed64_value = $reader->readFixed64($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->string_value !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->string_value);
        }

        if ($this->int32_value !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->int32_value);
        }

        if ($this->fixed32_value !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->fixed64_value !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->name = null;
        $this->string_value = null;
        $this->int32_value = null;
        $this->fixed32_value = null;
        $this->fixed64_value = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket\ExtraField) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->string_value = ($message->string_value !== null) ? $message->string_value : $this->string_value;
        $this->int32_value = ($message->int32_value !== null) ? $message->int32_value : $this->int32_value;
        $this->fixed32_value = ($message->fixed32_value !== null) ? $message->fixed32_value : $this->fixed32_value;
        $this->fixed64_value = ($message->fixed64_value !== null) ? $message->fixed64_value : $this->fixed64_value;
    }


}

