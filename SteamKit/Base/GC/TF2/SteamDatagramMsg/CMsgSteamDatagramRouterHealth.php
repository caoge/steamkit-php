<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steamdatagram_messages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamDatagramMsg;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramRouterHealth
 */
class CMsgSteamDatagramRouterHealth extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * cpu_load optional float = 1
     *
     * @var float
     */
    protected $cpu_load = null;

    /**
     * active_sessions optional uint32 = 2
     *
     * @var int
     */
    protected $active_sessions = null;

    /**
     * data_pkts_sec optional uint32 = 3
     *
     * @var int
     */
    protected $data_pkts_sec = null;

    /**
     * other_pkts_sec optional uint32 = 4
     *
     * @var int
     */
    protected $other_pkts_sec = null;

    /**
     * seconds_until_shutdown optional uint32 = 5
     *
     * @var int
     */
    protected $seconds_until_shutdown = null;

    /**
     * cpu_cost_per_user optional float = 8
     *
     * @var float
     */
    protected $cpu_cost_per_user = null;

    /**
     * cpu_cost_per_packet optional float = 9
     *
     * @var float
     */
    protected $cpu_cost_per_packet = null;

    /**
     * data_centers repeated message = 6
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramRouterHealth\DataCenter>
     */
    protected $data_centers = null;

    /**
     * magic optional fixed64 = 7
     *
     * @var int
     */
    protected $magic = null;

    /**
     * Check if 'cpu_load' has a value
     *
     * @return bool
     */
    public function hasCpuLoad()
    {
        return $this->cpu_load !== null;
    }

    /**
     * Get 'cpu_load' value
     *
     * @return float
     */
    public function getCpuLoad()
    {
        return $this->cpu_load;
    }

    /**
     * Set 'cpu_load' value
     *
     * @param float $value
     */
    public function setCpuLoad($value = null)
    {
        $this->cpu_load = $value;
    }

    /**
     * Check if 'active_sessions' has a value
     *
     * @return bool
     */
    public function hasActiveSessions()
    {
        return $this->active_sessions !== null;
    }

    /**
     * Get 'active_sessions' value
     *
     * @return int
     */
    public function getActiveSessions()
    {
        return $this->active_sessions;
    }

    /**
     * Set 'active_sessions' value
     *
     * @param int $value
     */
    public function setActiveSessions($value = null)
    {
        $this->active_sessions = $value;
    }

    /**
     * Check if 'data_pkts_sec' has a value
     *
     * @return bool
     */
    public function hasDataPktsSec()
    {
        return $this->data_pkts_sec !== null;
    }

    /**
     * Get 'data_pkts_sec' value
     *
     * @return int
     */
    public function getDataPktsSec()
    {
        return $this->data_pkts_sec;
    }

    /**
     * Set 'data_pkts_sec' value
     *
     * @param int $value
     */
    public function setDataPktsSec($value = null)
    {
        $this->data_pkts_sec = $value;
    }

    /**
     * Check if 'other_pkts_sec' has a value
     *
     * @return bool
     */
    public function hasOtherPktsSec()
    {
        return $this->other_pkts_sec !== null;
    }

    /**
     * Get 'other_pkts_sec' value
     *
     * @return int
     */
    public function getOtherPktsSec()
    {
        return $this->other_pkts_sec;
    }

    /**
     * Set 'other_pkts_sec' value
     *
     * @param int $value
     */
    public function setOtherPktsSec($value = null)
    {
        $this->other_pkts_sec = $value;
    }

    /**
     * Check if 'seconds_until_shutdown' has a value
     *
     * @return bool
     */
    public function hasSecondsUntilShutdown()
    {
        return $this->seconds_until_shutdown !== null;
    }

    /**
     * Get 'seconds_until_shutdown' value
     *
     * @return int
     */
    public function getSecondsUntilShutdown()
    {
        return $this->seconds_until_shutdown;
    }

    /**
     * Set 'seconds_until_shutdown' value
     *
     * @param int $value
     */
    public function setSecondsUntilShutdown($value = null)
    {
        $this->seconds_until_shutdown = $value;
    }

    /**
     * Check if 'cpu_cost_per_user' has a value
     *
     * @return bool
     */
    public function hasCpuCostPerUser()
    {
        return $this->cpu_cost_per_user !== null;
    }

    /**
     * Get 'cpu_cost_per_user' value
     *
     * @return float
     */
    public function getCpuCostPerUser()
    {
        return $this->cpu_cost_per_user;
    }

    /**
     * Set 'cpu_cost_per_user' value
     *
     * @param float $value
     */
    public function setCpuCostPerUser($value = null)
    {
        $this->cpu_cost_per_user = $value;
    }

    /**
     * Check if 'cpu_cost_per_packet' has a value
     *
     * @return bool
     */
    public function hasCpuCostPerPacket()
    {
        return $this->cpu_cost_per_packet !== null;
    }

    /**
     * Get 'cpu_cost_per_packet' value
     *
     * @return float
     */
    public function getCpuCostPerPacket()
    {
        return $this->cpu_cost_per_packet;
    }

    /**
     * Set 'cpu_cost_per_packet' value
     *
     * @param float $value
     */
    public function setCpuCostPerPacket($value = null)
    {
        $this->cpu_cost_per_packet = $value;
    }

    /**
     * Check if 'data_centers' has a value
     *
     * @return bool
     */
    public function hasDataCentersList()
    {
        return $this->data_centers !== null;
    }

    /**
     * Get 'data_centers' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramRouterHealth\DataCenter>
     */
    public function getDataCentersList()
    {
        return $this->data_centers;
    }

    /**
     * Set 'data_centers' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramRouterHealth\DataCenter> $value
     */
    public function setDataCentersList(\Protobuf\Collection $value = null)
    {
        $this->data_centers = $value;
    }

    /**
     * Add a new element to 'data_centers'
     *
     * @param
     * \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramRouterHealth\DataCenter
     * $value
     */
    public function addDataCenters(\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramRouterHealth\DataCenter $value)
    {
        if ($this->data_centers === null) {
            $this->data_centers = new \Protobuf\MessageCollection();
        }

        $this->data_centers->add($value);
    }

    /**
     * Check if 'magic' has a value
     *
     * @return bool
     */
    public function hasMagic()
    {
        return $this->magic !== null;
    }

    /**
     * Get 'magic' value
     *
     * @return int
     */
    public function getMagic()
    {
        return $this->magic;
    }

    /**
     * Set 'magic' value
     *
     * @param int $value
     */
    public function setMagic($value = null)
    {
        $this->magic = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'cpu_load' => null,
            'active_sessions' => null,
            'data_pkts_sec' => null,
            'other_pkts_sec' => null,
            'seconds_until_shutdown' => null,
            'cpu_cost_per_user' => null,
            'cpu_cost_per_packet' => null,
            'data_centers' => [],
            'magic' => null
        ], $values);

        $message->setCpuLoad($values['cpu_load']);
        $message->setActiveSessions($values['active_sessions']);
        $message->setDataPktsSec($values['data_pkts_sec']);
        $message->setOtherPktsSec($values['other_pkts_sec']);
        $message->setSecondsUntilShutdown($values['seconds_until_shutdown']);
        $message->setCpuCostPerUser($values['cpu_cost_per_user']);
        $message->setCpuCostPerPacket($values['cpu_cost_per_packet']);
        $message->setMagic($values['magic']);

        foreach ($values['data_centers'] as $item) {
            $message->addDataCenters($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgSteamDatagramRouterHealth',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'cpu_load',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'active_sessions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'data_pkts_sec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'other_pkts_sec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'seconds_until_shutdown',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'cpu_cost_per_user',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'cpu_cost_per_packet',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'data_centers',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramRouterHealth.DataCenter'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'magic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->cpu_load !== null) {
            $writer->writeVarint($stream, 13);
            $writer->writeFloat($stream, $this->cpu_load);
        }

        if ($this->active_sessions !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->active_sessions);
        }

        if ($this->data_pkts_sec !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->data_pkts_sec);
        }

        if ($this->other_pkts_sec !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->other_pkts_sec);
        }

        if ($this->seconds_until_shutdown !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->seconds_until_shutdown);
        }

        if ($this->cpu_cost_per_user !== null) {
            $writer->writeVarint($stream, 69);
            $writer->writeFloat($stream, $this->cpu_cost_per_user);
        }

        if ($this->cpu_cost_per_packet !== null) {
            $writer->writeVarint($stream, 77);
            $writer->writeFloat($stream, $this->cpu_cost_per_packet);
        }

        if ($this->data_centers !== null) {
            foreach ($this->data_centers as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->magic !== null) {
            $writer->writeVarint($stream, 57);
            $writer->writeFixed64($stream, $this->magic);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->cpu_load = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->active_sessions = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->data_pkts_sec = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->other_pkts_sec = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seconds_until_shutdown = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->cpu_cost_per_user = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->cpu_cost_per_packet = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramRouterHealth\DataCenter();

                if ($this->data_centers === null) {
                    $this->data_centers = new \Protobuf\MessageCollection();
                }

                $this->data_centers->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->magic = $reader->readFixed64($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->cpu_load !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->active_sessions !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->active_sessions);
        }

        if ($this->data_pkts_sec !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->data_pkts_sec);
        }

        if ($this->other_pkts_sec !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->other_pkts_sec);
        }

        if ($this->seconds_until_shutdown !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seconds_until_shutdown);
        }

        if ($this->cpu_cost_per_user !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->cpu_cost_per_packet !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->data_centers !== null) {
            foreach ($this->data_centers as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->magic !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->cpu_load = null;
        $this->active_sessions = null;
        $this->data_pkts_sec = null;
        $this->other_pkts_sec = null;
        $this->seconds_until_shutdown = null;
        $this->cpu_cost_per_user = null;
        $this->cpu_cost_per_packet = null;
        $this->data_centers = null;
        $this->magic = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramRouterHealth) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->cpu_load = ($message->cpu_load !== null) ? $message->cpu_load : $this->cpu_load;
        $this->active_sessions = ($message->active_sessions !== null) ? $message->active_sessions : $this->active_sessions;
        $this->data_pkts_sec = ($message->data_pkts_sec !== null) ? $message->data_pkts_sec : $this->data_pkts_sec;
        $this->other_pkts_sec = ($message->other_pkts_sec !== null) ? $message->other_pkts_sec : $this->other_pkts_sec;
        $this->seconds_until_shutdown = ($message->seconds_until_shutdown !== null) ? $message->seconds_until_shutdown : $this->seconds_until_shutdown;
        $this->cpu_cost_per_user = ($message->cpu_cost_per_user !== null) ? $message->cpu_cost_per_user : $this->cpu_cost_per_user;
        $this->cpu_cost_per_packet = ($message->cpu_cost_per_packet !== null) ? $message->cpu_cost_per_packet : $this->cpu_cost_per_packet;
        $this->data_centers = ($message->data_centers !== null) ? $message->data_centers : $this->data_centers;
        $this->magic = ($message->magic !== null) ? $message->magic : $this->magic;
    }


}

