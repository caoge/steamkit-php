<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steamdatagram_messages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamDatagramMsg;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramLinkInstantaneousStats
 */
class CMsgSteamDatagramLinkInstantaneousStats extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * out_packets_per_sec_x10 optional uint32 = 1
     *
     * @var int
     */
    protected $out_packets_per_sec_x10 = null;

    /**
     * out_bytes_per_sec optional uint32 = 2
     *
     * @var int
     */
    protected $out_bytes_per_sec = null;

    /**
     * in_packets_per_sec_x10 optional uint32 = 3
     *
     * @var int
     */
    protected $in_packets_per_sec_x10 = null;

    /**
     * in_bytes_per_sec optional uint32 = 4
     *
     * @var int
     */
    protected $in_bytes_per_sec = null;

    /**
     * ping_ms optional uint32 = 5
     *
     * @var int
     */
    protected $ping_ms = null;

    /**
     * packets_dropped_pct optional uint32 = 6
     *
     * @var int
     */
    protected $packets_dropped_pct = null;

    /**
     * packets_weird_sequence_pct optional uint32 = 7
     *
     * @var int
     */
    protected $packets_weird_sequence_pct = null;

    /**
     * peak_jitter_usec optional uint32 = 8
     *
     * @var int
     */
    protected $peak_jitter_usec = null;

    /**
     * Check if 'out_packets_per_sec_x10' has a value
     *
     * @return bool
     */
    public function hasOutPacketsPerSecX10()
    {
        return $this->out_packets_per_sec_x10 !== null;
    }

    /**
     * Get 'out_packets_per_sec_x10' value
     *
     * @return int
     */
    public function getOutPacketsPerSecX10()
    {
        return $this->out_packets_per_sec_x10;
    }

    /**
     * Set 'out_packets_per_sec_x10' value
     *
     * @param int $value
     */
    public function setOutPacketsPerSecX10($value = null)
    {
        $this->out_packets_per_sec_x10 = $value;
    }

    /**
     * Check if 'out_bytes_per_sec' has a value
     *
     * @return bool
     */
    public function hasOutBytesPerSec()
    {
        return $this->out_bytes_per_sec !== null;
    }

    /**
     * Get 'out_bytes_per_sec' value
     *
     * @return int
     */
    public function getOutBytesPerSec()
    {
        return $this->out_bytes_per_sec;
    }

    /**
     * Set 'out_bytes_per_sec' value
     *
     * @param int $value
     */
    public function setOutBytesPerSec($value = null)
    {
        $this->out_bytes_per_sec = $value;
    }

    /**
     * Check if 'in_packets_per_sec_x10' has a value
     *
     * @return bool
     */
    public function hasInPacketsPerSecX10()
    {
        return $this->in_packets_per_sec_x10 !== null;
    }

    /**
     * Get 'in_packets_per_sec_x10' value
     *
     * @return int
     */
    public function getInPacketsPerSecX10()
    {
        return $this->in_packets_per_sec_x10;
    }

    /**
     * Set 'in_packets_per_sec_x10' value
     *
     * @param int $value
     */
    public function setInPacketsPerSecX10($value = null)
    {
        $this->in_packets_per_sec_x10 = $value;
    }

    /**
     * Check if 'in_bytes_per_sec' has a value
     *
     * @return bool
     */
    public function hasInBytesPerSec()
    {
        return $this->in_bytes_per_sec !== null;
    }

    /**
     * Get 'in_bytes_per_sec' value
     *
     * @return int
     */
    public function getInBytesPerSec()
    {
        return $this->in_bytes_per_sec;
    }

    /**
     * Set 'in_bytes_per_sec' value
     *
     * @param int $value
     */
    public function setInBytesPerSec($value = null)
    {
        $this->in_bytes_per_sec = $value;
    }

    /**
     * Check if 'ping_ms' has a value
     *
     * @return bool
     */
    public function hasPingMs()
    {
        return $this->ping_ms !== null;
    }

    /**
     * Get 'ping_ms' value
     *
     * @return int
     */
    public function getPingMs()
    {
        return $this->ping_ms;
    }

    /**
     * Set 'ping_ms' value
     *
     * @param int $value
     */
    public function setPingMs($value = null)
    {
        $this->ping_ms = $value;
    }

    /**
     * Check if 'packets_dropped_pct' has a value
     *
     * @return bool
     */
    public function hasPacketsDroppedPct()
    {
        return $this->packets_dropped_pct !== null;
    }

    /**
     * Get 'packets_dropped_pct' value
     *
     * @return int
     */
    public function getPacketsDroppedPct()
    {
        return $this->packets_dropped_pct;
    }

    /**
     * Set 'packets_dropped_pct' value
     *
     * @param int $value
     */
    public function setPacketsDroppedPct($value = null)
    {
        $this->packets_dropped_pct = $value;
    }

    /**
     * Check if 'packets_weird_sequence_pct' has a value
     *
     * @return bool
     */
    public function hasPacketsWeirdSequencePct()
    {
        return $this->packets_weird_sequence_pct !== null;
    }

    /**
     * Get 'packets_weird_sequence_pct' value
     *
     * @return int
     */
    public function getPacketsWeirdSequencePct()
    {
        return $this->packets_weird_sequence_pct;
    }

    /**
     * Set 'packets_weird_sequence_pct' value
     *
     * @param int $value
     */
    public function setPacketsWeirdSequencePct($value = null)
    {
        $this->packets_weird_sequence_pct = $value;
    }

    /**
     * Check if 'peak_jitter_usec' has a value
     *
     * @return bool
     */
    public function hasPeakJitterUsec()
    {
        return $this->peak_jitter_usec !== null;
    }

    /**
     * Get 'peak_jitter_usec' value
     *
     * @return int
     */
    public function getPeakJitterUsec()
    {
        return $this->peak_jitter_usec;
    }

    /**
     * Set 'peak_jitter_usec' value
     *
     * @param int $value
     */
    public function setPeakJitterUsec($value = null)
    {
        $this->peak_jitter_usec = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'out_packets_per_sec_x10' => null,
            'out_bytes_per_sec' => null,
            'in_packets_per_sec_x10' => null,
            'in_bytes_per_sec' => null,
            'ping_ms' => null,
            'packets_dropped_pct' => null,
            'packets_weird_sequence_pct' => null,
            'peak_jitter_usec' => null
        ], $values);

        $message->setOutPacketsPerSecX10($values['out_packets_per_sec_x10']);
        $message->setOutBytesPerSec($values['out_bytes_per_sec']);
        $message->setInPacketsPerSecX10($values['in_packets_per_sec_x10']);
        $message->setInBytesPerSec($values['in_bytes_per_sec']);
        $message->setPingMs($values['ping_ms']);
        $message->setPacketsDroppedPct($values['packets_dropped_pct']);
        $message->setPacketsWeirdSequencePct($values['packets_weird_sequence_pct']);
        $message->setPeakJitterUsec($values['peak_jitter_usec']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgSteamDatagramLinkInstantaneousStats',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'out_packets_per_sec_x10',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'out_bytes_per_sec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'in_packets_per_sec_x10',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'in_bytes_per_sec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'ping_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'packets_dropped_pct',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'packets_weird_sequence_pct',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'peak_jitter_usec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->out_packets_per_sec_x10 !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->out_packets_per_sec_x10);
        }

        if ($this->out_bytes_per_sec !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->out_bytes_per_sec);
        }

        if ($this->in_packets_per_sec_x10 !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->in_packets_per_sec_x10);
        }

        if ($this->in_bytes_per_sec !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->in_bytes_per_sec);
        }

        if ($this->ping_ms !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->ping_ms);
        }

        if ($this->packets_dropped_pct !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->packets_dropped_pct);
        }

        if ($this->packets_weird_sequence_pct !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->packets_weird_sequence_pct);
        }

        if ($this->peak_jitter_usec !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->peak_jitter_usec);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->out_packets_per_sec_x10 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->out_bytes_per_sec = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->in_packets_per_sec_x10 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->in_bytes_per_sec = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ping_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->packets_dropped_pct = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->packets_weird_sequence_pct = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->peak_jitter_usec = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->out_packets_per_sec_x10 !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->out_packets_per_sec_x10);
        }

        if ($this->out_bytes_per_sec !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->out_bytes_per_sec);
        }

        if ($this->in_packets_per_sec_x10 !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->in_packets_per_sec_x10);
        }

        if ($this->in_bytes_per_sec !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->in_bytes_per_sec);
        }

        if ($this->ping_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ping_ms);
        }

        if ($this->packets_dropped_pct !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_dropped_pct);
        }

        if ($this->packets_weird_sequence_pct !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->packets_weird_sequence_pct);
        }

        if ($this->peak_jitter_usec !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->peak_jitter_usec);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->out_packets_per_sec_x10 = null;
        $this->out_bytes_per_sec = null;
        $this->in_packets_per_sec_x10 = null;
        $this->in_bytes_per_sec = null;
        $this->ping_ms = null;
        $this->packets_dropped_pct = null;
        $this->packets_weird_sequence_pct = null;
        $this->peak_jitter_usec = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramLinkInstantaneousStats) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->out_packets_per_sec_x10 = ($message->out_packets_per_sec_x10 !== null) ? $message->out_packets_per_sec_x10 : $this->out_packets_per_sec_x10;
        $this->out_bytes_per_sec = ($message->out_bytes_per_sec !== null) ? $message->out_bytes_per_sec : $this->out_bytes_per_sec;
        $this->in_packets_per_sec_x10 = ($message->in_packets_per_sec_x10 !== null) ? $message->in_packets_per_sec_x10 : $this->in_packets_per_sec_x10;
        $this->in_bytes_per_sec = ($message->in_bytes_per_sec !== null) ? $message->in_bytes_per_sec : $this->in_bytes_per_sec;
        $this->ping_ms = ($message->ping_ms !== null) ? $message->ping_ms : $this->ping_ms;
        $this->packets_dropped_pct = ($message->packets_dropped_pct !== null) ? $message->packets_dropped_pct : $this->packets_dropped_pct;
        $this->packets_weird_sequence_pct = ($message->packets_weird_sequence_pct !== null) ? $message->packets_weird_sequence_pct : $this->packets_weird_sequence_pct;
        $this->peak_jitter_usec = ($message->peak_jitter_usec !== null) ? $message->peak_jitter_usec : $this->peak_jitter_usec;
    }


}

