<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steamdatagram_messages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamDatagramMsg;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramConnectionStatsClientToRouter
 */
class CMsgSteamDatagramConnectionStatsClientToRouter extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * c2r optional message = 1
     *
     * @var \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality
     */
    protected $c2r = null;

    /**
     * c2s optional message = 2
     *
     * @var \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality
     */
    protected $c2s = null;

    /**
     * client_timestamp optional fixed32 = 3
     *
     * @var int
     */
    protected $client_timestamp = null;

    /**
     * client_cookie optional fixed32 = 8
     *
     * @var int
     */
    protected $client_cookie = null;

    /**
     * seq_num_c2r optional uint32 = 9
     *
     * @var int
     */
    protected $seq_num_c2r = null;

    /**
     * seq_num_c2s optional uint32 = 10
     *
     * @var int
     */
    protected $seq_num_c2s = null;

    /**
     * Check if 'c2r' has a value
     *
     * @return bool
     */
    public function hasC2r()
    {
        return $this->c2r !== null;
    }

    /**
     * Get 'c2r' value
     *
     * @return \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality
     */
    public function getC2r()
    {
        return $this->c2r;
    }

    /**
     * Set 'c2r' value
     *
     * @param \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality $value
     */
    public function setC2r(\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality $value = null)
    {
        $this->c2r = $value;
    }

    /**
     * Check if 'c2s' has a value
     *
     * @return bool
     */
    public function hasC2s()
    {
        return $this->c2s !== null;
    }

    /**
     * Get 'c2s' value
     *
     * @return \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality
     */
    public function getC2s()
    {
        return $this->c2s;
    }

    /**
     * Set 'c2s' value
     *
     * @param \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality $value
     */
    public function setC2s(\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality $value = null)
    {
        $this->c2s = $value;
    }

    /**
     * Check if 'client_timestamp' has a value
     *
     * @return bool
     */
    public function hasClientTimestamp()
    {
        return $this->client_timestamp !== null;
    }

    /**
     * Get 'client_timestamp' value
     *
     * @return int
     */
    public function getClientTimestamp()
    {
        return $this->client_timestamp;
    }

    /**
     * Set 'client_timestamp' value
     *
     * @param int $value
     */
    public function setClientTimestamp($value = null)
    {
        $this->client_timestamp = $value;
    }

    /**
     * Check if 'client_cookie' has a value
     *
     * @return bool
     */
    public function hasClientCookie()
    {
        return $this->client_cookie !== null;
    }

    /**
     * Get 'client_cookie' value
     *
     * @return int
     */
    public function getClientCookie()
    {
        return $this->client_cookie;
    }

    /**
     * Set 'client_cookie' value
     *
     * @param int $value
     */
    public function setClientCookie($value = null)
    {
        $this->client_cookie = $value;
    }

    /**
     * Check if 'seq_num_c2r' has a value
     *
     * @return bool
     */
    public function hasSeqNumC2r()
    {
        return $this->seq_num_c2r !== null;
    }

    /**
     * Get 'seq_num_c2r' value
     *
     * @return int
     */
    public function getSeqNumC2r()
    {
        return $this->seq_num_c2r;
    }

    /**
     * Set 'seq_num_c2r' value
     *
     * @param int $value
     */
    public function setSeqNumC2r($value = null)
    {
        $this->seq_num_c2r = $value;
    }

    /**
     * Check if 'seq_num_c2s' has a value
     *
     * @return bool
     */
    public function hasSeqNumC2s()
    {
        return $this->seq_num_c2s !== null;
    }

    /**
     * Get 'seq_num_c2s' value
     *
     * @return int
     */
    public function getSeqNumC2s()
    {
        return $this->seq_num_c2s;
    }

    /**
     * Set 'seq_num_c2s' value
     *
     * @param int $value
     */
    public function setSeqNumC2s($value = null)
    {
        $this->seq_num_c2s = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'c2r' => null,
            'c2s' => null,
            'client_timestamp' => null,
            'client_cookie' => null,
            'seq_num_c2r' => null,
            'seq_num_c2s' => null
        ], $values);

        $message->setC2r($values['c2r']);
        $message->setC2s($values['c2s']);
        $message->setClientTimestamp($values['client_timestamp']);
        $message->setClientCookie($values['client_cookie']);
        $message->setSeqNumC2r($values['seq_num_c2r']);
        $message->setSeqNumC2s($values['seq_num_c2s']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgSteamDatagramConnectionStatsClientToRouter',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'c2r',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramConnectionQuality'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'c2s',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramConnectionQuality'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'client_timestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'client_cookie',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'seq_num_c2r',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'seq_num_c2s',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->c2r !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->c2r->serializedSize($sizeContext));
            $this->c2r->writeTo($context);
        }

        if ($this->c2s !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->c2s->serializedSize($sizeContext));
            $this->c2s->writeTo($context);
        }

        if ($this->client_timestamp !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFixed32($stream, $this->client_timestamp);
        }

        if ($this->client_cookie !== null) {
            $writer->writeVarint($stream, 69);
            $writer->writeFixed32($stream, $this->client_cookie);
        }

        if ($this->seq_num_c2r !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->seq_num_c2r);
        }

        if ($this->seq_num_c2s !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->seq_num_c2s);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality();

                $this->c2r = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality();

                $this->c2s = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->client_timestamp = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->client_cookie = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seq_num_c2r = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seq_num_c2s = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->c2r !== null) {
            $innerSize = $this->c2r->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->c2s !== null) {
            $innerSize = $this->c2s->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->client_timestamp !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->client_cookie !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->seq_num_c2r !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seq_num_c2r);
        }

        if ($this->seq_num_c2s !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seq_num_c2s);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->c2r = null;
        $this->c2s = null;
        $this->client_timestamp = null;
        $this->client_cookie = null;
        $this->seq_num_c2r = null;
        $this->seq_num_c2s = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionStatsClientToRouter) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->c2r = ($message->c2r !== null) ? $message->c2r : $this->c2r;
        $this->c2s = ($message->c2s !== null) ? $message->c2s : $this->c2s;
        $this->client_timestamp = ($message->client_timestamp !== null) ? $message->client_timestamp : $this->client_timestamp;
        $this->client_cookie = ($message->client_cookie !== null) ? $message->client_cookie : $this->client_cookie;
        $this->seq_num_c2r = ($message->seq_num_c2r !== null) ? $message->seq_num_c2r : $this->seq_num_c2r;
        $this->seq_num_c2s = ($message->seq_num_c2s !== null) ? $message->seq_num_c2s : $this->seq_num_c2s;
    }


}

