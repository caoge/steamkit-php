<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steamdatagram_messages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamDatagramMsg;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramGameserverPing
 */
class CMsgSteamDatagramGameserverPing extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * client_session optional uint32 = 1
     *
     * @var int
     */
    protected $client_session = null;

    /**
     * client_steam_id optional fixed64 = 2
     *
     * @var int
     */
    protected $client_steam_id = null;

    /**
     * client_timestamp optional fixed32 = 3
     *
     * @var int
     */
    protected $client_timestamp = null;

    /**
     * router_timestamp optional fixed32 = 4
     *
     * @var int
     */
    protected $router_timestamp = null;

    /**
     * router_gameserver_latency optional uint32 = 5
     *
     * @var int
     */
    protected $router_gameserver_latency = null;

    /**
     * seq_number_router optional uint32 = 6
     *
     * @var int
     */
    protected $seq_number_router = null;

    /**
     * seq_number_e2e optional uint32 = 7
     *
     * @var int
     */
    protected $seq_number_e2e = null;

    /**
     * Check if 'client_session' has a value
     *
     * @return bool
     */
    public function hasClientSession()
    {
        return $this->client_session !== null;
    }

    /**
     * Get 'client_session' value
     *
     * @return int
     */
    public function getClientSession()
    {
        return $this->client_session;
    }

    /**
     * Set 'client_session' value
     *
     * @param int $value
     */
    public function setClientSession($value = null)
    {
        $this->client_session = $value;
    }

    /**
     * Check if 'client_steam_id' has a value
     *
     * @return bool
     */
    public function hasClientSteamId()
    {
        return $this->client_steam_id !== null;
    }

    /**
     * Get 'client_steam_id' value
     *
     * @return int
     */
    public function getClientSteamId()
    {
        return $this->client_steam_id;
    }

    /**
     * Set 'client_steam_id' value
     *
     * @param int $value
     */
    public function setClientSteamId($value = null)
    {
        $this->client_steam_id = $value;
    }

    /**
     * Check if 'client_timestamp' has a value
     *
     * @return bool
     */
    public function hasClientTimestamp()
    {
        return $this->client_timestamp !== null;
    }

    /**
     * Get 'client_timestamp' value
     *
     * @return int
     */
    public function getClientTimestamp()
    {
        return $this->client_timestamp;
    }

    /**
     * Set 'client_timestamp' value
     *
     * @param int $value
     */
    public function setClientTimestamp($value = null)
    {
        $this->client_timestamp = $value;
    }

    /**
     * Check if 'router_timestamp' has a value
     *
     * @return bool
     */
    public function hasRouterTimestamp()
    {
        return $this->router_timestamp !== null;
    }

    /**
     * Get 'router_timestamp' value
     *
     * @return int
     */
    public function getRouterTimestamp()
    {
        return $this->router_timestamp;
    }

    /**
     * Set 'router_timestamp' value
     *
     * @param int $value
     */
    public function setRouterTimestamp($value = null)
    {
        $this->router_timestamp = $value;
    }

    /**
     * Check if 'router_gameserver_latency' has a value
     *
     * @return bool
     */
    public function hasRouterGameserverLatency()
    {
        return $this->router_gameserver_latency !== null;
    }

    /**
     * Get 'router_gameserver_latency' value
     *
     * @return int
     */
    public function getRouterGameserverLatency()
    {
        return $this->router_gameserver_latency;
    }

    /**
     * Set 'router_gameserver_latency' value
     *
     * @param int $value
     */
    public function setRouterGameserverLatency($value = null)
    {
        $this->router_gameserver_latency = $value;
    }

    /**
     * Check if 'seq_number_router' has a value
     *
     * @return bool
     */
    public function hasSeqNumberRouter()
    {
        return $this->seq_number_router !== null;
    }

    /**
     * Get 'seq_number_router' value
     *
     * @return int
     */
    public function getSeqNumberRouter()
    {
        return $this->seq_number_router;
    }

    /**
     * Set 'seq_number_router' value
     *
     * @param int $value
     */
    public function setSeqNumberRouter($value = null)
    {
        $this->seq_number_router = $value;
    }

    /**
     * Check if 'seq_number_e2e' has a value
     *
     * @return bool
     */
    public function hasSeqNumberE2e()
    {
        return $this->seq_number_e2e !== null;
    }

    /**
     * Get 'seq_number_e2e' value
     *
     * @return int
     */
    public function getSeqNumberE2e()
    {
        return $this->seq_number_e2e;
    }

    /**
     * Set 'seq_number_e2e' value
     *
     * @param int $value
     */
    public function setSeqNumberE2e($value = null)
    {
        $this->seq_number_e2e = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'client_session' => null,
            'client_steam_id' => null,
            'client_timestamp' => null,
            'router_timestamp' => null,
            'router_gameserver_latency' => null,
            'seq_number_router' => null,
            'seq_number_e2e' => null
        ], $values);

        $message->setClientSession($values['client_session']);
        $message->setClientSteamId($values['client_steam_id']);
        $message->setClientTimestamp($values['client_timestamp']);
        $message->setRouterTimestamp($values['router_timestamp']);
        $message->setRouterGameserverLatency($values['router_gameserver_latency']);
        $message->setSeqNumberRouter($values['seq_number_router']);
        $message->setSeqNumberE2e($values['seq_number_e2e']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgSteamDatagramGameserverPing',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'client_session',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'client_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'client_timestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'router_timestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'router_gameserver_latency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'seq_number_router',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'seq_number_e2e',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->client_session !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->client_session);
        }

        if ($this->client_steam_id !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->client_steam_id);
        }

        if ($this->client_timestamp !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFixed32($stream, $this->client_timestamp);
        }

        if ($this->router_timestamp !== null) {
            $writer->writeVarint($stream, 37);
            $writer->writeFixed32($stream, $this->router_timestamp);
        }

        if ($this->router_gameserver_latency !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->router_gameserver_latency);
        }

        if ($this->seq_number_router !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->seq_number_router);
        }

        if ($this->seq_number_e2e !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->seq_number_e2e);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->client_session = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->client_steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->client_timestamp = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->router_timestamp = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->router_gameserver_latency = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seq_number_router = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seq_number_e2e = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->client_session !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->client_session);
        }

        if ($this->client_steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->client_timestamp !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->router_timestamp !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->router_gameserver_latency !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->router_gameserver_latency);
        }

        if ($this->seq_number_router !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seq_number_router);
        }

        if ($this->seq_number_e2e !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seq_number_e2e);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->client_session = null;
        $this->client_steam_id = null;
        $this->client_timestamp = null;
        $this->router_timestamp = null;
        $this->router_gameserver_latency = null;
        $this->seq_number_router = null;
        $this->seq_number_e2e = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameserverPing) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->client_session = ($message->client_session !== null) ? $message->client_session : $this->client_session;
        $this->client_steam_id = ($message->client_steam_id !== null) ? $message->client_steam_id : $this->client_steam_id;
        $this->client_timestamp = ($message->client_timestamp !== null) ? $message->client_timestamp : $this->client_timestamp;
        $this->router_timestamp = ($message->router_timestamp !== null) ? $message->router_timestamp : $this->router_timestamp;
        $this->router_gameserver_latency = ($message->router_gameserver_latency !== null) ? $message->router_gameserver_latency : $this->router_gameserver_latency;
        $this->seq_number_router = ($message->seq_number_router !== null) ? $message->seq_number_router : $this->seq_number_router;
        $this->seq_number_e2e = ($message->seq_number_e2e !== null) ? $message->seq_number_e2e : $this->seq_number_e2e;
    }


}

