<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steamdatagram_messages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamDatagramMsg;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramGameServerAuthTicket
 */
class CMsgSteamDatagramGameServerAuthTicket extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * time_expiry optional fixed32 = 1
     *
     * @var int
     */
    protected $time_expiry = null;

    /**
     * authorized_steam_id optional fixed64 = 2
     *
     * @var int
     */
    protected $authorized_steam_id = null;

    /**
     * authorized_public_ip optional fixed32 = 3
     *
     * @var int
     */
    protected $authorized_public_ip = null;

    /**
     * gameserver_steam_id optional fixed64 = 4
     *
     * @var int
     */
    protected $gameserver_steam_id = null;

    /**
     * gameserver_net_id optional fixed64 = 5
     *
     * @var int
     */
    protected $gameserver_net_id = null;

    /**
     * signature optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $signature = null;

    /**
     * app_id optional uint32 = 7
     *
     * @var int
     */
    protected $app_id = null;

    /**
     * extra_fields repeated message = 8
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket\ExtraField>
     */
    protected $extra_fields = null;

    /**
     * Check if 'time_expiry' has a value
     *
     * @return bool
     */
    public function hasTimeExpiry()
    {
        return $this->time_expiry !== null;
    }

    /**
     * Get 'time_expiry' value
     *
     * @return int
     */
    public function getTimeExpiry()
    {
        return $this->time_expiry;
    }

    /**
     * Set 'time_expiry' value
     *
     * @param int $value
     */
    public function setTimeExpiry($value = null)
    {
        $this->time_expiry = $value;
    }

    /**
     * Check if 'authorized_steam_id' has a value
     *
     * @return bool
     */
    public function hasAuthorizedSteamId()
    {
        return $this->authorized_steam_id !== null;
    }

    /**
     * Get 'authorized_steam_id' value
     *
     * @return int
     */
    public function getAuthorizedSteamId()
    {
        return $this->authorized_steam_id;
    }

    /**
     * Set 'authorized_steam_id' value
     *
     * @param int $value
     */
    public function setAuthorizedSteamId($value = null)
    {
        $this->authorized_steam_id = $value;
    }

    /**
     * Check if 'authorized_public_ip' has a value
     *
     * @return bool
     */
    public function hasAuthorizedPublicIp()
    {
        return $this->authorized_public_ip !== null;
    }

    /**
     * Get 'authorized_public_ip' value
     *
     * @return int
     */
    public function getAuthorizedPublicIp()
    {
        return $this->authorized_public_ip;
    }

    /**
     * Set 'authorized_public_ip' value
     *
     * @param int $value
     */
    public function setAuthorizedPublicIp($value = null)
    {
        $this->authorized_public_ip = $value;
    }

    /**
     * Check if 'gameserver_steam_id' has a value
     *
     * @return bool
     */
    public function hasGameserverSteamId()
    {
        return $this->gameserver_steam_id !== null;
    }

    /**
     * Get 'gameserver_steam_id' value
     *
     * @return int
     */
    public function getGameserverSteamId()
    {
        return $this->gameserver_steam_id;
    }

    /**
     * Set 'gameserver_steam_id' value
     *
     * @param int $value
     */
    public function setGameserverSteamId($value = null)
    {
        $this->gameserver_steam_id = $value;
    }

    /**
     * Check if 'gameserver_net_id' has a value
     *
     * @return bool
     */
    public function hasGameserverNetId()
    {
        return $this->gameserver_net_id !== null;
    }

    /**
     * Get 'gameserver_net_id' value
     *
     * @return int
     */
    public function getGameserverNetId()
    {
        return $this->gameserver_net_id;
    }

    /**
     * Set 'gameserver_net_id' value
     *
     * @param int $value
     */
    public function setGameserverNetId($value = null)
    {
        $this->gameserver_net_id = $value;
    }

    /**
     * Check if 'signature' has a value
     *
     * @return bool
     */
    public function hasSignature()
    {
        return $this->signature !== null;
    }

    /**
     * Get 'signature' value
     *
     * @return \Protobuf\Stream
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * Set 'signature' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSignature($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->signature = $value;
    }

    /**
     * Check if 'app_id' has a value
     *
     * @return bool
     */
    public function hasAppId()
    {
        return $this->app_id !== null;
    }

    /**
     * Get 'app_id' value
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * Set 'app_id' value
     *
     * @param int $value
     */
    public function setAppId($value = null)
    {
        $this->app_id = $value;
    }

    /**
     * Check if 'extra_fields' has a value
     *
     * @return bool
     */
    public function hasExtraFieldsList()
    {
        return $this->extra_fields !== null;
    }

    /**
     * Get 'extra_fields' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket\ExtraField>
     */
    public function getExtraFieldsList()
    {
        return $this->extra_fields;
    }

    /**
     * Set 'extra_fields' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket\ExtraField> $value
     */
    public function setExtraFieldsList(\Protobuf\Collection $value = null)
    {
        $this->extra_fields = $value;
    }

    /**
     * Add a new element to 'extra_fields'
     *
     * @param
     * \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket\ExtraField
     * $value
     */
    public function addExtraFields(\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket\ExtraField $value)
    {
        if ($this->extra_fields === null) {
            $this->extra_fields = new \Protobuf\MessageCollection();
        }

        $this->extra_fields->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'time_expiry' => null,
            'authorized_steam_id' => null,
            'authorized_public_ip' => null,
            'gameserver_steam_id' => null,
            'gameserver_net_id' => null,
            'signature' => null,
            'app_id' => null,
            'extra_fields' => []
        ], $values);

        $message->setTimeExpiry($values['time_expiry']);
        $message->setAuthorizedSteamId($values['authorized_steam_id']);
        $message->setAuthorizedPublicIp($values['authorized_public_ip']);
        $message->setGameserverSteamId($values['gameserver_steam_id']);
        $message->setGameserverNetId($values['gameserver_net_id']);
        $message->setSignature($values['signature']);
        $message->setAppId($values['app_id']);

        foreach ($values['extra_fields'] as $item) {
            $message->addExtraFields($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgSteamDatagramGameServerAuthTicket',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'time_expiry',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'authorized_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'authorized_public_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'gameserver_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'gameserver_net_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'signature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'extra_fields',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramGameServerAuthTicket.ExtraField'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->time_expiry !== null) {
            $writer->writeVarint($stream, 13);
            $writer->writeFixed32($stream, $this->time_expiry);
        }

        if ($this->authorized_steam_id !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->authorized_steam_id);
        }

        if ($this->authorized_public_ip !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFixed32($stream, $this->authorized_public_ip);
        }

        if ($this->gameserver_steam_id !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeFixed64($stream, $this->gameserver_steam_id);
        }

        if ($this->gameserver_net_id !== null) {
            $writer->writeVarint($stream, 41);
            $writer->writeFixed64($stream, $this->gameserver_net_id);
        }

        if ($this->signature !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->signature);
        }

        if ($this->app_id !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->app_id);
        }

        if ($this->extra_fields !== null) {
            foreach ($this->extra_fields as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->time_expiry = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->authorized_steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->authorized_public_ip = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->gameserver_steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->gameserver_net_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->signature = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket\ExtraField();

                if ($this->extra_fields === null) {
                    $this->extra_fields = new \Protobuf\MessageCollection();
                }

                $this->extra_fields->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->time_expiry !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->authorized_steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->authorized_public_ip !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->gameserver_steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->gameserver_net_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->signature !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->signature);
        }

        if ($this->app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_id);
        }

        if ($this->extra_fields !== null) {
            foreach ($this->extra_fields as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->time_expiry = null;
        $this->authorized_steam_id = null;
        $this->authorized_public_ip = null;
        $this->gameserver_steam_id = null;
        $this->gameserver_net_id = null;
        $this->signature = null;
        $this->app_id = null;
        $this->extra_fields = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramGameServerAuthTicket) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->time_expiry = ($message->time_expiry !== null) ? $message->time_expiry : $this->time_expiry;
        $this->authorized_steam_id = ($message->authorized_steam_id !== null) ? $message->authorized_steam_id : $this->authorized_steam_id;
        $this->authorized_public_ip = ($message->authorized_public_ip !== null) ? $message->authorized_public_ip : $this->authorized_public_ip;
        $this->gameserver_steam_id = ($message->gameserver_steam_id !== null) ? $message->gameserver_steam_id : $this->gameserver_steam_id;
        $this->gameserver_net_id = ($message->gameserver_net_id !== null) ? $message->gameserver_net_id : $this->gameserver_net_id;
        $this->signature = ($message->signature !== null) ? $message->signature : $this->signature;
        $this->app_id = ($message->app_id !== null) ? $message->app_id : $this->app_id;
        $this->extra_fields = ($message->extra_fields !== null) ? $message->extra_fields : $this->extra_fields;
    }


}

