<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steamdatagram_messages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamDatagramMsg;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramConnectionStatsRouterToClient
 */
class CMsgSteamDatagramConnectionStatsRouterToClient extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * r2c optional message = 1
     *
     * @var \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality
     */
    protected $r2c = null;

    /**
     * s2c optional message = 2
     *
     * @var \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality
     */
    protected $s2c = null;

    /**
     * client_timestamp_from_router optional fixed32 = 3
     *
     * @var int
     */
    protected $client_timestamp_from_router = null;

    /**
     * client_timestamp_from_server optional fixed32 = 4
     *
     * @var int
     */
    protected $client_timestamp_from_server = null;

    /**
     * router_gameserver_latency optional uint32 = 5
     *
     * @var int
     */
    protected $router_gameserver_latency = null;

    /**
     * seconds_until_shutdown optional uint32 = 6
     *
     * @var int
     */
    protected $seconds_until_shutdown = null;

    /**
     * migrate_request_ip optional fixed32 = 10
     *
     * @var int
     */
    protected $migrate_request_ip = null;

    /**
     * migrate_request_port optional uint32 = 11
     *
     * @var int
     */
    protected $migrate_request_port = null;

    /**
     * scoring_penalty_relay_cluster optional uint32 = 12
     *
     * @var int
     */
    protected $scoring_penalty_relay_cluster = null;

    /**
     * client_cookie optional fixed32 = 7
     *
     * @var int
     */
    protected $client_cookie = null;

    /**
     * seq_num_r2c optional uint32 = 8
     *
     * @var int
     */
    protected $seq_num_r2c = null;

    /**
     * seq_num_s2c optional uint32 = 9
     *
     * @var int
     */
    protected $seq_num_s2c = null;

    /**
     * Check if 'r2c' has a value
     *
     * @return bool
     */
    public function hasR2c()
    {
        return $this->r2c !== null;
    }

    /**
     * Get 'r2c' value
     *
     * @return \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality
     */
    public function getR2c()
    {
        return $this->r2c;
    }

    /**
     * Set 'r2c' value
     *
     * @param \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality $value
     */
    public function setR2c(\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality $value = null)
    {
        $this->r2c = $value;
    }

    /**
     * Check if 's2c' has a value
     *
     * @return bool
     */
    public function hasS2c()
    {
        return $this->s2c !== null;
    }

    /**
     * Get 's2c' value
     *
     * @return \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality
     */
    public function getS2c()
    {
        return $this->s2c;
    }

    /**
     * Set 's2c' value
     *
     * @param \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality $value
     */
    public function setS2c(\SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality $value = null)
    {
        $this->s2c = $value;
    }

    /**
     * Check if 'client_timestamp_from_router' has a value
     *
     * @return bool
     */
    public function hasClientTimestampFromRouter()
    {
        return $this->client_timestamp_from_router !== null;
    }

    /**
     * Get 'client_timestamp_from_router' value
     *
     * @return int
     */
    public function getClientTimestampFromRouter()
    {
        return $this->client_timestamp_from_router;
    }

    /**
     * Set 'client_timestamp_from_router' value
     *
     * @param int $value
     */
    public function setClientTimestampFromRouter($value = null)
    {
        $this->client_timestamp_from_router = $value;
    }

    /**
     * Check if 'client_timestamp_from_server' has a value
     *
     * @return bool
     */
    public function hasClientTimestampFromServer()
    {
        return $this->client_timestamp_from_server !== null;
    }

    /**
     * Get 'client_timestamp_from_server' value
     *
     * @return int
     */
    public function getClientTimestampFromServer()
    {
        return $this->client_timestamp_from_server;
    }

    /**
     * Set 'client_timestamp_from_server' value
     *
     * @param int $value
     */
    public function setClientTimestampFromServer($value = null)
    {
        $this->client_timestamp_from_server = $value;
    }

    /**
     * Check if 'router_gameserver_latency' has a value
     *
     * @return bool
     */
    public function hasRouterGameserverLatency()
    {
        return $this->router_gameserver_latency !== null;
    }

    /**
     * Get 'router_gameserver_latency' value
     *
     * @return int
     */
    public function getRouterGameserverLatency()
    {
        return $this->router_gameserver_latency;
    }

    /**
     * Set 'router_gameserver_latency' value
     *
     * @param int $value
     */
    public function setRouterGameserverLatency($value = null)
    {
        $this->router_gameserver_latency = $value;
    }

    /**
     * Check if 'seconds_until_shutdown' has a value
     *
     * @return bool
     */
    public function hasSecondsUntilShutdown()
    {
        return $this->seconds_until_shutdown !== null;
    }

    /**
     * Get 'seconds_until_shutdown' value
     *
     * @return int
     */
    public function getSecondsUntilShutdown()
    {
        return $this->seconds_until_shutdown;
    }

    /**
     * Set 'seconds_until_shutdown' value
     *
     * @param int $value
     */
    public function setSecondsUntilShutdown($value = null)
    {
        $this->seconds_until_shutdown = $value;
    }

    /**
     * Check if 'migrate_request_ip' has a value
     *
     * @return bool
     */
    public function hasMigrateRequestIp()
    {
        return $this->migrate_request_ip !== null;
    }

    /**
     * Get 'migrate_request_ip' value
     *
     * @return int
     */
    public function getMigrateRequestIp()
    {
        return $this->migrate_request_ip;
    }

    /**
     * Set 'migrate_request_ip' value
     *
     * @param int $value
     */
    public function setMigrateRequestIp($value = null)
    {
        $this->migrate_request_ip = $value;
    }

    /**
     * Check if 'migrate_request_port' has a value
     *
     * @return bool
     */
    public function hasMigrateRequestPort()
    {
        return $this->migrate_request_port !== null;
    }

    /**
     * Get 'migrate_request_port' value
     *
     * @return int
     */
    public function getMigrateRequestPort()
    {
        return $this->migrate_request_port;
    }

    /**
     * Set 'migrate_request_port' value
     *
     * @param int $value
     */
    public function setMigrateRequestPort($value = null)
    {
        $this->migrate_request_port = $value;
    }

    /**
     * Check if 'scoring_penalty_relay_cluster' has a value
     *
     * @return bool
     */
    public function hasScoringPenaltyRelayCluster()
    {
        return $this->scoring_penalty_relay_cluster !== null;
    }

    /**
     * Get 'scoring_penalty_relay_cluster' value
     *
     * @return int
     */
    public function getScoringPenaltyRelayCluster()
    {
        return $this->scoring_penalty_relay_cluster;
    }

    /**
     * Set 'scoring_penalty_relay_cluster' value
     *
     * @param int $value
     */
    public function setScoringPenaltyRelayCluster($value = null)
    {
        $this->scoring_penalty_relay_cluster = $value;
    }

    /**
     * Check if 'client_cookie' has a value
     *
     * @return bool
     */
    public function hasClientCookie()
    {
        return $this->client_cookie !== null;
    }

    /**
     * Get 'client_cookie' value
     *
     * @return int
     */
    public function getClientCookie()
    {
        return $this->client_cookie;
    }

    /**
     * Set 'client_cookie' value
     *
     * @param int $value
     */
    public function setClientCookie($value = null)
    {
        $this->client_cookie = $value;
    }

    /**
     * Check if 'seq_num_r2c' has a value
     *
     * @return bool
     */
    public function hasSeqNumR2c()
    {
        return $this->seq_num_r2c !== null;
    }

    /**
     * Get 'seq_num_r2c' value
     *
     * @return int
     */
    public function getSeqNumR2c()
    {
        return $this->seq_num_r2c;
    }

    /**
     * Set 'seq_num_r2c' value
     *
     * @param int $value
     */
    public function setSeqNumR2c($value = null)
    {
        $this->seq_num_r2c = $value;
    }

    /**
     * Check if 'seq_num_s2c' has a value
     *
     * @return bool
     */
    public function hasSeqNumS2c()
    {
        return $this->seq_num_s2c !== null;
    }

    /**
     * Get 'seq_num_s2c' value
     *
     * @return int
     */
    public function getSeqNumS2c()
    {
        return $this->seq_num_s2c;
    }

    /**
     * Set 'seq_num_s2c' value
     *
     * @param int $value
     */
    public function setSeqNumS2c($value = null)
    {
        $this->seq_num_s2c = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'r2c' => null,
            's2c' => null,
            'client_timestamp_from_router' => null,
            'client_timestamp_from_server' => null,
            'router_gameserver_latency' => null,
            'seconds_until_shutdown' => null,
            'migrate_request_ip' => null,
            'migrate_request_port' => null,
            'scoring_penalty_relay_cluster' => null,
            'client_cookie' => null,
            'seq_num_r2c' => null,
            'seq_num_s2c' => null
        ], $values);

        $message->setR2c($values['r2c']);
        $message->setS2c($values['s2c']);
        $message->setClientTimestampFromRouter($values['client_timestamp_from_router']);
        $message->setClientTimestampFromServer($values['client_timestamp_from_server']);
        $message->setRouterGameserverLatency($values['router_gameserver_latency']);
        $message->setSecondsUntilShutdown($values['seconds_until_shutdown']);
        $message->setMigrateRequestIp($values['migrate_request_ip']);
        $message->setMigrateRequestPort($values['migrate_request_port']);
        $message->setScoringPenaltyRelayCluster($values['scoring_penalty_relay_cluster']);
        $message->setClientCookie($values['client_cookie']);
        $message->setSeqNumR2c($values['seq_num_r2c']);
        $message->setSeqNumS2c($values['seq_num_s2c']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgSteamDatagramConnectionStatsRouterToClient',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'r2c',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramConnectionQuality'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 's2c',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.GC.TF2.SteamDatagramMsg.CMsgSteamDatagramConnectionQuality'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'client_timestamp_from_router',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'client_timestamp_from_server',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'router_gameserver_latency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'seconds_until_shutdown',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'migrate_request_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'migrate_request_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'scoring_penalty_relay_cluster',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'client_cookie',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'seq_num_r2c',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'seq_num_s2c',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->r2c !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->r2c->serializedSize($sizeContext));
            $this->r2c->writeTo($context);
        }

        if ($this->s2c !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->s2c->serializedSize($sizeContext));
            $this->s2c->writeTo($context);
        }

        if ($this->client_timestamp_from_router !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFixed32($stream, $this->client_timestamp_from_router);
        }

        if ($this->client_timestamp_from_server !== null) {
            $writer->writeVarint($stream, 37);
            $writer->writeFixed32($stream, $this->client_timestamp_from_server);
        }

        if ($this->router_gameserver_latency !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->router_gameserver_latency);
        }

        if ($this->seconds_until_shutdown !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->seconds_until_shutdown);
        }

        if ($this->migrate_request_ip !== null) {
            $writer->writeVarint($stream, 85);
            $writer->writeFixed32($stream, $this->migrate_request_ip);
        }

        if ($this->migrate_request_port !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->migrate_request_port);
        }

        if ($this->scoring_penalty_relay_cluster !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->scoring_penalty_relay_cluster);
        }

        if ($this->client_cookie !== null) {
            $writer->writeVarint($stream, 61);
            $writer->writeFixed32($stream, $this->client_cookie);
        }

        if ($this->seq_num_r2c !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->seq_num_r2c);
        }

        if ($this->seq_num_s2c !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->seq_num_s2c);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality();

                $this->r2c = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionQuality();

                $this->s2c = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->client_timestamp_from_router = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->client_timestamp_from_server = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->router_gameserver_latency = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seconds_until_shutdown = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->migrate_request_ip = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->migrate_request_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->scoring_penalty_relay_cluster = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->client_cookie = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seq_num_r2c = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->seq_num_s2c = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->r2c !== null) {
            $innerSize = $this->r2c->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->s2c !== null) {
            $innerSize = $this->s2c->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->client_timestamp_from_router !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->client_timestamp_from_server !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->router_gameserver_latency !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->router_gameserver_latency);
        }

        if ($this->seconds_until_shutdown !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seconds_until_shutdown);
        }

        if ($this->migrate_request_ip !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->migrate_request_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->migrate_request_port);
        }

        if ($this->scoring_penalty_relay_cluster !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->scoring_penalty_relay_cluster);
        }

        if ($this->client_cookie !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->seq_num_r2c !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seq_num_r2c);
        }

        if ($this->seq_num_s2c !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->seq_num_s2c);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->r2c = null;
        $this->s2c = null;
        $this->client_timestamp_from_router = null;
        $this->client_timestamp_from_server = null;
        $this->router_gameserver_latency = null;
        $this->seconds_until_shutdown = null;
        $this->migrate_request_ip = null;
        $this->migrate_request_port = null;
        $this->scoring_penalty_relay_cluster = null;
        $this->client_cookie = null;
        $this->seq_num_r2c = null;
        $this->seq_num_s2c = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamDatagramMsg\CMsgSteamDatagramConnectionStatsRouterToClient) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->r2c = ($message->r2c !== null) ? $message->r2c : $this->r2c;
        $this->s2c = ($message->s2c !== null) ? $message->s2c : $this->s2c;
        $this->client_timestamp_from_router = ($message->client_timestamp_from_router !== null) ? $message->client_timestamp_from_router : $this->client_timestamp_from_router;
        $this->client_timestamp_from_server = ($message->client_timestamp_from_server !== null) ? $message->client_timestamp_from_server : $this->client_timestamp_from_server;
        $this->router_gameserver_latency = ($message->router_gameserver_latency !== null) ? $message->router_gameserver_latency : $this->router_gameserver_latency;
        $this->seconds_until_shutdown = ($message->seconds_until_shutdown !== null) ? $message->seconds_until_shutdown : $this->seconds_until_shutdown;
        $this->migrate_request_ip = ($message->migrate_request_ip !== null) ? $message->migrate_request_ip : $this->migrate_request_ip;
        $this->migrate_request_port = ($message->migrate_request_port !== null) ? $message->migrate_request_port : $this->migrate_request_port;
        $this->scoring_penalty_relay_cluster = ($message->scoring_penalty_relay_cluster !== null) ? $message->scoring_penalty_relay_cluster : $this->scoring_penalty_relay_cluster;
        $this->client_cookie = ($message->client_cookie !== null) ? $message->client_cookie : $this->client_cookie;
        $this->seq_num_r2c = ($message->seq_num_r2c !== null) ? $message->seq_num_r2c : $this->seq_num_r2c;
        $this->seq_num_s2c = ($message->seq_num_s2c !== null) ? $message->seq_num_s2c : $this->seq_num_s2c;
    }


}

