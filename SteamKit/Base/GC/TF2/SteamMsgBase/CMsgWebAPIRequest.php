<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steammessages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamMsgBase;

/**
 * Protobuf message : SteamKit.Base.GC.TF2.SteamMsgBase.CMsgWebAPIRequest
 */
class CMsgWebAPIRequest extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * UNUSED_job_name optional string = 1
     *
     * @var string
     */
    protected $UNUSED_job_name = null;

    /**
     * interface_name optional string = 2
     *
     * @var string
     */
    protected $interface_name = null;

    /**
     * method_name optional string = 3
     *
     * @var string
     */
    protected $method_name = null;

    /**
     * version optional uint32 = 4
     *
     * @var int
     */
    protected $version = null;

    /**
     * api_key optional message = 5
     *
     * @var \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgWebAPIKey
     */
    protected $api_key = null;

    /**
     * request optional message = 6
     *
     * @var \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgHttpRequest
     */
    protected $request = null;

    /**
     * routing_app_id optional uint32 = 7
     *
     * @var int
     */
    protected $routing_app_id = null;

    /**
     * Check if 'UNUSED_job_name' has a value
     *
     * @return bool
     */
    public function hasUNUSEDJobName()
    {
        return $this->UNUSED_job_name !== null;
    }

    /**
     * Get 'UNUSED_job_name' value
     *
     * @return string
     */
    public function getUNUSEDJobName()
    {
        return $this->UNUSED_job_name;
    }

    /**
     * Set 'UNUSED_job_name' value
     *
     * @param string $value
     */
    public function setUNUSEDJobName($value = null)
    {
        $this->UNUSED_job_name = $value;
    }

    /**
     * Check if 'interface_name' has a value
     *
     * @return bool
     */
    public function hasInterfaceName()
    {
        return $this->interface_name !== null;
    }

    /**
     * Get 'interface_name' value
     *
     * @return string
     */
    public function getInterfaceName()
    {
        return $this->interface_name;
    }

    /**
     * Set 'interface_name' value
     *
     * @param string $value
     */
    public function setInterfaceName($value = null)
    {
        $this->interface_name = $value;
    }

    /**
     * Check if 'method_name' has a value
     *
     * @return bool
     */
    public function hasMethodName()
    {
        return $this->method_name !== null;
    }

    /**
     * Get 'method_name' value
     *
     * @return string
     */
    public function getMethodName()
    {
        return $this->method_name;
    }

    /**
     * Set 'method_name' value
     *
     * @param string $value
     */
    public function setMethodName($value = null)
    {
        $this->method_name = $value;
    }

    /**
     * Check if 'version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->version !== null;
    }

    /**
     * Get 'version' value
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set 'version' value
     *
     * @param int $value
     */
    public function setVersion($value = null)
    {
        $this->version = $value;
    }

    /**
     * Check if 'api_key' has a value
     *
     * @return bool
     */
    public function hasApiKey()
    {
        return $this->api_key !== null;
    }

    /**
     * Get 'api_key' value
     *
     * @return \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgWebAPIKey
     */
    public function getApiKey()
    {
        return $this->api_key;
    }

    /**
     * Set 'api_key' value
     *
     * @param \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgWebAPIKey $value
     */
    public function setApiKey(\SteamKit\Base\GC\TF2\SteamMsgBase\CMsgWebAPIKey $value = null)
    {
        $this->api_key = $value;
    }

    /**
     * Check if 'request' has a value
     *
     * @return bool
     */
    public function hasRequest()
    {
        return $this->request !== null;
    }

    /**
     * Get 'request' value
     *
     * @return \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgHttpRequest
     */
    public function getRequest()
    {
        return $this->request;
    }

    /**
     * Set 'request' value
     *
     * @param \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgHttpRequest $value
     */
    public function setRequest(\SteamKit\Base\GC\TF2\SteamMsgBase\CMsgHttpRequest $value = null)
    {
        $this->request = $value;
    }

    /**
     * Check if 'routing_app_id' has a value
     *
     * @return bool
     */
    public function hasRoutingAppId()
    {
        return $this->routing_app_id !== null;
    }

    /**
     * Get 'routing_app_id' value
     *
     * @return int
     */
    public function getRoutingAppId()
    {
        return $this->routing_app_id;
    }

    /**
     * Set 'routing_app_id' value
     *
     * @param int $value
     */
    public function setRoutingAppId($value = null)
    {
        $this->routing_app_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'UNUSED_job_name' => null,
            'interface_name' => null,
            'method_name' => null,
            'version' => null,
            'api_key' => null,
            'request' => null,
            'routing_app_id' => null
        ], $values);

        $message->setUNUSEDJobName($values['UNUSED_job_name']);
        $message->setInterfaceName($values['interface_name']);
        $message->setMethodName($values['method_name']);
        $message->setVersion($values['version']);
        $message->setApiKey($values['api_key']);
        $message->setRequest($values['request']);
        $message->setRoutingAppId($values['routing_app_id']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgWebAPIRequest',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'UNUSED_job_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'interface_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'method_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'api_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.GC.TF2.SteamMsgBase.CMsgWebAPIKey'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'request',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.GC.TF2.SteamMsgBase.CMsgHttpRequest'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'routing_app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->UNUSED_job_name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->UNUSED_job_name);
        }

        if ($this->interface_name !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->interface_name);
        }

        if ($this->method_name !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->method_name);
        }

        if ($this->version !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->version);
        }

        if ($this->api_key !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->api_key->serializedSize($sizeContext));
            $this->api_key->writeTo($context);
        }

        if ($this->request !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->request->serializedSize($sizeContext));
            $this->request->writeTo($context);
        }

        if ($this->routing_app_id !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->routing_app_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UNUSED_job_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->interface_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->method_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgWebAPIKey();

                $this->api_key = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgHttpRequest();

                $this->request = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->routing_app_id = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->UNUSED_job_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UNUSED_job_name);
        }

        if ($this->interface_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->interface_name);
        }

        if ($this->method_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->method_name);
        }

        if ($this->version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->version);
        }

        if ($this->api_key !== null) {
            $innerSize = $this->api_key->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->request !== null) {
            $innerSize = $this->request->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->routing_app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->routing_app_id);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->UNUSED_job_name = null;
        $this->interface_name = null;
        $this->method_name = null;
        $this->version = null;
        $this->api_key = null;
        $this->request = null;
        $this->routing_app_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamMsgBase\CMsgWebAPIRequest) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->UNUSED_job_name = ($message->UNUSED_job_name !== null) ? $message->UNUSED_job_name : $this->UNUSED_job_name;
        $this->interface_name = ($message->interface_name !== null) ? $message->interface_name : $this->interface_name;
        $this->method_name = ($message->method_name !== null) ? $message->method_name : $this->method_name;
        $this->version = ($message->version !== null) ? $message->version : $this->version;
        $this->api_key = ($message->api_key !== null) ? $message->api_key : $this->api_key;
        $this->request = ($message->request !== null) ? $message->request : $this->request;
        $this->routing_app_id = ($message->routing_app_id !== null) ? $message->routing_app_id : $this->routing_app_id;
    }


}

