<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/steammessages.proto
 */


namespace SteamKit\Base\GC\TF2\SteamMsgBase;

/**
 * Protobuf message :
 * SteamKit.Base.GC.TF2.SteamMsgBase.CGCMsgMemCachedStatsResponse
 */
class CGCMsgMemCachedStatsResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * curr_connections optional uint64 = 1
     *
     * @var int
     */
    protected $curr_connections = null;

    /**
     * cmd_get optional uint64 = 2
     *
     * @var int
     */
    protected $cmd_get = null;

    /**
     * cmd_set optional uint64 = 3
     *
     * @var int
     */
    protected $cmd_set = null;

    /**
     * cmd_flush optional uint64 = 4
     *
     * @var int
     */
    protected $cmd_flush = null;

    /**
     * get_hits optional uint64 = 5
     *
     * @var int
     */
    protected $get_hits = null;

    /**
     * get_misses optional uint64 = 6
     *
     * @var int
     */
    protected $get_misses = null;

    /**
     * delete_hits optional uint64 = 7
     *
     * @var int
     */
    protected $delete_hits = null;

    /**
     * delete_misses optional uint64 = 8
     *
     * @var int
     */
    protected $delete_misses = null;

    /**
     * bytes_read optional uint64 = 9
     *
     * @var int
     */
    protected $bytes_read = null;

    /**
     * bytes_written optional uint64 = 10
     *
     * @var int
     */
    protected $bytes_written = null;

    /**
     * limit_maxbytes optional uint64 = 11
     *
     * @var int
     */
    protected $limit_maxbytes = null;

    /**
     * curr_items optional uint64 = 12
     *
     * @var int
     */
    protected $curr_items = null;

    /**
     * evictions optional uint64 = 13
     *
     * @var int
     */
    protected $evictions = null;

    /**
     * bytes optional uint64 = 14
     *
     * @var int
     */
    protected $bytes = null;

    /**
     * Check if 'curr_connections' has a value
     *
     * @return bool
     */
    public function hasCurrConnections()
    {
        return $this->curr_connections !== null;
    }

    /**
     * Get 'curr_connections' value
     *
     * @return int
     */
    public function getCurrConnections()
    {
        return $this->curr_connections;
    }

    /**
     * Set 'curr_connections' value
     *
     * @param int $value
     */
    public function setCurrConnections($value = null)
    {
        $this->curr_connections = $value;
    }

    /**
     * Check if 'cmd_get' has a value
     *
     * @return bool
     */
    public function hasCmdGet()
    {
        return $this->cmd_get !== null;
    }

    /**
     * Get 'cmd_get' value
     *
     * @return int
     */
    public function getCmdGet()
    {
        return $this->cmd_get;
    }

    /**
     * Set 'cmd_get' value
     *
     * @param int $value
     */
    public function setCmdGet($value = null)
    {
        $this->cmd_get = $value;
    }

    /**
     * Check if 'cmd_set' has a value
     *
     * @return bool
     */
    public function hasCmdSet()
    {
        return $this->cmd_set !== null;
    }

    /**
     * Get 'cmd_set' value
     *
     * @return int
     */
    public function getCmdSet()
    {
        return $this->cmd_set;
    }

    /**
     * Set 'cmd_set' value
     *
     * @param int $value
     */
    public function setCmdSet($value = null)
    {
        $this->cmd_set = $value;
    }

    /**
     * Check if 'cmd_flush' has a value
     *
     * @return bool
     */
    public function hasCmdFlush()
    {
        return $this->cmd_flush !== null;
    }

    /**
     * Get 'cmd_flush' value
     *
     * @return int
     */
    public function getCmdFlush()
    {
        return $this->cmd_flush;
    }

    /**
     * Set 'cmd_flush' value
     *
     * @param int $value
     */
    public function setCmdFlush($value = null)
    {
        $this->cmd_flush = $value;
    }

    /**
     * Check if 'get_hits' has a value
     *
     * @return bool
     */
    public function hasGetHits()
    {
        return $this->get_hits !== null;
    }

    /**
     * Get 'get_hits' value
     *
     * @return int
     */
    public function getGetHits()
    {
        return $this->get_hits;
    }

    /**
     * Set 'get_hits' value
     *
     * @param int $value
     */
    public function setGetHits($value = null)
    {
        $this->get_hits = $value;
    }

    /**
     * Check if 'get_misses' has a value
     *
     * @return bool
     */
    public function hasGetMisses()
    {
        return $this->get_misses !== null;
    }

    /**
     * Get 'get_misses' value
     *
     * @return int
     */
    public function getGetMisses()
    {
        return $this->get_misses;
    }

    /**
     * Set 'get_misses' value
     *
     * @param int $value
     */
    public function setGetMisses($value = null)
    {
        $this->get_misses = $value;
    }

    /**
     * Check if 'delete_hits' has a value
     *
     * @return bool
     */
    public function hasDeleteHits()
    {
        return $this->delete_hits !== null;
    }

    /**
     * Get 'delete_hits' value
     *
     * @return int
     */
    public function getDeleteHits()
    {
        return $this->delete_hits;
    }

    /**
     * Set 'delete_hits' value
     *
     * @param int $value
     */
    public function setDeleteHits($value = null)
    {
        $this->delete_hits = $value;
    }

    /**
     * Check if 'delete_misses' has a value
     *
     * @return bool
     */
    public function hasDeleteMisses()
    {
        return $this->delete_misses !== null;
    }

    /**
     * Get 'delete_misses' value
     *
     * @return int
     */
    public function getDeleteMisses()
    {
        return $this->delete_misses;
    }

    /**
     * Set 'delete_misses' value
     *
     * @param int $value
     */
    public function setDeleteMisses($value = null)
    {
        $this->delete_misses = $value;
    }

    /**
     * Check if 'bytes_read' has a value
     *
     * @return bool
     */
    public function hasBytesRead()
    {
        return $this->bytes_read !== null;
    }

    /**
     * Get 'bytes_read' value
     *
     * @return int
     */
    public function getBytesRead()
    {
        return $this->bytes_read;
    }

    /**
     * Set 'bytes_read' value
     *
     * @param int $value
     */
    public function setBytesRead($value = null)
    {
        $this->bytes_read = $value;
    }

    /**
     * Check if 'bytes_written' has a value
     *
     * @return bool
     */
    public function hasBytesWritten()
    {
        return $this->bytes_written !== null;
    }

    /**
     * Get 'bytes_written' value
     *
     * @return int
     */
    public function getBytesWritten()
    {
        return $this->bytes_written;
    }

    /**
     * Set 'bytes_written' value
     *
     * @param int $value
     */
    public function setBytesWritten($value = null)
    {
        $this->bytes_written = $value;
    }

    /**
     * Check if 'limit_maxbytes' has a value
     *
     * @return bool
     */
    public function hasLimitMaxbytes()
    {
        return $this->limit_maxbytes !== null;
    }

    /**
     * Get 'limit_maxbytes' value
     *
     * @return int
     */
    public function getLimitMaxbytes()
    {
        return $this->limit_maxbytes;
    }

    /**
     * Set 'limit_maxbytes' value
     *
     * @param int $value
     */
    public function setLimitMaxbytes($value = null)
    {
        $this->limit_maxbytes = $value;
    }

    /**
     * Check if 'curr_items' has a value
     *
     * @return bool
     */
    public function hasCurrItems()
    {
        return $this->curr_items !== null;
    }

    /**
     * Get 'curr_items' value
     *
     * @return int
     */
    public function getCurrItems()
    {
        return $this->curr_items;
    }

    /**
     * Set 'curr_items' value
     *
     * @param int $value
     */
    public function setCurrItems($value = null)
    {
        $this->curr_items = $value;
    }

    /**
     * Check if 'evictions' has a value
     *
     * @return bool
     */
    public function hasEvictions()
    {
        return $this->evictions !== null;
    }

    /**
     * Get 'evictions' value
     *
     * @return int
     */
    public function getEvictions()
    {
        return $this->evictions;
    }

    /**
     * Set 'evictions' value
     *
     * @param int $value
     */
    public function setEvictions($value = null)
    {
        $this->evictions = $value;
    }

    /**
     * Check if 'bytes' has a value
     *
     * @return bool
     */
    public function hasBytes()
    {
        return $this->bytes !== null;
    }

    /**
     * Get 'bytes' value
     *
     * @return int
     */
    public function getBytes()
    {
        return $this->bytes;
    }

    /**
     * Set 'bytes' value
     *
     * @param int $value
     */
    public function setBytes($value = null)
    {
        $this->bytes = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'curr_connections' => null,
            'cmd_get' => null,
            'cmd_set' => null,
            'cmd_flush' => null,
            'get_hits' => null,
            'get_misses' => null,
            'delete_hits' => null,
            'delete_misses' => null,
            'bytes_read' => null,
            'bytes_written' => null,
            'limit_maxbytes' => null,
            'curr_items' => null,
            'evictions' => null,
            'bytes' => null
        ], $values);

        $message->setCurrConnections($values['curr_connections']);
        $message->setCmdGet($values['cmd_get']);
        $message->setCmdSet($values['cmd_set']);
        $message->setCmdFlush($values['cmd_flush']);
        $message->setGetHits($values['get_hits']);
        $message->setGetMisses($values['get_misses']);
        $message->setDeleteHits($values['delete_hits']);
        $message->setDeleteMisses($values['delete_misses']);
        $message->setBytesRead($values['bytes_read']);
        $message->setBytesWritten($values['bytes_written']);
        $message->setLimitMaxbytes($values['limit_maxbytes']);
        $message->setCurrItems($values['curr_items']);
        $message->setEvictions($values['evictions']);
        $message->setBytes($values['bytes']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CGCMsgMemCachedStatsResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'curr_connections',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'cmd_get',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'cmd_set',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'cmd_flush',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'get_hits',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'get_misses',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'delete_hits',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'delete_misses',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'bytes_read',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'bytes_written',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'limit_maxbytes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'curr_items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'evictions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'bytes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->curr_connections !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->curr_connections);
        }

        if ($this->cmd_get !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->cmd_get);
        }

        if ($this->cmd_set !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->cmd_set);
        }

        if ($this->cmd_flush !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->cmd_flush);
        }

        if ($this->get_hits !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->get_hits);
        }

        if ($this->get_misses !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->get_misses);
        }

        if ($this->delete_hits !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->delete_hits);
        }

        if ($this->delete_misses !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->delete_misses);
        }

        if ($this->bytes_read !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->bytes_read);
        }

        if ($this->bytes_written !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->bytes_written);
        }

        if ($this->limit_maxbytes !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->limit_maxbytes);
        }

        if ($this->curr_items !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->curr_items);
        }

        if ($this->evictions !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->evictions);
        }

        if ($this->bytes !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->bytes);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->curr_connections = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->cmd_get = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->cmd_set = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->cmd_flush = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->get_hits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->get_misses = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->delete_hits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->delete_misses = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->bytes_read = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->bytes_written = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->limit_maxbytes = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->curr_items = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->evictions = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->bytes = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->curr_connections !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->curr_connections);
        }

        if ($this->cmd_get !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cmd_get);
        }

        if ($this->cmd_set !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cmd_set);
        }

        if ($this->cmd_flush !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cmd_flush);
        }

        if ($this->get_hits !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->get_hits);
        }

        if ($this->get_misses !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->get_misses);
        }

        if ($this->delete_hits !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->delete_hits);
        }

        if ($this->delete_misses !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->delete_misses);
        }

        if ($this->bytes_read !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bytes_read);
        }

        if ($this->bytes_written !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bytes_written);
        }

        if ($this->limit_maxbytes !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->limit_maxbytes);
        }

        if ($this->curr_items !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->curr_items);
        }

        if ($this->evictions !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->evictions);
        }

        if ($this->bytes !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bytes);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->curr_connections = null;
        $this->cmd_get = null;
        $this->cmd_set = null;
        $this->cmd_flush = null;
        $this->get_hits = null;
        $this->get_misses = null;
        $this->delete_hits = null;
        $this->delete_misses = null;
        $this->bytes_read = null;
        $this->bytes_written = null;
        $this->limit_maxbytes = null;
        $this->curr_items = null;
        $this->evictions = null;
        $this->bytes = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\TF2\SteamMsgBase\CGCMsgMemCachedStatsResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->curr_connections = ($message->curr_connections !== null) ? $message->curr_connections : $this->curr_connections;
        $this->cmd_get = ($message->cmd_get !== null) ? $message->cmd_get : $this->cmd_get;
        $this->cmd_set = ($message->cmd_set !== null) ? $message->cmd_set : $this->cmd_set;
        $this->cmd_flush = ($message->cmd_flush !== null) ? $message->cmd_flush : $this->cmd_flush;
        $this->get_hits = ($message->get_hits !== null) ? $message->get_hits : $this->get_hits;
        $this->get_misses = ($message->get_misses !== null) ? $message->get_misses : $this->get_misses;
        $this->delete_hits = ($message->delete_hits !== null) ? $message->delete_hits : $this->delete_hits;
        $this->delete_misses = ($message->delete_misses !== null) ? $message->delete_misses : $this->delete_misses;
        $this->bytes_read = ($message->bytes_read !== null) ? $message->bytes_read : $this->bytes_read;
        $this->bytes_written = ($message->bytes_written !== null) ? $message->bytes_written : $this->bytes_written;
        $this->limit_maxbytes = ($message->limit_maxbytes !== null) ? $message->limit_maxbytes : $this->limit_maxbytes;
        $this->curr_items = ($message->curr_items !== null) ? $message->curr_items : $this->curr_items;
        $this->evictions = ($message->evictions !== null) ? $message->evictions : $this->evictions;
        $this->bytes = ($message->bytes !== null) ? $message->bytes : $this->bytes;
    }


}

