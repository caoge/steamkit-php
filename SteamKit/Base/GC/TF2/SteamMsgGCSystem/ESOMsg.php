<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : tf/gcsystemmsgs.proto
 */


namespace SteamKit\Base\GC\TF2\SteamMsgGCSystem;

/**
 * Protobuf enum : SteamKit.Base.GC.TF2.SteamMsgGCSystem.ESOMsg
 */
class ESOMsg extends \Protobuf\Enum
{

    /**
     * k_ESOMsg_Create = 21
     */
    const k_ESOMsg_Create_VALUE = 21;

    /**
     * k_ESOMsg_Update = 22
     */
    const k_ESOMsg_Update_VALUE = 22;

    /**
     * k_ESOMsg_Destroy = 23
     */
    const k_ESOMsg_Destroy_VALUE = 23;

    /**
     * k_ESOMsg_CacheSubscribed = 24
     */
    const k_ESOMsg_CacheSubscribed_VALUE = 24;

    /**
     * k_ESOMsg_CacheUnsubscribed = 25
     */
    const k_ESOMsg_CacheUnsubscribed_VALUE = 25;

    /**
     * k_ESOMsg_UpdateMultiple = 26
     */
    const k_ESOMsg_UpdateMultiple_VALUE = 26;

    /**
     * k_ESOMsg_CacheSubscriptionCheck = 27
     */
    const k_ESOMsg_CacheSubscriptionCheck_VALUE = 27;

    /**
     * k_ESOMsg_CacheSubscriptionRefresh = 28
     */
    const k_ESOMsg_CacheSubscriptionRefresh_VALUE = 28;

    /**
     * k_ESOMsg_CacheSubscribedUpToDate = 29
     */
    const k_ESOMsg_CacheSubscribedUpToDate_VALUE = 29;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_Create = null;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_Update = null;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_Destroy = null;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_CacheSubscribed = null;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_CacheUnsubscribed = null;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_UpdateMultiple = null;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_CacheSubscriptionCheck = null;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_CacheSubscriptionRefresh = null;

    /**
     * @var \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    protected static $k_ESOMsg_CacheSubscribedUpToDate = null;

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_Create()
    {
        if (self::$k_ESOMsg_Create !== null) {
            return self::$k_ESOMsg_Create;
        }

        return self::$k_ESOMsg_Create = new self('k_ESOMsg_Create', self::k_ESOMsg_Create_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_Update()
    {
        if (self::$k_ESOMsg_Update !== null) {
            return self::$k_ESOMsg_Update;
        }

        return self::$k_ESOMsg_Update = new self('k_ESOMsg_Update', self::k_ESOMsg_Update_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_Destroy()
    {
        if (self::$k_ESOMsg_Destroy !== null) {
            return self::$k_ESOMsg_Destroy;
        }

        return self::$k_ESOMsg_Destroy = new self('k_ESOMsg_Destroy', self::k_ESOMsg_Destroy_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_CacheSubscribed()
    {
        if (self::$k_ESOMsg_CacheSubscribed !== null) {
            return self::$k_ESOMsg_CacheSubscribed;
        }

        return self::$k_ESOMsg_CacheSubscribed = new self('k_ESOMsg_CacheSubscribed', self::k_ESOMsg_CacheSubscribed_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_CacheUnsubscribed()
    {
        if (self::$k_ESOMsg_CacheUnsubscribed !== null) {
            return self::$k_ESOMsg_CacheUnsubscribed;
        }

        return self::$k_ESOMsg_CacheUnsubscribed = new self('k_ESOMsg_CacheUnsubscribed', self::k_ESOMsg_CacheUnsubscribed_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_UpdateMultiple()
    {
        if (self::$k_ESOMsg_UpdateMultiple !== null) {
            return self::$k_ESOMsg_UpdateMultiple;
        }

        return self::$k_ESOMsg_UpdateMultiple = new self('k_ESOMsg_UpdateMultiple', self::k_ESOMsg_UpdateMultiple_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_CacheSubscriptionCheck()
    {
        if (self::$k_ESOMsg_CacheSubscriptionCheck !== null) {
            return self::$k_ESOMsg_CacheSubscriptionCheck;
        }

        return self::$k_ESOMsg_CacheSubscriptionCheck = new self('k_ESOMsg_CacheSubscriptionCheck', self::k_ESOMsg_CacheSubscriptionCheck_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_CacheSubscriptionRefresh()
    {
        if (self::$k_ESOMsg_CacheSubscriptionRefresh !== null) {
            return self::$k_ESOMsg_CacheSubscriptionRefresh;
        }

        return self::$k_ESOMsg_CacheSubscriptionRefresh = new self('k_ESOMsg_CacheSubscriptionRefresh', self::k_ESOMsg_CacheSubscriptionRefresh_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function k_ESOMsg_CacheSubscribedUpToDate()
    {
        if (self::$k_ESOMsg_CacheSubscribedUpToDate !== null) {
            return self::$k_ESOMsg_CacheSubscribedUpToDate;
        }

        return self::$k_ESOMsg_CacheSubscribedUpToDate = new self('k_ESOMsg_CacheSubscribedUpToDate', self::k_ESOMsg_CacheSubscribedUpToDate_VALUE);
    }

    /**
     * @param int $value
     * @return \SteamKit\Base\GC\TF2\SteamMsgGCSystem\ESOMsg
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 21: return self::k_ESOMsg_Create();
            case 22: return self::k_ESOMsg_Update();
            case 23: return self::k_ESOMsg_Destroy();
            case 24: return self::k_ESOMsg_CacheSubscribed();
            case 25: return self::k_ESOMsg_CacheUnsubscribed();
            case 26: return self::k_ESOMsg_UpdateMultiple();
            case 27: return self::k_ESOMsg_CacheSubscriptionCheck();
            case 28: return self::k_ESOMsg_CacheSubscriptionRefresh();
            case 29: return self::k_ESOMsg_CacheSubscribedUpToDate();
            default: return null;
        }
    }


}

