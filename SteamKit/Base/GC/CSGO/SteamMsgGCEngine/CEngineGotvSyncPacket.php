<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/engine_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGCEngine;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGCEngine.CEngineGotvSyncPacket
 */
class CEngineGotvSyncPacket extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * match_id optional uint64 = 1
     *
     * @var int
     */
    protected $match_id = null;

    /**
     * instance_id optional uint32 = 2
     *
     * @var int
     */
    protected $instance_id = null;

    /**
     * signupfragment optional uint32 = 3
     *
     * @var int
     */
    protected $signupfragment = null;

    /**
     * currentfragment optional uint32 = 4
     *
     * @var int
     */
    protected $currentfragment = null;

    /**
     * tickrate optional float = 5
     *
     * @var float
     */
    protected $tickrate = null;

    /**
     * tick optional uint32 = 6
     *
     * @var int
     */
    protected $tick = null;

    /**
     * rtdelay optional float = 8
     *
     * @var float
     */
    protected $rtdelay = null;

    /**
     * rcvage optional float = 9
     *
     * @var float
     */
    protected $rcvage = null;

    /**
     * keyframe_interval optional float = 10
     *
     * @var float
     */
    protected $keyframe_interval = null;

    /**
     * Check if 'match_id' has a value
     *
     * @return bool
     */
    public function hasMatchId()
    {
        return $this->match_id !== null;
    }

    /**
     * Get 'match_id' value
     *
     * @return int
     */
    public function getMatchId()
    {
        return $this->match_id;
    }

    /**
     * Set 'match_id' value
     *
     * @param int $value
     */
    public function setMatchId($value = null)
    {
        $this->match_id = $value;
    }

    /**
     * Check if 'instance_id' has a value
     *
     * @return bool
     */
    public function hasInstanceId()
    {
        return $this->instance_id !== null;
    }

    /**
     * Get 'instance_id' value
     *
     * @return int
     */
    public function getInstanceId()
    {
        return $this->instance_id;
    }

    /**
     * Set 'instance_id' value
     *
     * @param int $value
     */
    public function setInstanceId($value = null)
    {
        $this->instance_id = $value;
    }

    /**
     * Check if 'signupfragment' has a value
     *
     * @return bool
     */
    public function hasSignupfragment()
    {
        return $this->signupfragment !== null;
    }

    /**
     * Get 'signupfragment' value
     *
     * @return int
     */
    public function getSignupfragment()
    {
        return $this->signupfragment;
    }

    /**
     * Set 'signupfragment' value
     *
     * @param int $value
     */
    public function setSignupfragment($value = null)
    {
        $this->signupfragment = $value;
    }

    /**
     * Check if 'currentfragment' has a value
     *
     * @return bool
     */
    public function hasCurrentfragment()
    {
        return $this->currentfragment !== null;
    }

    /**
     * Get 'currentfragment' value
     *
     * @return int
     */
    public function getCurrentfragment()
    {
        return $this->currentfragment;
    }

    /**
     * Set 'currentfragment' value
     *
     * @param int $value
     */
    public function setCurrentfragment($value = null)
    {
        $this->currentfragment = $value;
    }

    /**
     * Check if 'tickrate' has a value
     *
     * @return bool
     */
    public function hasTickrate()
    {
        return $this->tickrate !== null;
    }

    /**
     * Get 'tickrate' value
     *
     * @return float
     */
    public function getTickrate()
    {
        return $this->tickrate;
    }

    /**
     * Set 'tickrate' value
     *
     * @param float $value
     */
    public function setTickrate($value = null)
    {
        $this->tickrate = $value;
    }

    /**
     * Check if 'tick' has a value
     *
     * @return bool
     */
    public function hasTick()
    {
        return $this->tick !== null;
    }

    /**
     * Get 'tick' value
     *
     * @return int
     */
    public function getTick()
    {
        return $this->tick;
    }

    /**
     * Set 'tick' value
     *
     * @param int $value
     */
    public function setTick($value = null)
    {
        $this->tick = $value;
    }

    /**
     * Check if 'rtdelay' has a value
     *
     * @return bool
     */
    public function hasRtdelay()
    {
        return $this->rtdelay !== null;
    }

    /**
     * Get 'rtdelay' value
     *
     * @return float
     */
    public function getRtdelay()
    {
        return $this->rtdelay;
    }

    /**
     * Set 'rtdelay' value
     *
     * @param float $value
     */
    public function setRtdelay($value = null)
    {
        $this->rtdelay = $value;
    }

    /**
     * Check if 'rcvage' has a value
     *
     * @return bool
     */
    public function hasRcvage()
    {
        return $this->rcvage !== null;
    }

    /**
     * Get 'rcvage' value
     *
     * @return float
     */
    public function getRcvage()
    {
        return $this->rcvage;
    }

    /**
     * Set 'rcvage' value
     *
     * @param float $value
     */
    public function setRcvage($value = null)
    {
        $this->rcvage = $value;
    }

    /**
     * Check if 'keyframe_interval' has a value
     *
     * @return bool
     */
    public function hasKeyframeInterval()
    {
        return $this->keyframe_interval !== null;
    }

    /**
     * Get 'keyframe_interval' value
     *
     * @return float
     */
    public function getKeyframeInterval()
    {
        return $this->keyframe_interval;
    }

    /**
     * Set 'keyframe_interval' value
     *
     * @param float $value
     */
    public function setKeyframeInterval($value = null)
    {
        $this->keyframe_interval = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'match_id' => null,
            'instance_id' => null,
            'signupfragment' => null,
            'currentfragment' => null,
            'tickrate' => null,
            'tick' => null,
            'rtdelay' => null,
            'rcvage' => null,
            'keyframe_interval' => null
        ], $values);

        $message->setMatchId($values['match_id']);
        $message->setInstanceId($values['instance_id']);
        $message->setSignupfragment($values['signupfragment']);
        $message->setCurrentfragment($values['currentfragment']);
        $message->setTickrate($values['tickrate']);
        $message->setTick($values['tick']);
        $message->setRtdelay($values['rtdelay']);
        $message->setRcvage($values['rcvage']);
        $message->setKeyframeInterval($values['keyframe_interval']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CEngineGotvSyncPacket',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'match_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'instance_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'signupfragment',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'currentfragment',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'tickrate',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'tick',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'rtdelay',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'rcvage',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'keyframe_interval',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->match_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->match_id);
        }

        if ($this->instance_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->instance_id);
        }

        if ($this->signupfragment !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->signupfragment);
        }

        if ($this->currentfragment !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->currentfragment);
        }

        if ($this->tickrate !== null) {
            $writer->writeVarint($stream, 45);
            $writer->writeFloat($stream, $this->tickrate);
        }

        if ($this->tick !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->tick);
        }

        if ($this->rtdelay !== null) {
            $writer->writeVarint($stream, 69);
            $writer->writeFloat($stream, $this->rtdelay);
        }

        if ($this->rcvage !== null) {
            $writer->writeVarint($stream, 77);
            $writer->writeFloat($stream, $this->rcvage);
        }

        if ($this->keyframe_interval !== null) {
            $writer->writeVarint($stream, 85);
            $writer->writeFloat($stream, $this->keyframe_interval);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->match_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->instance_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->signupfragment = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->currentfragment = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->tickrate = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->tick = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->rtdelay = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->rcvage = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->keyframe_interval = $reader->readFloat($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->match_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->match_id);
        }

        if ($this->instance_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->instance_id);
        }

        if ($this->signupfragment !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->signupfragment);
        }

        if ($this->currentfragment !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->currentfragment);
        }

        if ($this->tickrate !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->tick !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->tick);
        }

        if ($this->rtdelay !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->rcvage !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->keyframe_interval !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->match_id = null;
        $this->instance_id = null;
        $this->signupfragment = null;
        $this->currentfragment = null;
        $this->tickrate = null;
        $this->tick = null;
        $this->rtdelay = null;
        $this->rcvage = null;
        $this->keyframe_interval = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGCEngine\CEngineGotvSyncPacket) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->match_id = ($message->match_id !== null) ? $message->match_id : $this->match_id;
        $this->instance_id = ($message->instance_id !== null) ? $message->instance_id : $this->instance_id;
        $this->signupfragment = ($message->signupfragment !== null) ? $message->signupfragment : $this->signupfragment;
        $this->currentfragment = ($message->currentfragment !== null) ? $message->currentfragment : $this->currentfragment;
        $this->tickrate = ($message->tickrate !== null) ? $message->tickrate : $this->tickrate;
        $this->tick = ($message->tick !== null) ? $message->tick : $this->tick;
        $this->rtdelay = ($message->rtdelay !== null) ? $message->rtdelay : $this->rtdelay;
        $this->rcvage = ($message->rcvage !== null) ? $message->rcvage : $this->rcvage;
        $this->keyframe_interval = ($message->keyframe_interval !== null) ? $message->keyframe_interval : $this->keyframe_interval;
    }


}

