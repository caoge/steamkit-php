<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/gcsdk_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGCSDK;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGCSDK.CMsgClientWelcome
 */
class CMsgClientWelcome extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * version optional uint32 = 1
     *
     * @var int
     */
    protected $version = null;

    /**
     * game_data optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $game_data = null;

    /**
     * outofdate_subscribed_caches repeated message = 3
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscribed>
     */
    protected $outofdate_subscribed_caches = null;

    /**
     * uptodate_subscribed_caches repeated message = 4
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscriptionCheck>
     */
    protected $uptodate_subscribed_caches = null;

    /**
     * location optional message = 5
     *
     * @var \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgClientWelcome\Location
     */
    protected $location = null;

    /**
     * game_data2 optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $game_data2 = null;

    /**
     * rtime32_gc_welcome_timestamp optional uint32 = 7
     *
     * @var int
     */
    protected $rtime32_gc_welcome_timestamp = null;

    /**
     * currency optional uint32 = 8
     *
     * @var int
     */
    protected $currency = null;

    /**
     * Check if 'version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->version !== null;
    }

    /**
     * Get 'version' value
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set 'version' value
     *
     * @param int $value
     */
    public function setVersion($value = null)
    {
        $this->version = $value;
    }

    /**
     * Check if 'game_data' has a value
     *
     * @return bool
     */
    public function hasGameData()
    {
        return $this->game_data !== null;
    }

    /**
     * Get 'game_data' value
     *
     * @return \Protobuf\Stream
     */
    public function getGameData()
    {
        return $this->game_data;
    }

    /**
     * Set 'game_data' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGameData($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->game_data = $value;
    }

    /**
     * Check if 'outofdate_subscribed_caches' has a value
     *
     * @return bool
     */
    public function hasOutofdateSubscribedCachesList()
    {
        return $this->outofdate_subscribed_caches !== null;
    }

    /**
     * Get 'outofdate_subscribed_caches' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscribed>
     */
    public function getOutofdateSubscribedCachesList()
    {
        return $this->outofdate_subscribed_caches;
    }

    /**
     * Set 'outofdate_subscribed_caches' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscribed> $value
     */
    public function setOutofdateSubscribedCachesList(\Protobuf\Collection $value = null)
    {
        $this->outofdate_subscribed_caches = $value;
    }

    /**
     * Add a new element to 'outofdate_subscribed_caches'
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscribed $value
     */
    public function addOutofdateSubscribedCaches(\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscribed $value)
    {
        if ($this->outofdate_subscribed_caches === null) {
            $this->outofdate_subscribed_caches = new \Protobuf\MessageCollection();
        }

        $this->outofdate_subscribed_caches->add($value);
    }

    /**
     * Check if 'uptodate_subscribed_caches' has a value
     *
     * @return bool
     */
    public function hasUptodateSubscribedCachesList()
    {
        return $this->uptodate_subscribed_caches !== null;
    }

    /**
     * Get 'uptodate_subscribed_caches' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscriptionCheck>
     */
    public function getUptodateSubscribedCachesList()
    {
        return $this->uptodate_subscribed_caches;
    }

    /**
     * Set 'uptodate_subscribed_caches' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscriptionCheck> $value
     */
    public function setUptodateSubscribedCachesList(\Protobuf\Collection $value = null)
    {
        $this->uptodate_subscribed_caches = $value;
    }

    /**
     * Add a new element to 'uptodate_subscribed_caches'
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscriptionCheck $value
     */
    public function addUptodateSubscribedCaches(\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscriptionCheck $value)
    {
        if ($this->uptodate_subscribed_caches === null) {
            $this->uptodate_subscribed_caches = new \Protobuf\MessageCollection();
        }

        $this->uptodate_subscribed_caches->add($value);
    }

    /**
     * Check if 'location' has a value
     *
     * @return bool
     */
    public function hasLocation()
    {
        return $this->location !== null;
    }

    /**
     * Get 'location' value
     *
     * @return \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgClientWelcome\Location
     */
    public function getLocation()
    {
        return $this->location;
    }

    /**
     * Set 'location' value
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgClientWelcome\Location $value
     */
    public function setLocation(\SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgClientWelcome\Location $value = null)
    {
        $this->location = $value;
    }

    /**
     * Check if 'game_data2' has a value
     *
     * @return bool
     */
    public function hasGameData2()
    {
        return $this->game_data2 !== null;
    }

    /**
     * Get 'game_data2' value
     *
     * @return \Protobuf\Stream
     */
    public function getGameData2()
    {
        return $this->game_data2;
    }

    /**
     * Set 'game_data2' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGameData2($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->game_data2 = $value;
    }

    /**
     * Check if 'rtime32_gc_welcome_timestamp' has a value
     *
     * @return bool
     */
    public function hasRtime32GcWelcomeTimestamp()
    {
        return $this->rtime32_gc_welcome_timestamp !== null;
    }

    /**
     * Get 'rtime32_gc_welcome_timestamp' value
     *
     * @return int
     */
    public function getRtime32GcWelcomeTimestamp()
    {
        return $this->rtime32_gc_welcome_timestamp;
    }

    /**
     * Set 'rtime32_gc_welcome_timestamp' value
     *
     * @param int $value
     */
    public function setRtime32GcWelcomeTimestamp($value = null)
    {
        $this->rtime32_gc_welcome_timestamp = $value;
    }

    /**
     * Check if 'currency' has a value
     *
     * @return bool
     */
    public function hasCurrency()
    {
        return $this->currency !== null;
    }

    /**
     * Get 'currency' value
     *
     * @return int
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * Set 'currency' value
     *
     * @param int $value
     */
    public function setCurrency($value = null)
    {
        $this->currency = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'version' => null,
            'game_data' => null,
            'outofdate_subscribed_caches' => [],
            'uptodate_subscribed_caches' => [],
            'location' => null,
            'game_data2' => null,
            'rtime32_gc_welcome_timestamp' => null,
            'currency' => null
        ], $values);

        $message->setVersion($values['version']);
        $message->setGameData($values['game_data']);
        $message->setLocation($values['location']);
        $message->setGameData2($values['game_data2']);
        $message->setRtime32GcWelcomeTimestamp($values['rtime32_gc_welcome_timestamp']);
        $message->setCurrency($values['currency']);

        foreach ($values['outofdate_subscribed_caches'] as $item) {
            $message->addOutofdateSubscribedCaches($item);
        }

        foreach ($values['uptodate_subscribed_caches'] as $item) {
            $message->addUptodateSubscribedCaches($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientWelcome',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'game_data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'outofdate_subscribed_caches',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgGCSDK.CMsgSOCacheSubscribed'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'uptodate_subscribed_caches',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgGCSDK.CMsgSOCacheSubscriptionCheck'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'location',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgGCSDK.CMsgClientWelcome.Location'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'game_data2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'rtime32_gc_welcome_timestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'currency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->version !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->version);
        }

        if ($this->game_data !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->game_data);
        }

        if ($this->outofdate_subscribed_caches !== null) {
            foreach ($this->outofdate_subscribed_caches as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->uptodate_subscribed_caches !== null) {
            foreach ($this->uptodate_subscribed_caches as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->location !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->location->serializedSize($sizeContext));
            $this->location->writeTo($context);
        }

        if ($this->game_data2 !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->game_data2);
        }

        if ($this->rtime32_gc_welcome_timestamp !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->rtime32_gc_welcome_timestamp);
        }

        if ($this->currency !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->currency);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->game_data = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscribed();

                if ($this->outofdate_subscribed_caches === null) {
                    $this->outofdate_subscribed_caches = new \Protobuf\MessageCollection();
                }

                $this->outofdate_subscribed_caches->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgSOCacheSubscriptionCheck();

                if ($this->uptodate_subscribed_caches === null) {
                    $this->uptodate_subscribed_caches = new \Protobuf\MessageCollection();
                }

                $this->uptodate_subscribed_caches->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgClientWelcome\Location();

                $this->location = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->game_data2 = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->rtime32_gc_welcome_timestamp = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->currency = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->version);
        }

        if ($this->game_data !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->game_data);
        }

        if ($this->outofdate_subscribed_caches !== null) {
            foreach ($this->outofdate_subscribed_caches as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->uptodate_subscribed_caches !== null) {
            foreach ($this->uptodate_subscribed_caches as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->location !== null) {
            $innerSize = $this->location->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->game_data2 !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->game_data2);
        }

        if ($this->rtime32_gc_welcome_timestamp !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->rtime32_gc_welcome_timestamp);
        }

        if ($this->currency !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->currency);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->version = null;
        $this->game_data = null;
        $this->outofdate_subscribed_caches = null;
        $this->uptodate_subscribed_caches = null;
        $this->location = null;
        $this->game_data2 = null;
        $this->rtime32_gc_welcome_timestamp = null;
        $this->currency = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgClientWelcome) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->version = ($message->version !== null) ? $message->version : $this->version;
        $this->game_data = ($message->game_data !== null) ? $message->game_data : $this->game_data;
        $this->outofdate_subscribed_caches = ($message->outofdate_subscribed_caches !== null) ? $message->outofdate_subscribed_caches : $this->outofdate_subscribed_caches;
        $this->uptodate_subscribed_caches = ($message->uptodate_subscribed_caches !== null) ? $message->uptodate_subscribed_caches : $this->uptodate_subscribed_caches;
        $this->location = ($message->location !== null) ? $message->location : $this->location;
        $this->game_data2 = ($message->game_data2 !== null) ? $message->game_data2 : $this->game_data2;
        $this->rtime32_gc_welcome_timestamp = ($message->rtime32_gc_welcome_timestamp !== null) ? $message->rtime32_gc_welcome_timestamp : $this->rtime32_gc_welcome_timestamp;
        $this->currency = ($message->currency !== null) ? $message->currency : $this->currency;
    }


}

