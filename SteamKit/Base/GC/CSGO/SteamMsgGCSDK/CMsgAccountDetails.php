<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/gcsdk_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGCSDK;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGCSDK.CMsgAccountDetails
 */
class CMsgAccountDetails extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * valid optional bool = 1
     *
     * @var bool
     */
    protected $valid = null;

    /**
     * account_name optional string = 2
     *
     * @var string
     */
    protected $account_name = null;

    /**
     * public_profile optional bool = 4
     *
     * @var bool
     */
    protected $public_profile = null;

    /**
     * public_inventory optional bool = 5
     *
     * @var bool
     */
    protected $public_inventory = null;

    /**
     * vac_banned optional bool = 6
     *
     * @var bool
     */
    protected $vac_banned = null;

    /**
     * cyber_cafe optional bool = 7
     *
     * @var bool
     */
    protected $cyber_cafe = null;

    /**
     * school_account optional bool = 8
     *
     * @var bool
     */
    protected $school_account = null;

    /**
     * free_trial_account optional bool = 9
     *
     * @var bool
     */
    protected $free_trial_account = null;

    /**
     * subscribed optional bool = 10
     *
     * @var bool
     */
    protected $subscribed = null;

    /**
     * low_violence optional bool = 11
     *
     * @var bool
     */
    protected $low_violence = null;

    /**
     * limited optional bool = 12
     *
     * @var bool
     */
    protected $limited = null;

    /**
     * trusted optional bool = 13
     *
     * @var bool
     */
    protected $trusted = null;

    /**
     * package optional uint32 = 14
     *
     * @var int
     */
    protected $package = null;

    /**
     * time_cached optional fixed32 = 15
     *
     * @var int
     */
    protected $time_cached = null;

    /**
     * account_locked optional bool = 16
     *
     * @var bool
     */
    protected $account_locked = null;

    /**
     * community_banned optional bool = 17
     *
     * @var bool
     */
    protected $community_banned = null;

    /**
     * trade_banned optional bool = 18
     *
     * @var bool
     */
    protected $trade_banned = null;

    /**
     * eligible_for_community_market optional bool = 19
     *
     * @var bool
     */
    protected $eligible_for_community_market = null;

    /**
     * Check if 'valid' has a value
     *
     * @return bool
     */
    public function hasValid()
    {
        return $this->valid !== null;
    }

    /**
     * Get 'valid' value
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->valid;
    }

    /**
     * Set 'valid' value
     *
     * @param bool $value
     */
    public function setValid($value = null)
    {
        $this->valid = $value;
    }

    /**
     * Check if 'account_name' has a value
     *
     * @return bool
     */
    public function hasAccountName()
    {
        return $this->account_name !== null;
    }

    /**
     * Get 'account_name' value
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->account_name;
    }

    /**
     * Set 'account_name' value
     *
     * @param string $value
     */
    public function setAccountName($value = null)
    {
        $this->account_name = $value;
    }

    /**
     * Check if 'public_profile' has a value
     *
     * @return bool
     */
    public function hasPublicProfile()
    {
        return $this->public_profile !== null;
    }

    /**
     * Get 'public_profile' value
     *
     * @return bool
     */
    public function getPublicProfile()
    {
        return $this->public_profile;
    }

    /**
     * Set 'public_profile' value
     *
     * @param bool $value
     */
    public function setPublicProfile($value = null)
    {
        $this->public_profile = $value;
    }

    /**
     * Check if 'public_inventory' has a value
     *
     * @return bool
     */
    public function hasPublicInventory()
    {
        return $this->public_inventory !== null;
    }

    /**
     * Get 'public_inventory' value
     *
     * @return bool
     */
    public function getPublicInventory()
    {
        return $this->public_inventory;
    }

    /**
     * Set 'public_inventory' value
     *
     * @param bool $value
     */
    public function setPublicInventory($value = null)
    {
        $this->public_inventory = $value;
    }

    /**
     * Check if 'vac_banned' has a value
     *
     * @return bool
     */
    public function hasVacBanned()
    {
        return $this->vac_banned !== null;
    }

    /**
     * Get 'vac_banned' value
     *
     * @return bool
     */
    public function getVacBanned()
    {
        return $this->vac_banned;
    }

    /**
     * Set 'vac_banned' value
     *
     * @param bool $value
     */
    public function setVacBanned($value = null)
    {
        $this->vac_banned = $value;
    }

    /**
     * Check if 'cyber_cafe' has a value
     *
     * @return bool
     */
    public function hasCyberCafe()
    {
        return $this->cyber_cafe !== null;
    }

    /**
     * Get 'cyber_cafe' value
     *
     * @return bool
     */
    public function getCyberCafe()
    {
        return $this->cyber_cafe;
    }

    /**
     * Set 'cyber_cafe' value
     *
     * @param bool $value
     */
    public function setCyberCafe($value = null)
    {
        $this->cyber_cafe = $value;
    }

    /**
     * Check if 'school_account' has a value
     *
     * @return bool
     */
    public function hasSchoolAccount()
    {
        return $this->school_account !== null;
    }

    /**
     * Get 'school_account' value
     *
     * @return bool
     */
    public function getSchoolAccount()
    {
        return $this->school_account;
    }

    /**
     * Set 'school_account' value
     *
     * @param bool $value
     */
    public function setSchoolAccount($value = null)
    {
        $this->school_account = $value;
    }

    /**
     * Check if 'free_trial_account' has a value
     *
     * @return bool
     */
    public function hasFreeTrialAccount()
    {
        return $this->free_trial_account !== null;
    }

    /**
     * Get 'free_trial_account' value
     *
     * @return bool
     */
    public function getFreeTrialAccount()
    {
        return $this->free_trial_account;
    }

    /**
     * Set 'free_trial_account' value
     *
     * @param bool $value
     */
    public function setFreeTrialAccount($value = null)
    {
        $this->free_trial_account = $value;
    }

    /**
     * Check if 'subscribed' has a value
     *
     * @return bool
     */
    public function hasSubscribed()
    {
        return $this->subscribed !== null;
    }

    /**
     * Get 'subscribed' value
     *
     * @return bool
     */
    public function getSubscribed()
    {
        return $this->subscribed;
    }

    /**
     * Set 'subscribed' value
     *
     * @param bool $value
     */
    public function setSubscribed($value = null)
    {
        $this->subscribed = $value;
    }

    /**
     * Check if 'low_violence' has a value
     *
     * @return bool
     */
    public function hasLowViolence()
    {
        return $this->low_violence !== null;
    }

    /**
     * Get 'low_violence' value
     *
     * @return bool
     */
    public function getLowViolence()
    {
        return $this->low_violence;
    }

    /**
     * Set 'low_violence' value
     *
     * @param bool $value
     */
    public function setLowViolence($value = null)
    {
        $this->low_violence = $value;
    }

    /**
     * Check if 'limited' has a value
     *
     * @return bool
     */
    public function hasLimited()
    {
        return $this->limited !== null;
    }

    /**
     * Get 'limited' value
     *
     * @return bool
     */
    public function getLimited()
    {
        return $this->limited;
    }

    /**
     * Set 'limited' value
     *
     * @param bool $value
     */
    public function setLimited($value = null)
    {
        $this->limited = $value;
    }

    /**
     * Check if 'trusted' has a value
     *
     * @return bool
     */
    public function hasTrusted()
    {
        return $this->trusted !== null;
    }

    /**
     * Get 'trusted' value
     *
     * @return bool
     */
    public function getTrusted()
    {
        return $this->trusted;
    }

    /**
     * Set 'trusted' value
     *
     * @param bool $value
     */
    public function setTrusted($value = null)
    {
        $this->trusted = $value;
    }

    /**
     * Check if 'package' has a value
     *
     * @return bool
     */
    public function hasPackage()
    {
        return $this->package !== null;
    }

    /**
     * Get 'package' value
     *
     * @return int
     */
    public function getPackage()
    {
        return $this->package;
    }

    /**
     * Set 'package' value
     *
     * @param int $value
     */
    public function setPackage($value = null)
    {
        $this->package = $value;
    }

    /**
     * Check if 'time_cached' has a value
     *
     * @return bool
     */
    public function hasTimeCached()
    {
        return $this->time_cached !== null;
    }

    /**
     * Get 'time_cached' value
     *
     * @return int
     */
    public function getTimeCached()
    {
        return $this->time_cached;
    }

    /**
     * Set 'time_cached' value
     *
     * @param int $value
     */
    public function setTimeCached($value = null)
    {
        $this->time_cached = $value;
    }

    /**
     * Check if 'account_locked' has a value
     *
     * @return bool
     */
    public function hasAccountLocked()
    {
        return $this->account_locked !== null;
    }

    /**
     * Get 'account_locked' value
     *
     * @return bool
     */
    public function getAccountLocked()
    {
        return $this->account_locked;
    }

    /**
     * Set 'account_locked' value
     *
     * @param bool $value
     */
    public function setAccountLocked($value = null)
    {
        $this->account_locked = $value;
    }

    /**
     * Check if 'community_banned' has a value
     *
     * @return bool
     */
    public function hasCommunityBanned()
    {
        return $this->community_banned !== null;
    }

    /**
     * Get 'community_banned' value
     *
     * @return bool
     */
    public function getCommunityBanned()
    {
        return $this->community_banned;
    }

    /**
     * Set 'community_banned' value
     *
     * @param bool $value
     */
    public function setCommunityBanned($value = null)
    {
        $this->community_banned = $value;
    }

    /**
     * Check if 'trade_banned' has a value
     *
     * @return bool
     */
    public function hasTradeBanned()
    {
        return $this->trade_banned !== null;
    }

    /**
     * Get 'trade_banned' value
     *
     * @return bool
     */
    public function getTradeBanned()
    {
        return $this->trade_banned;
    }

    /**
     * Set 'trade_banned' value
     *
     * @param bool $value
     */
    public function setTradeBanned($value = null)
    {
        $this->trade_banned = $value;
    }

    /**
     * Check if 'eligible_for_community_market' has a value
     *
     * @return bool
     */
    public function hasEligibleForCommunityMarket()
    {
        return $this->eligible_for_community_market !== null;
    }

    /**
     * Get 'eligible_for_community_market' value
     *
     * @return bool
     */
    public function getEligibleForCommunityMarket()
    {
        return $this->eligible_for_community_market;
    }

    /**
     * Set 'eligible_for_community_market' value
     *
     * @param bool $value
     */
    public function setEligibleForCommunityMarket($value = null)
    {
        $this->eligible_for_community_market = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'valid' => null,
            'account_name' => null,
            'public_profile' => null,
            'public_inventory' => null,
            'vac_banned' => null,
            'cyber_cafe' => null,
            'school_account' => null,
            'free_trial_account' => null,
            'subscribed' => null,
            'low_violence' => null,
            'limited' => null,
            'trusted' => null,
            'package' => null,
            'time_cached' => null,
            'account_locked' => null,
            'community_banned' => null,
            'trade_banned' => null,
            'eligible_for_community_market' => null
        ], $values);

        $message->setValid($values['valid']);
        $message->setAccountName($values['account_name']);
        $message->setPublicProfile($values['public_profile']);
        $message->setPublicInventory($values['public_inventory']);
        $message->setVacBanned($values['vac_banned']);
        $message->setCyberCafe($values['cyber_cafe']);
        $message->setSchoolAccount($values['school_account']);
        $message->setFreeTrialAccount($values['free_trial_account']);
        $message->setSubscribed($values['subscribed']);
        $message->setLowViolence($values['low_violence']);
        $message->setLimited($values['limited']);
        $message->setTrusted($values['trusted']);
        $message->setPackage($values['package']);
        $message->setTimeCached($values['time_cached']);
        $message->setAccountLocked($values['account_locked']);
        $message->setCommunityBanned($values['community_banned']);
        $message->setTradeBanned($values['trade_banned']);
        $message->setEligibleForCommunityMarket($values['eligible_for_community_market']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgAccountDetails',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'valid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'account_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'public_profile',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'public_inventory',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'vac_banned',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'cyber_cafe',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'school_account',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'free_trial_account',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'subscribed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'low_violence',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'limited',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'trusted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'package',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'time_cached',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'account_locked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'community_banned',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'trade_banned',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'eligible_for_community_market',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->valid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->valid);
        }

        if ($this->account_name !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->account_name);
        }

        if ($this->public_profile !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->public_profile);
        }

        if ($this->public_inventory !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->public_inventory);
        }

        if ($this->vac_banned !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->vac_banned);
        }

        if ($this->cyber_cafe !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->cyber_cafe);
        }

        if ($this->school_account !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->school_account);
        }

        if ($this->free_trial_account !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->free_trial_account);
        }

        if ($this->subscribed !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->subscribed);
        }

        if ($this->low_violence !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->low_violence);
        }

        if ($this->limited !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->limited);
        }

        if ($this->trusted !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->trusted);
        }

        if ($this->package !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->package);
        }

        if ($this->time_cached !== null) {
            $writer->writeVarint($stream, 125);
            $writer->writeFixed32($stream, $this->time_cached);
        }

        if ($this->account_locked !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeBool($stream, $this->account_locked);
        }

        if ($this->community_banned !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeBool($stream, $this->community_banned);
        }

        if ($this->trade_banned !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->trade_banned);
        }

        if ($this->eligible_for_community_market !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeBool($stream, $this->eligible_for_community_market);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->valid = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->account_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->public_profile = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->public_inventory = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->vac_banned = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->cyber_cafe = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->school_account = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->free_trial_account = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->subscribed = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->low_violence = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->limited = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->trusted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->package = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->time_cached = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->account_locked = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->community_banned = $reader->readBool($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->trade_banned = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->eligible_for_community_market = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->valid !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->account_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->account_name);
        }

        if ($this->public_profile !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->public_inventory !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->vac_banned !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->cyber_cafe !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->school_account !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->free_trial_account !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->subscribed !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->low_violence !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->limited !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->trusted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->package !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->package);
        }

        if ($this->time_cached !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->account_locked !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->community_banned !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->trade_banned !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->eligible_for_community_market !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->valid = null;
        $this->account_name = null;
        $this->public_profile = null;
        $this->public_inventory = null;
        $this->vac_banned = null;
        $this->cyber_cafe = null;
        $this->school_account = null;
        $this->free_trial_account = null;
        $this->subscribed = null;
        $this->low_violence = null;
        $this->limited = null;
        $this->trusted = null;
        $this->package = null;
        $this->time_cached = null;
        $this->account_locked = null;
        $this->community_banned = null;
        $this->trade_banned = null;
        $this->eligible_for_community_market = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGCSDK\CMsgAccountDetails) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->valid = ($message->valid !== null) ? $message->valid : $this->valid;
        $this->account_name = ($message->account_name !== null) ? $message->account_name : $this->account_name;
        $this->public_profile = ($message->public_profile !== null) ? $message->public_profile : $this->public_profile;
        $this->public_inventory = ($message->public_inventory !== null) ? $message->public_inventory : $this->public_inventory;
        $this->vac_banned = ($message->vac_banned !== null) ? $message->vac_banned : $this->vac_banned;
        $this->cyber_cafe = ($message->cyber_cafe !== null) ? $message->cyber_cafe : $this->cyber_cafe;
        $this->school_account = ($message->school_account !== null) ? $message->school_account : $this->school_account;
        $this->free_trial_account = ($message->free_trial_account !== null) ? $message->free_trial_account : $this->free_trial_account;
        $this->subscribed = ($message->subscribed !== null) ? $message->subscribed : $this->subscribed;
        $this->low_violence = ($message->low_violence !== null) ? $message->low_violence : $this->low_violence;
        $this->limited = ($message->limited !== null) ? $message->limited : $this->limited;
        $this->trusted = ($message->trusted !== null) ? $message->trusted : $this->trusted;
        $this->package = ($message->package !== null) ? $message->package : $this->package;
        $this->time_cached = ($message->time_cached !== null) ? $message->time_cached : $this->time_cached;
        $this->account_locked = ($message->account_locked !== null) ? $message->account_locked : $this->account_locked;
        $this->community_banned = ($message->community_banned !== null) ? $message->community_banned : $this->community_banned;
        $this->trade_banned = ($message->trade_banned !== null) ? $message->trade_banned : $this->trade_banned;
        $this->eligible_for_community_market = ($message->eligible_for_community_market !== null) ? $message->eligible_for_community_market : $this->eligible_for_community_market;
    }


}

