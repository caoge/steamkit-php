<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGC.CSOEconGameAccountClient
 */
class CSOEconGameAccountClient extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * additional_backpack_slots optional uint32 = 1
     *
     * @var int
     */
    protected $additional_backpack_slots = null;

    /**
     * bonus_xp_timestamp_refresh optional fixed32 = 12
     *
     * @var int
     */
    protected $bonus_xp_timestamp_refresh = null;

    /**
     * bonus_xp_usedflags optional uint32 = 13
     *
     * @var int
     */
    protected $bonus_xp_usedflags = null;

    /**
     * elevated_state optional uint32 = 14
     *
     * @var int
     */
    protected $elevated_state = null;

    /**
     * elevated_timestamp optional uint32 = 15
     *
     * @var int
     */
    protected $elevated_timestamp = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->additional_backpack_slots = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'additional_backpack_slots' has a value
     *
     * @return bool
     */
    public function hasAdditionalBackpackSlots()
    {
        return $this->additional_backpack_slots !== null;
    }

    /**
     * Get 'additional_backpack_slots' value
     *
     * @return int
     */
    public function getAdditionalBackpackSlots()
    {
        return $this->additional_backpack_slots;
    }

    /**
     * Set 'additional_backpack_slots' value
     *
     * @param int $value
     */
    public function setAdditionalBackpackSlots($value = null)
    {
        $this->additional_backpack_slots = $value;
    }

    /**
     * Check if 'bonus_xp_timestamp_refresh' has a value
     *
     * @return bool
     */
    public function hasBonusXpTimestampRefresh()
    {
        return $this->bonus_xp_timestamp_refresh !== null;
    }

    /**
     * Get 'bonus_xp_timestamp_refresh' value
     *
     * @return int
     */
    public function getBonusXpTimestampRefresh()
    {
        return $this->bonus_xp_timestamp_refresh;
    }

    /**
     * Set 'bonus_xp_timestamp_refresh' value
     *
     * @param int $value
     */
    public function setBonusXpTimestampRefresh($value = null)
    {
        $this->bonus_xp_timestamp_refresh = $value;
    }

    /**
     * Check if 'bonus_xp_usedflags' has a value
     *
     * @return bool
     */
    public function hasBonusXpUsedflags()
    {
        return $this->bonus_xp_usedflags !== null;
    }

    /**
     * Get 'bonus_xp_usedflags' value
     *
     * @return int
     */
    public function getBonusXpUsedflags()
    {
        return $this->bonus_xp_usedflags;
    }

    /**
     * Set 'bonus_xp_usedflags' value
     *
     * @param int $value
     */
    public function setBonusXpUsedflags($value = null)
    {
        $this->bonus_xp_usedflags = $value;
    }

    /**
     * Check if 'elevated_state' has a value
     *
     * @return bool
     */
    public function hasElevatedState()
    {
        return $this->elevated_state !== null;
    }

    /**
     * Get 'elevated_state' value
     *
     * @return int
     */
    public function getElevatedState()
    {
        return $this->elevated_state;
    }

    /**
     * Set 'elevated_state' value
     *
     * @param int $value
     */
    public function setElevatedState($value = null)
    {
        $this->elevated_state = $value;
    }

    /**
     * Check if 'elevated_timestamp' has a value
     *
     * @return bool
     */
    public function hasElevatedTimestamp()
    {
        return $this->elevated_timestamp !== null;
    }

    /**
     * Get 'elevated_timestamp' value
     *
     * @return int
     */
    public function getElevatedTimestamp()
    {
        return $this->elevated_timestamp;
    }

    /**
     * Set 'elevated_timestamp' value
     *
     * @param int $value
     */
    public function setElevatedTimestamp($value = null)
    {
        $this->elevated_timestamp = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'additional_backpack_slots' => '0',
            'bonus_xp_timestamp_refresh' => null,
            'bonus_xp_usedflags' => null,
            'elevated_state' => null,
            'elevated_timestamp' => null
        ], $values);

        $message->setAdditionalBackpackSlots($values['additional_backpack_slots']);
        $message->setBonusXpTimestampRefresh($values['bonus_xp_timestamp_refresh']);
        $message->setBonusXpUsedflags($values['bonus_xp_usedflags']);
        $message->setElevatedState($values['elevated_state']);
        $message->setElevatedTimestamp($values['elevated_timestamp']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CSOEconGameAccountClient',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'additional_backpack_slots',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'bonus_xp_timestamp_refresh',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'bonus_xp_usedflags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'elevated_state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'elevated_timestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->additional_backpack_slots !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->additional_backpack_slots);
        }

        if ($this->bonus_xp_timestamp_refresh !== null) {
            $writer->writeVarint($stream, 101);
            $writer->writeFixed32($stream, $this->bonus_xp_timestamp_refresh);
        }

        if ($this->bonus_xp_usedflags !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->bonus_xp_usedflags);
        }

        if ($this->elevated_state !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->elevated_state);
        }

        if ($this->elevated_timestamp !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->elevated_timestamp);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->additional_backpack_slots = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->bonus_xp_timestamp_refresh = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->bonus_xp_usedflags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->elevated_state = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->elevated_timestamp = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->additional_backpack_slots !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->additional_backpack_slots);
        }

        if ($this->bonus_xp_timestamp_refresh !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->bonus_xp_usedflags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bonus_xp_usedflags);
        }

        if ($this->elevated_state !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->elevated_state);
        }

        if ($this->elevated_timestamp !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->elevated_timestamp);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->additional_backpack_slots = '0';
        $this->bonus_xp_timestamp_refresh = null;
        $this->bonus_xp_usedflags = null;
        $this->elevated_state = null;
        $this->elevated_timestamp = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOEconGameAccountClient) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->additional_backpack_slots = ($message->additional_backpack_slots !== null) ? $message->additional_backpack_slots : $this->additional_backpack_slots;
        $this->bonus_xp_timestamp_refresh = ($message->bonus_xp_timestamp_refresh !== null) ? $message->bonus_xp_timestamp_refresh : $this->bonus_xp_timestamp_refresh;
        $this->bonus_xp_usedflags = ($message->bonus_xp_usedflags !== null) ? $message->bonus_xp_usedflags : $this->bonus_xp_usedflags;
        $this->elevated_state = ($message->elevated_state !== null) ? $message->elevated_state : $this->elevated_state;
        $this->elevated_timestamp = ($message->elevated_timestamp !== null) ? $message->elevated_timestamp : $this->elevated_timestamp;
    }


}

