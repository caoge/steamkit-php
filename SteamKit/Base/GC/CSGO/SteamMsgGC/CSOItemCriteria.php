<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGC.CSOItemCriteria
 */
class CSOItemCriteria extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * item_level optional uint32 = 1
     *
     * @var int
     */
    protected $item_level = null;

    /**
     * item_quality optional int32 = 2
     *
     * @var int
     */
    protected $item_quality = null;

    /**
     * item_level_set optional bool = 3
     *
     * @var bool
     */
    protected $item_level_set = null;

    /**
     * item_quality_set optional bool = 4
     *
     * @var bool
     */
    protected $item_quality_set = null;

    /**
     * initial_inventory optional uint32 = 5
     *
     * @var int
     */
    protected $initial_inventory = null;

    /**
     * initial_quantity optional uint32 = 6
     *
     * @var int
     */
    protected $initial_quantity = null;

    /**
     * ignore_enabled_flag optional bool = 8
     *
     * @var bool
     */
    protected $ignore_enabled_flag = null;

    /**
     * conditions repeated message = 9
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteriaCondition>
     */
    protected $conditions = null;

    /**
     * item_rarity optional int32 = 10
     *
     * @var int
     */
    protected $item_rarity = null;

    /**
     * item_rarity_set optional bool = 11
     *
     * @var bool
     */
    protected $item_rarity_set = null;

    /**
     * recent_only optional bool = 12
     *
     * @var bool
     */
    protected $recent_only = null;

    /**
     * Check if 'item_level' has a value
     *
     * @return bool
     */
    public function hasItemLevel()
    {
        return $this->item_level !== null;
    }

    /**
     * Get 'item_level' value
     *
     * @return int
     */
    public function getItemLevel()
    {
        return $this->item_level;
    }

    /**
     * Set 'item_level' value
     *
     * @param int $value
     */
    public function setItemLevel($value = null)
    {
        $this->item_level = $value;
    }

    /**
     * Check if 'item_quality' has a value
     *
     * @return bool
     */
    public function hasItemQuality()
    {
        return $this->item_quality !== null;
    }

    /**
     * Get 'item_quality' value
     *
     * @return int
     */
    public function getItemQuality()
    {
        return $this->item_quality;
    }

    /**
     * Set 'item_quality' value
     *
     * @param int $value
     */
    public function setItemQuality($value = null)
    {
        $this->item_quality = $value;
    }

    /**
     * Check if 'item_level_set' has a value
     *
     * @return bool
     */
    public function hasItemLevelSet()
    {
        return $this->item_level_set !== null;
    }

    /**
     * Get 'item_level_set' value
     *
     * @return bool
     */
    public function getItemLevelSet()
    {
        return $this->item_level_set;
    }

    /**
     * Set 'item_level_set' value
     *
     * @param bool $value
     */
    public function setItemLevelSet($value = null)
    {
        $this->item_level_set = $value;
    }

    /**
     * Check if 'item_quality_set' has a value
     *
     * @return bool
     */
    public function hasItemQualitySet()
    {
        return $this->item_quality_set !== null;
    }

    /**
     * Get 'item_quality_set' value
     *
     * @return bool
     */
    public function getItemQualitySet()
    {
        return $this->item_quality_set;
    }

    /**
     * Set 'item_quality_set' value
     *
     * @param bool $value
     */
    public function setItemQualitySet($value = null)
    {
        $this->item_quality_set = $value;
    }

    /**
     * Check if 'initial_inventory' has a value
     *
     * @return bool
     */
    public function hasInitialInventory()
    {
        return $this->initial_inventory !== null;
    }

    /**
     * Get 'initial_inventory' value
     *
     * @return int
     */
    public function getInitialInventory()
    {
        return $this->initial_inventory;
    }

    /**
     * Set 'initial_inventory' value
     *
     * @param int $value
     */
    public function setInitialInventory($value = null)
    {
        $this->initial_inventory = $value;
    }

    /**
     * Check if 'initial_quantity' has a value
     *
     * @return bool
     */
    public function hasInitialQuantity()
    {
        return $this->initial_quantity !== null;
    }

    /**
     * Get 'initial_quantity' value
     *
     * @return int
     */
    public function getInitialQuantity()
    {
        return $this->initial_quantity;
    }

    /**
     * Set 'initial_quantity' value
     *
     * @param int $value
     */
    public function setInitialQuantity($value = null)
    {
        $this->initial_quantity = $value;
    }

    /**
     * Check if 'ignore_enabled_flag' has a value
     *
     * @return bool
     */
    public function hasIgnoreEnabledFlag()
    {
        return $this->ignore_enabled_flag !== null;
    }

    /**
     * Get 'ignore_enabled_flag' value
     *
     * @return bool
     */
    public function getIgnoreEnabledFlag()
    {
        return $this->ignore_enabled_flag;
    }

    /**
     * Set 'ignore_enabled_flag' value
     *
     * @param bool $value
     */
    public function setIgnoreEnabledFlag($value = null)
    {
        $this->ignore_enabled_flag = $value;
    }

    /**
     * Check if 'conditions' has a value
     *
     * @return bool
     */
    public function hasConditionsList()
    {
        return $this->conditions !== null;
    }

    /**
     * Get 'conditions' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteriaCondition>
     */
    public function getConditionsList()
    {
        return $this->conditions;
    }

    /**
     * Set 'conditions' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteriaCondition> $value
     */
    public function setConditionsList(\Protobuf\Collection $value = null)
    {
        $this->conditions = $value;
    }

    /**
     * Add a new element to 'conditions'
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteriaCondition $value
     */
    public function addConditions(\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteriaCondition $value)
    {
        if ($this->conditions === null) {
            $this->conditions = new \Protobuf\MessageCollection();
        }

        $this->conditions->add($value);
    }

    /**
     * Check if 'item_rarity' has a value
     *
     * @return bool
     */
    public function hasItemRarity()
    {
        return $this->item_rarity !== null;
    }

    /**
     * Get 'item_rarity' value
     *
     * @return int
     */
    public function getItemRarity()
    {
        return $this->item_rarity;
    }

    /**
     * Set 'item_rarity' value
     *
     * @param int $value
     */
    public function setItemRarity($value = null)
    {
        $this->item_rarity = $value;
    }

    /**
     * Check if 'item_rarity_set' has a value
     *
     * @return bool
     */
    public function hasItemRaritySet()
    {
        return $this->item_rarity_set !== null;
    }

    /**
     * Get 'item_rarity_set' value
     *
     * @return bool
     */
    public function getItemRaritySet()
    {
        return $this->item_rarity_set;
    }

    /**
     * Set 'item_rarity_set' value
     *
     * @param bool $value
     */
    public function setItemRaritySet($value = null)
    {
        $this->item_rarity_set = $value;
    }

    /**
     * Check if 'recent_only' has a value
     *
     * @return bool
     */
    public function hasRecentOnly()
    {
        return $this->recent_only !== null;
    }

    /**
     * Get 'recent_only' value
     *
     * @return bool
     */
    public function getRecentOnly()
    {
        return $this->recent_only;
    }

    /**
     * Set 'recent_only' value
     *
     * @param bool $value
     */
    public function setRecentOnly($value = null)
    {
        $this->recent_only = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'item_level' => null,
            'item_quality' => null,
            'item_level_set' => null,
            'item_quality_set' => null,
            'initial_inventory' => null,
            'initial_quantity' => null,
            'ignore_enabled_flag' => null,
            'conditions' => [],
            'item_rarity' => null,
            'item_rarity_set' => null,
            'recent_only' => null
        ], $values);

        $message->setItemLevel($values['item_level']);
        $message->setItemQuality($values['item_quality']);
        $message->setItemLevelSet($values['item_level_set']);
        $message->setItemQualitySet($values['item_quality_set']);
        $message->setInitialInventory($values['initial_inventory']);
        $message->setInitialQuantity($values['initial_quantity']);
        $message->setIgnoreEnabledFlag($values['ignore_enabled_flag']);
        $message->setItemRarity($values['item_rarity']);
        $message->setItemRaritySet($values['item_rarity_set']);
        $message->setRecentOnly($values['recent_only']);

        foreach ($values['conditions'] as $item) {
            $message->addConditions($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CSOItemCriteria',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'item_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'item_quality',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'item_level_set',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'item_quality_set',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'initial_inventory',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'initial_quantity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'ignore_enabled_flag',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'conditions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgGC.CSOItemCriteriaCondition'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'item_rarity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'item_rarity_set',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'recent_only',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->item_level !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->item_level);
        }

        if ($this->item_quality !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->item_quality);
        }

        if ($this->item_level_set !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->item_level_set);
        }

        if ($this->item_quality_set !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->item_quality_set);
        }

        if ($this->initial_inventory !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->initial_inventory);
        }

        if ($this->initial_quantity !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->initial_quantity);
        }

        if ($this->ignore_enabled_flag !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->ignore_enabled_flag);
        }

        if ($this->conditions !== null) {
            foreach ($this->conditions as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->item_rarity !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->item_rarity);
        }

        if ($this->item_rarity_set !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->item_rarity_set);
        }

        if ($this->recent_only !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->recent_only);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->item_level = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->item_quality = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->item_level_set = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->item_quality_set = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->initial_inventory = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->initial_quantity = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->ignore_enabled_flag = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteriaCondition();

                if ($this->conditions === null) {
                    $this->conditions = new \Protobuf\MessageCollection();
                }

                $this->conditions->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->item_rarity = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->item_rarity_set = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->recent_only = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->item_level !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->item_level);
        }

        if ($this->item_quality !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->item_quality);
        }

        if ($this->item_level_set !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->item_quality_set !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->initial_inventory !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->initial_inventory);
        }

        if ($this->initial_quantity !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->initial_quantity);
        }

        if ($this->ignore_enabled_flag !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->conditions !== null) {
            foreach ($this->conditions as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->item_rarity !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->item_rarity);
        }

        if ($this->item_rarity_set !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->recent_only !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->item_level = null;
        $this->item_quality = null;
        $this->item_level_set = null;
        $this->item_quality_set = null;
        $this->initial_inventory = null;
        $this->initial_quantity = null;
        $this->ignore_enabled_flag = null;
        $this->conditions = null;
        $this->item_rarity = null;
        $this->item_rarity_set = null;
        $this->recent_only = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->item_level = ($message->item_level !== null) ? $message->item_level : $this->item_level;
        $this->item_quality = ($message->item_quality !== null) ? $message->item_quality : $this->item_quality;
        $this->item_level_set = ($message->item_level_set !== null) ? $message->item_level_set : $this->item_level_set;
        $this->item_quality_set = ($message->item_quality_set !== null) ? $message->item_quality_set : $this->item_quality_set;
        $this->initial_inventory = ($message->initial_inventory !== null) ? $message->initial_inventory : $this->initial_inventory;
        $this->initial_quantity = ($message->initial_quantity !== null) ? $message->initial_quantity : $this->initial_quantity;
        $this->ignore_enabled_flag = ($message->ignore_enabled_flag !== null) ? $message->ignore_enabled_flag : $this->ignore_enabled_flag;
        $this->conditions = ($message->conditions !== null) ? $message->conditions : $this->conditions;
        $this->item_rarity = ($message->item_rarity !== null) ? $message->item_rarity : $this->item_rarity;
        $this->item_rarity_set = ($message->item_rarity_set !== null) ? $message->item_rarity_set : $this->item_rarity_set;
        $this->recent_only = ($message->recent_only !== null) ? $message->recent_only : $this->recent_only;
    }


}

