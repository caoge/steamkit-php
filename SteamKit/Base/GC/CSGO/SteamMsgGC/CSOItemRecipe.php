<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGC.CSOItemRecipe
 */
class CSOItemRecipe extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * def_index optional uint32 = 1
     *
     * @var int
     */
    protected $def_index = null;

    /**
     * name optional string = 2
     *
     * @var string
     */
    protected $name = null;

    /**
     * n_a optional string = 3
     *
     * @var string
     */
    protected $n_a = null;

    /**
     * desc_inputs optional string = 4
     *
     * @var string
     */
    protected $desc_inputs = null;

    /**
     * desc_outputs optional string = 5
     *
     * @var string
     */
    protected $desc_outputs = null;

    /**
     * di_a optional string = 6
     *
     * @var string
     */
    protected $di_a = null;

    /**
     * di_b optional string = 7
     *
     * @var string
     */
    protected $di_b = null;

    /**
     * di_c optional string = 8
     *
     * @var string
     */
    protected $di_c = null;

    /**
     * do_a optional string = 9
     *
     * @var string
     */
    protected $do_a = null;

    /**
     * do_b optional string = 10
     *
     * @var string
     */
    protected $do_b = null;

    /**
     * do_c optional string = 11
     *
     * @var string
     */
    protected $do_c = null;

    /**
     * requires_all_same_class optional bool = 12
     *
     * @var bool
     */
    protected $requires_all_same_class = null;

    /**
     * requires_all_same_slot optional bool = 13
     *
     * @var bool
     */
    protected $requires_all_same_slot = null;

    /**
     * class_usage_for_output optional int32 = 14
     *
     * @var int
     */
    protected $class_usage_for_output = null;

    /**
     * slot_usage_for_output optional int32 = 15
     *
     * @var int
     */
    protected $slot_usage_for_output = null;

    /**
     * set_for_output optional int32 = 16
     *
     * @var int
     */
    protected $set_for_output = null;

    /**
     * input_items_criteria repeated message = 20
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria>
     */
    protected $input_items_criteria = null;

    /**
     * output_items_criteria repeated message = 21
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria>
     */
    protected $output_items_criteria = null;

    /**
     * input_item_dupe_counts repeated uint32 = 22
     *
     * @var \Protobuf\Collection
     */
    protected $input_item_dupe_counts = null;

    /**
     * Check if 'def_index' has a value
     *
     * @return bool
     */
    public function hasDefIndex()
    {
        return $this->def_index !== null;
    }

    /**
     * Get 'def_index' value
     *
     * @return int
     */
    public function getDefIndex()
    {
        return $this->def_index;
    }

    /**
     * Set 'def_index' value
     *
     * @param int $value
     */
    public function setDefIndex($value = null)
    {
        $this->def_index = $value;
    }

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'n_a' has a value
     *
     * @return bool
     */
    public function hasNA()
    {
        return $this->n_a !== null;
    }

    /**
     * Get 'n_a' value
     *
     * @return string
     */
    public function getNA()
    {
        return $this->n_a;
    }

    /**
     * Set 'n_a' value
     *
     * @param string $value
     */
    public function setNA($value = null)
    {
        $this->n_a = $value;
    }

    /**
     * Check if 'desc_inputs' has a value
     *
     * @return bool
     */
    public function hasDescInputs()
    {
        return $this->desc_inputs !== null;
    }

    /**
     * Get 'desc_inputs' value
     *
     * @return string
     */
    public function getDescInputs()
    {
        return $this->desc_inputs;
    }

    /**
     * Set 'desc_inputs' value
     *
     * @param string $value
     */
    public function setDescInputs($value = null)
    {
        $this->desc_inputs = $value;
    }

    /**
     * Check if 'desc_outputs' has a value
     *
     * @return bool
     */
    public function hasDescOutputs()
    {
        return $this->desc_outputs !== null;
    }

    /**
     * Get 'desc_outputs' value
     *
     * @return string
     */
    public function getDescOutputs()
    {
        return $this->desc_outputs;
    }

    /**
     * Set 'desc_outputs' value
     *
     * @param string $value
     */
    public function setDescOutputs($value = null)
    {
        $this->desc_outputs = $value;
    }

    /**
     * Check if 'di_a' has a value
     *
     * @return bool
     */
    public function hasDiA()
    {
        return $this->di_a !== null;
    }

    /**
     * Get 'di_a' value
     *
     * @return string
     */
    public function getDiA()
    {
        return $this->di_a;
    }

    /**
     * Set 'di_a' value
     *
     * @param string $value
     */
    public function setDiA($value = null)
    {
        $this->di_a = $value;
    }

    /**
     * Check if 'di_b' has a value
     *
     * @return bool
     */
    public function hasDiB()
    {
        return $this->di_b !== null;
    }

    /**
     * Get 'di_b' value
     *
     * @return string
     */
    public function getDiB()
    {
        return $this->di_b;
    }

    /**
     * Set 'di_b' value
     *
     * @param string $value
     */
    public function setDiB($value = null)
    {
        $this->di_b = $value;
    }

    /**
     * Check if 'di_c' has a value
     *
     * @return bool
     */
    public function hasDiC()
    {
        return $this->di_c !== null;
    }

    /**
     * Get 'di_c' value
     *
     * @return string
     */
    public function getDiC()
    {
        return $this->di_c;
    }

    /**
     * Set 'di_c' value
     *
     * @param string $value
     */
    public function setDiC($value = null)
    {
        $this->di_c = $value;
    }

    /**
     * Check if 'do_a' has a value
     *
     * @return bool
     */
    public function hasDoA()
    {
        return $this->do_a !== null;
    }

    /**
     * Get 'do_a' value
     *
     * @return string
     */
    public function getDoA()
    {
        return $this->do_a;
    }

    /**
     * Set 'do_a' value
     *
     * @param string $value
     */
    public function setDoA($value = null)
    {
        $this->do_a = $value;
    }

    /**
     * Check if 'do_b' has a value
     *
     * @return bool
     */
    public function hasDoB()
    {
        return $this->do_b !== null;
    }

    /**
     * Get 'do_b' value
     *
     * @return string
     */
    public function getDoB()
    {
        return $this->do_b;
    }

    /**
     * Set 'do_b' value
     *
     * @param string $value
     */
    public function setDoB($value = null)
    {
        $this->do_b = $value;
    }

    /**
     * Check if 'do_c' has a value
     *
     * @return bool
     */
    public function hasDoC()
    {
        return $this->do_c !== null;
    }

    /**
     * Get 'do_c' value
     *
     * @return string
     */
    public function getDoC()
    {
        return $this->do_c;
    }

    /**
     * Set 'do_c' value
     *
     * @param string $value
     */
    public function setDoC($value = null)
    {
        $this->do_c = $value;
    }

    /**
     * Check if 'requires_all_same_class' has a value
     *
     * @return bool
     */
    public function hasRequiresAllSameClass()
    {
        return $this->requires_all_same_class !== null;
    }

    /**
     * Get 'requires_all_same_class' value
     *
     * @return bool
     */
    public function getRequiresAllSameClass()
    {
        return $this->requires_all_same_class;
    }

    /**
     * Set 'requires_all_same_class' value
     *
     * @param bool $value
     */
    public function setRequiresAllSameClass($value = null)
    {
        $this->requires_all_same_class = $value;
    }

    /**
     * Check if 'requires_all_same_slot' has a value
     *
     * @return bool
     */
    public function hasRequiresAllSameSlot()
    {
        return $this->requires_all_same_slot !== null;
    }

    /**
     * Get 'requires_all_same_slot' value
     *
     * @return bool
     */
    public function getRequiresAllSameSlot()
    {
        return $this->requires_all_same_slot;
    }

    /**
     * Set 'requires_all_same_slot' value
     *
     * @param bool $value
     */
    public function setRequiresAllSameSlot($value = null)
    {
        $this->requires_all_same_slot = $value;
    }

    /**
     * Check if 'class_usage_for_output' has a value
     *
     * @return bool
     */
    public function hasClassUsageForOutput()
    {
        return $this->class_usage_for_output !== null;
    }

    /**
     * Get 'class_usage_for_output' value
     *
     * @return int
     */
    public function getClassUsageForOutput()
    {
        return $this->class_usage_for_output;
    }

    /**
     * Set 'class_usage_for_output' value
     *
     * @param int $value
     */
    public function setClassUsageForOutput($value = null)
    {
        $this->class_usage_for_output = $value;
    }

    /**
     * Check if 'slot_usage_for_output' has a value
     *
     * @return bool
     */
    public function hasSlotUsageForOutput()
    {
        return $this->slot_usage_for_output !== null;
    }

    /**
     * Get 'slot_usage_for_output' value
     *
     * @return int
     */
    public function getSlotUsageForOutput()
    {
        return $this->slot_usage_for_output;
    }

    /**
     * Set 'slot_usage_for_output' value
     *
     * @param int $value
     */
    public function setSlotUsageForOutput($value = null)
    {
        $this->slot_usage_for_output = $value;
    }

    /**
     * Check if 'set_for_output' has a value
     *
     * @return bool
     */
    public function hasSetForOutput()
    {
        return $this->set_for_output !== null;
    }

    /**
     * Get 'set_for_output' value
     *
     * @return int
     */
    public function getSetForOutput()
    {
        return $this->set_for_output;
    }

    /**
     * Set 'set_for_output' value
     *
     * @param int $value
     */
    public function setSetForOutput($value = null)
    {
        $this->set_for_output = $value;
    }

    /**
     * Check if 'input_items_criteria' has a value
     *
     * @return bool
     */
    public function hasInputItemsCriteriaList()
    {
        return $this->input_items_criteria !== null;
    }

    /**
     * Get 'input_items_criteria' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria>
     */
    public function getInputItemsCriteriaList()
    {
        return $this->input_items_criteria;
    }

    /**
     * Set 'input_items_criteria' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria> $value
     */
    public function setInputItemsCriteriaList(\Protobuf\Collection $value = null)
    {
        $this->input_items_criteria = $value;
    }

    /**
     * Add a new element to 'input_items_criteria'
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria $value
     */
    public function addInputItemsCriteria(\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria $value)
    {
        if ($this->input_items_criteria === null) {
            $this->input_items_criteria = new \Protobuf\MessageCollection();
        }

        $this->input_items_criteria->add($value);
    }

    /**
     * Check if 'output_items_criteria' has a value
     *
     * @return bool
     */
    public function hasOutputItemsCriteriaList()
    {
        return $this->output_items_criteria !== null;
    }

    /**
     * Get 'output_items_criteria' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria>
     */
    public function getOutputItemsCriteriaList()
    {
        return $this->output_items_criteria;
    }

    /**
     * Set 'output_items_criteria' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria> $value
     */
    public function setOutputItemsCriteriaList(\Protobuf\Collection $value = null)
    {
        $this->output_items_criteria = $value;
    }

    /**
     * Add a new element to 'output_items_criteria'
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria $value
     */
    public function addOutputItemsCriteria(\SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria $value)
    {
        if ($this->output_items_criteria === null) {
            $this->output_items_criteria = new \Protobuf\MessageCollection();
        }

        $this->output_items_criteria->add($value);
    }

    /**
     * Check if 'input_item_dupe_counts' has a value
     *
     * @return bool
     */
    public function hasInputItemDupeCountsList()
    {
        return $this->input_item_dupe_counts !== null;
    }

    /**
     * Get 'input_item_dupe_counts' value
     *
     * @return \Protobuf\Collection
     */
    public function getInputItemDupeCountsList()
    {
        return $this->input_item_dupe_counts;
    }

    /**
     * Set 'input_item_dupe_counts' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setInputItemDupeCountsList(\Protobuf\Collection $value = null)
    {
        $this->input_item_dupe_counts = $value;
    }

    /**
     * Add a new element to 'input_item_dupe_counts'
     *
     * @param int $value
     */
    public function addInputItemDupeCounts($value)
    {
        if ($this->input_item_dupe_counts === null) {
            $this->input_item_dupe_counts = new \Protobuf\ScalarCollection();
        }

        $this->input_item_dupe_counts->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'def_index' => null,
            'name' => null,
            'n_a' => null,
            'desc_inputs' => null,
            'desc_outputs' => null,
            'di_a' => null,
            'di_b' => null,
            'di_c' => null,
            'do_a' => null,
            'do_b' => null,
            'do_c' => null,
            'requires_all_same_class' => null,
            'requires_all_same_slot' => null,
            'class_usage_for_output' => null,
            'slot_usage_for_output' => null,
            'set_for_output' => null,
            'input_items_criteria' => [],
            'output_items_criteria' => [],
            'input_item_dupe_counts' => []
        ], $values);

        $message->setDefIndex($values['def_index']);
        $message->setName($values['name']);
        $message->setNA($values['n_a']);
        $message->setDescInputs($values['desc_inputs']);
        $message->setDescOutputs($values['desc_outputs']);
        $message->setDiA($values['di_a']);
        $message->setDiB($values['di_b']);
        $message->setDiC($values['di_c']);
        $message->setDoA($values['do_a']);
        $message->setDoB($values['do_b']);
        $message->setDoC($values['do_c']);
        $message->setRequiresAllSameClass($values['requires_all_same_class']);
        $message->setRequiresAllSameSlot($values['requires_all_same_slot']);
        $message->setClassUsageForOutput($values['class_usage_for_output']);
        $message->setSlotUsageForOutput($values['slot_usage_for_output']);
        $message->setSetForOutput($values['set_for_output']);

        foreach ($values['input_items_criteria'] as $item) {
            $message->addInputItemsCriteria($item);
        }

        foreach ($values['output_items_criteria'] as $item) {
            $message->addOutputItemsCriteria($item);
        }

        foreach ($values['input_item_dupe_counts'] as $item) {
            $message->addInputItemDupeCounts($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CSOItemRecipe',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'def_index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'n_a',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'desc_inputs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'desc_outputs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'di_a',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'di_b',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'di_c',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'do_a',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'do_b',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'do_c',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'requires_all_same_class',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'requires_all_same_slot',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'class_usage_for_output',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'slot_usage_for_output',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'set_for_output',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'input_items_criteria',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgGC.CSOItemCriteria'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'output_items_criteria',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgGC.CSOItemCriteria'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'input_item_dupe_counts',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->def_index !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->def_index);
        }

        if ($this->name !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->name);
        }

        if ($this->n_a !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->n_a);
        }

        if ($this->desc_inputs !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->desc_inputs);
        }

        if ($this->desc_outputs !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->desc_outputs);
        }

        if ($this->di_a !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->di_a);
        }

        if ($this->di_b !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->di_b);
        }

        if ($this->di_c !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->di_c);
        }

        if ($this->do_a !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->do_a);
        }

        if ($this->do_b !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->do_b);
        }

        if ($this->do_c !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->do_c);
        }

        if ($this->requires_all_same_class !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->requires_all_same_class);
        }

        if ($this->requires_all_same_slot !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->requires_all_same_slot);
        }

        if ($this->class_usage_for_output !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->class_usage_for_output);
        }

        if ($this->slot_usage_for_output !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->slot_usage_for_output);
        }

        if ($this->set_for_output !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->set_for_output);
        }

        if ($this->input_items_criteria !== null) {
            foreach ($this->input_items_criteria as $val) {
                $writer->writeVarint($stream, 162);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->output_items_criteria !== null) {
            foreach ($this->output_items_criteria as $val) {
                $writer->writeVarint($stream, 170);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->input_item_dupe_counts !== null) {
            foreach ($this->input_item_dupe_counts as $val) {
                $writer->writeVarint($stream, 176);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->def_index = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->n_a = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->desc_inputs = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->desc_outputs = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->di_a = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->di_b = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->di_c = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->do_a = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->do_b = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->do_c = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->requires_all_same_class = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->requires_all_same_slot = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->class_usage_for_output = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->slot_usage_for_output = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->set_for_output = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria();

                if ($this->input_items_criteria === null) {
                    $this->input_items_criteria = new \Protobuf\MessageCollection();
                }

                $this->input_items_criteria->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemCriteria();

                if ($this->output_items_criteria === null) {
                    $this->output_items_criteria = new \Protobuf\MessageCollection();
                }

                $this->output_items_criteria->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                if ($this->input_item_dupe_counts === null) {
                    $this->input_item_dupe_counts = new \Protobuf\ScalarCollection();
                }

                $this->input_item_dupe_counts->add($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->def_index !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->def_index);
        }

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->n_a !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->n_a);
        }

        if ($this->desc_inputs !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->desc_inputs);
        }

        if ($this->desc_outputs !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->desc_outputs);
        }

        if ($this->di_a !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->di_a);
        }

        if ($this->di_b !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->di_b);
        }

        if ($this->di_c !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->di_c);
        }

        if ($this->do_a !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->do_a);
        }

        if ($this->do_b !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->do_b);
        }

        if ($this->do_c !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->do_c);
        }

        if ($this->requires_all_same_class !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->requires_all_same_slot !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->class_usage_for_output !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->class_usage_for_output);
        }

        if ($this->slot_usage_for_output !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->slot_usage_for_output);
        }

        if ($this->set_for_output !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->set_for_output);
        }

        if ($this->input_items_criteria !== null) {
            foreach ($this->input_items_criteria as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->output_items_criteria !== null) {
            foreach ($this->output_items_criteria as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->input_item_dupe_counts !== null) {
            foreach ($this->input_item_dupe_counts as $val) {
                $size += 2;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->def_index = null;
        $this->name = null;
        $this->n_a = null;
        $this->desc_inputs = null;
        $this->desc_outputs = null;
        $this->di_a = null;
        $this->di_b = null;
        $this->di_c = null;
        $this->do_a = null;
        $this->do_b = null;
        $this->do_c = null;
        $this->requires_all_same_class = null;
        $this->requires_all_same_slot = null;
        $this->class_usage_for_output = null;
        $this->slot_usage_for_output = null;
        $this->set_for_output = null;
        $this->input_items_criteria = null;
        $this->output_items_criteria = null;
        $this->input_item_dupe_counts = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOItemRecipe) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->def_index = ($message->def_index !== null) ? $message->def_index : $this->def_index;
        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->n_a = ($message->n_a !== null) ? $message->n_a : $this->n_a;
        $this->desc_inputs = ($message->desc_inputs !== null) ? $message->desc_inputs : $this->desc_inputs;
        $this->desc_outputs = ($message->desc_outputs !== null) ? $message->desc_outputs : $this->desc_outputs;
        $this->di_a = ($message->di_a !== null) ? $message->di_a : $this->di_a;
        $this->di_b = ($message->di_b !== null) ? $message->di_b : $this->di_b;
        $this->di_c = ($message->di_c !== null) ? $message->di_c : $this->di_c;
        $this->do_a = ($message->do_a !== null) ? $message->do_a : $this->do_a;
        $this->do_b = ($message->do_b !== null) ? $message->do_b : $this->do_b;
        $this->do_c = ($message->do_c !== null) ? $message->do_c : $this->do_c;
        $this->requires_all_same_class = ($message->requires_all_same_class !== null) ? $message->requires_all_same_class : $this->requires_all_same_class;
        $this->requires_all_same_slot = ($message->requires_all_same_slot !== null) ? $message->requires_all_same_slot : $this->requires_all_same_slot;
        $this->class_usage_for_output = ($message->class_usage_for_output !== null) ? $message->class_usage_for_output : $this->class_usage_for_output;
        $this->slot_usage_for_output = ($message->slot_usage_for_output !== null) ? $message->slot_usage_for_output : $this->slot_usage_for_output;
        $this->set_for_output = ($message->set_for_output !== null) ? $message->set_for_output : $this->set_for_output;
        $this->input_items_criteria = ($message->input_items_criteria !== null) ? $message->input_items_criteria : $this->input_items_criteria;
        $this->output_items_criteria = ($message->output_items_criteria !== null) ? $message->output_items_criteria : $this->output_items_criteria;
        $this->input_item_dupe_counts = ($message->input_item_dupe_counts !== null) ? $message->input_item_dupe_counts : $this->input_item_dupe_counts;
    }


}

