<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGC.CSOEconItemLeagueViewPass
 */
class CSOEconItemLeagueViewPass extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * account_id optional uint32 = 1
     *
     * @var int
     */
    protected $account_id = null;

    /**
     * league_id optional uint32 = 2
     *
     * @var int
     */
    protected $league_id = null;

    /**
     * admin optional uint32 = 3
     *
     * @var int
     */
    protected $admin = null;

    /**
     * itemindex optional uint32 = 4
     *
     * @var int
     */
    protected $itemindex = null;

    /**
     * Check if 'account_id' has a value
     *
     * @return bool
     */
    public function hasAccountId()
    {
        return $this->account_id !== null;
    }

    /**
     * Get 'account_id' value
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->account_id;
    }

    /**
     * Set 'account_id' value
     *
     * @param int $value
     */
    public function setAccountId($value = null)
    {
        $this->account_id = $value;
    }

    /**
     * Check if 'league_id' has a value
     *
     * @return bool
     */
    public function hasLeagueId()
    {
        return $this->league_id !== null;
    }

    /**
     * Get 'league_id' value
     *
     * @return int
     */
    public function getLeagueId()
    {
        return $this->league_id;
    }

    /**
     * Set 'league_id' value
     *
     * @param int $value
     */
    public function setLeagueId($value = null)
    {
        $this->league_id = $value;
    }

    /**
     * Check if 'admin' has a value
     *
     * @return bool
     */
    public function hasAdmin()
    {
        return $this->admin !== null;
    }

    /**
     * Get 'admin' value
     *
     * @return int
     */
    public function getAdmin()
    {
        return $this->admin;
    }

    /**
     * Set 'admin' value
     *
     * @param int $value
     */
    public function setAdmin($value = null)
    {
        $this->admin = $value;
    }

    /**
     * Check if 'itemindex' has a value
     *
     * @return bool
     */
    public function hasItemindex()
    {
        return $this->itemindex !== null;
    }

    /**
     * Get 'itemindex' value
     *
     * @return int
     */
    public function getItemindex()
    {
        return $this->itemindex;
    }

    /**
     * Set 'itemindex' value
     *
     * @param int $value
     */
    public function setItemindex($value = null)
    {
        $this->itemindex = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'account_id' => null,
            'league_id' => null,
            'admin' => null,
            'itemindex' => null
        ], $values);

        $message->setAccountId($values['account_id']);
        $message->setLeagueId($values['league_id']);
        $message->setAdmin($values['admin']);
        $message->setItemindex($values['itemindex']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CSOEconItemLeagueViewPass',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'account_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'league_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'admin',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'itemindex',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->account_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->account_id);
        }

        if ($this->league_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->league_id);
        }

        if ($this->admin !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->admin);
        }

        if ($this->itemindex !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->itemindex);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->account_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->league_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->admin = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->itemindex = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->account_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->account_id);
        }

        if ($this->league_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->league_id);
        }

        if ($this->admin !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->admin);
        }

        if ($this->itemindex !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->itemindex);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->account_id = null;
        $this->league_id = null;
        $this->admin = null;
        $this->itemindex = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOEconItemLeagueViewPass) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->account_id = ($message->account_id !== null) ? $message->account_id : $this->account_id;
        $this->league_id = ($message->league_id !== null) ? $message->league_id : $this->league_id;
        $this->admin = ($message->admin !== null) ? $message->admin : $this->admin;
        $this->itemindex = ($message->itemindex !== null) ? $message->itemindex : $this->itemindex;
    }


}

