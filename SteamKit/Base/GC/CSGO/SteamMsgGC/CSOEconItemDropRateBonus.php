<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGC.CSOEconItemDropRateBonus
 */
class CSOEconItemDropRateBonus extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * account_id optional uint32 = 1
     *
     * @var int
     */
    protected $account_id = null;

    /**
     * expiration_date optional fixed32 = 2
     *
     * @var int
     */
    protected $expiration_date = null;

    /**
     * bonus optional float = 3
     *
     * @var float
     */
    protected $bonus = null;

    /**
     * bonus_count optional uint32 = 4
     *
     * @var int
     */
    protected $bonus_count = null;

    /**
     * item_id optional uint64 = 5
     *
     * @var int
     */
    protected $item_id = null;

    /**
     * def_index optional uint32 = 6
     *
     * @var int
     */
    protected $def_index = null;

    /**
     * Check if 'account_id' has a value
     *
     * @return bool
     */
    public function hasAccountId()
    {
        return $this->account_id !== null;
    }

    /**
     * Get 'account_id' value
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->account_id;
    }

    /**
     * Set 'account_id' value
     *
     * @param int $value
     */
    public function setAccountId($value = null)
    {
        $this->account_id = $value;
    }

    /**
     * Check if 'expiration_date' has a value
     *
     * @return bool
     */
    public function hasExpirationDate()
    {
        return $this->expiration_date !== null;
    }

    /**
     * Get 'expiration_date' value
     *
     * @return int
     */
    public function getExpirationDate()
    {
        return $this->expiration_date;
    }

    /**
     * Set 'expiration_date' value
     *
     * @param int $value
     */
    public function setExpirationDate($value = null)
    {
        $this->expiration_date = $value;
    }

    /**
     * Check if 'bonus' has a value
     *
     * @return bool
     */
    public function hasBonus()
    {
        return $this->bonus !== null;
    }

    /**
     * Get 'bonus' value
     *
     * @return float
     */
    public function getBonus()
    {
        return $this->bonus;
    }

    /**
     * Set 'bonus' value
     *
     * @param float $value
     */
    public function setBonus($value = null)
    {
        $this->bonus = $value;
    }

    /**
     * Check if 'bonus_count' has a value
     *
     * @return bool
     */
    public function hasBonusCount()
    {
        return $this->bonus_count !== null;
    }

    /**
     * Get 'bonus_count' value
     *
     * @return int
     */
    public function getBonusCount()
    {
        return $this->bonus_count;
    }

    /**
     * Set 'bonus_count' value
     *
     * @param int $value
     */
    public function setBonusCount($value = null)
    {
        $this->bonus_count = $value;
    }

    /**
     * Check if 'item_id' has a value
     *
     * @return bool
     */
    public function hasItemId()
    {
        return $this->item_id !== null;
    }

    /**
     * Get 'item_id' value
     *
     * @return int
     */
    public function getItemId()
    {
        return $this->item_id;
    }

    /**
     * Set 'item_id' value
     *
     * @param int $value
     */
    public function setItemId($value = null)
    {
        $this->item_id = $value;
    }

    /**
     * Check if 'def_index' has a value
     *
     * @return bool
     */
    public function hasDefIndex()
    {
        return $this->def_index !== null;
    }

    /**
     * Get 'def_index' value
     *
     * @return int
     */
    public function getDefIndex()
    {
        return $this->def_index;
    }

    /**
     * Set 'def_index' value
     *
     * @param int $value
     */
    public function setDefIndex($value = null)
    {
        $this->def_index = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'account_id' => null,
            'expiration_date' => null,
            'bonus' => null,
            'bonus_count' => null,
            'item_id' => null,
            'def_index' => null
        ], $values);

        $message->setAccountId($values['account_id']);
        $message->setExpirationDate($values['expiration_date']);
        $message->setBonus($values['bonus']);
        $message->setBonusCount($values['bonus_count']);
        $message->setItemId($values['item_id']);
        $message->setDefIndex($values['def_index']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CSOEconItemDropRateBonus',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'account_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'expiration_date',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'bonus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'bonus_count',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'item_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'def_index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->account_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->account_id);
        }

        if ($this->expiration_date !== null) {
            $writer->writeVarint($stream, 21);
            $writer->writeFixed32($stream, $this->expiration_date);
        }

        if ($this->bonus !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFloat($stream, $this->bonus);
        }

        if ($this->bonus_count !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->bonus_count);
        }

        if ($this->item_id !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->item_id);
        }

        if ($this->def_index !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->def_index);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->account_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->expiration_date = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->bonus = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->bonus_count = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->item_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->def_index = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->account_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->account_id);
        }

        if ($this->expiration_date !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->bonus !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->bonus_count !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bonus_count);
        }

        if ($this->item_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->item_id);
        }

        if ($this->def_index !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->def_index);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->account_id = null;
        $this->expiration_date = null;
        $this->bonus = null;
        $this->bonus_count = null;
        $this->item_id = null;
        $this->def_index = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGC\CSOEconItemDropRateBonus) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->account_id = ($message->account_id !== null) ? $message->account_id : $this->account_id;
        $this->expiration_date = ($message->expiration_date !== null) ? $message->expiration_date : $this->expiration_date;
        $this->bonus = ($message->bonus !== null) ? $message->bonus : $this->bonus;
        $this->bonus_count = ($message->bonus_count !== null) ? $message->bonus_count : $this->bonus_count;
        $this->item_id = ($message->item_id !== null) ? $message->item_id : $this->item_id;
        $this->def_index = ($message->def_index !== null) ? $message->def_index : $this->def_index;
    }


}

