<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGC.CMsgStoreGetUserDataResponse
 */
class CMsgStoreGetUserDataResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * result optional int32 = 1
     *
     * @var int
     */
    protected $result = null;

    /**
     * currency_deprecated optional int32 = 2
     *
     * @var int
     */
    protected $currency_deprecated = null;

    /**
     * country_deprecated optional string = 3
     *
     * @var string
     */
    protected $country_deprecated = null;

    /**
     * price_sheet_version optional fixed32 = 4
     *
     * @var int
     */
    protected $price_sheet_version = null;

    /**
     * price_sheet optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $price_sheet = null;

    /**
     * Check if 'result' has a value
     *
     * @return bool
     */
    public function hasResult()
    {
        return $this->result !== null;
    }

    /**
     * Get 'result' value
     *
     * @return int
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * Set 'result' value
     *
     * @param int $value
     */
    public function setResult($value = null)
    {
        $this->result = $value;
    }

    /**
     * Check if 'currency_deprecated' has a value
     *
     * @return bool
     */
    public function hasCurrencyDeprecated()
    {
        return $this->currency_deprecated !== null;
    }

    /**
     * Get 'currency_deprecated' value
     *
     * @return int
     */
    public function getCurrencyDeprecated()
    {
        return $this->currency_deprecated;
    }

    /**
     * Set 'currency_deprecated' value
     *
     * @param int $value
     */
    public function setCurrencyDeprecated($value = null)
    {
        $this->currency_deprecated = $value;
    }

    /**
     * Check if 'country_deprecated' has a value
     *
     * @return bool
     */
    public function hasCountryDeprecated()
    {
        return $this->country_deprecated !== null;
    }

    /**
     * Get 'country_deprecated' value
     *
     * @return string
     */
    public function getCountryDeprecated()
    {
        return $this->country_deprecated;
    }

    /**
     * Set 'country_deprecated' value
     *
     * @param string $value
     */
    public function setCountryDeprecated($value = null)
    {
        $this->country_deprecated = $value;
    }

    /**
     * Check if 'price_sheet_version' has a value
     *
     * @return bool
     */
    public function hasPriceSheetVersion()
    {
        return $this->price_sheet_version !== null;
    }

    /**
     * Get 'price_sheet_version' value
     *
     * @return int
     */
    public function getPriceSheetVersion()
    {
        return $this->price_sheet_version;
    }

    /**
     * Set 'price_sheet_version' value
     *
     * @param int $value
     */
    public function setPriceSheetVersion($value = null)
    {
        $this->price_sheet_version = $value;
    }

    /**
     * Check if 'price_sheet' has a value
     *
     * @return bool
     */
    public function hasPriceSheet()
    {
        return $this->price_sheet !== null;
    }

    /**
     * Get 'price_sheet' value
     *
     * @return \Protobuf\Stream
     */
    public function getPriceSheet()
    {
        return $this->price_sheet;
    }

    /**
     * Set 'price_sheet' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPriceSheet($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->price_sheet = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'result' => null,
            'currency_deprecated' => null,
            'country_deprecated' => null,
            'price_sheet_version' => null,
            'price_sheet' => null
        ], $values);

        $message->setResult($values['result']);
        $message->setCurrencyDeprecated($values['currency_deprecated']);
        $message->setCountryDeprecated($values['country_deprecated']);
        $message->setPriceSheetVersion($values['price_sheet_version']);
        $message->setPriceSheet($values['price_sheet']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgStoreGetUserDataResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'result',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'currency_deprecated',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'country_deprecated',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'price_sheet_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'price_sheet',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->result !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->result);
        }

        if ($this->currency_deprecated !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->currency_deprecated);
        }

        if ($this->country_deprecated !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->country_deprecated);
        }

        if ($this->price_sheet_version !== null) {
            $writer->writeVarint($stream, 37);
            $writer->writeFixed32($stream, $this->price_sheet_version);
        }

        if ($this->price_sheet !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->price_sheet);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->result = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->currency_deprecated = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->country_deprecated = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->price_sheet_version = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->price_sheet = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->result !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->result);
        }

        if ($this->currency_deprecated !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->currency_deprecated);
        }

        if ($this->country_deprecated !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->country_deprecated);
        }

        if ($this->price_sheet_version !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->price_sheet !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->price_sheet);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->result = null;
        $this->currency_deprecated = null;
        $this->country_deprecated = null;
        $this->price_sheet_version = null;
        $this->price_sheet = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgStoreGetUserDataResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->result = ($message->result !== null) ? $message->result : $this->result;
        $this->currency_deprecated = ($message->currency_deprecated !== null) ? $message->currency_deprecated : $this->currency_deprecated;
        $this->country_deprecated = ($message->country_deprecated !== null) ? $message->country_deprecated : $this->country_deprecated;
        $this->price_sheet_version = ($message->price_sheet_version !== null) ? $message->price_sheet_version : $this->price_sheet_version;
        $this->price_sheet = ($message->price_sheet !== null) ? $message->price_sheet : $this->price_sheet;
    }


}

