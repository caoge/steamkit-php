<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGC.CMsgGCReportAbuse
 */
class CMsgGCReportAbuse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * target_steam_id optional fixed64 = 1
     *
     * @var int
     */
    protected $target_steam_id = null;

    /**
     * description optional string = 4
     *
     * @var string
     */
    protected $description = null;

    /**
     * gid optional uint64 = 5
     *
     * @var int
     */
    protected $gid = null;

    /**
     * abuse_type optional uint32 = 2
     *
     * @var int
     */
    protected $abuse_type = null;

    /**
     * content_type optional uint32 = 3
     *
     * @var int
     */
    protected $content_type = null;

    /**
     * target_game_server_ip optional fixed32 = 6
     *
     * @var int
     */
    protected $target_game_server_ip = null;

    /**
     * target_game_server_port optional uint32 = 7
     *
     * @var int
     */
    protected $target_game_server_port = null;

    /**
     * Check if 'target_steam_id' has a value
     *
     * @return bool
     */
    public function hasTargetSteamId()
    {
        return $this->target_steam_id !== null;
    }

    /**
     * Get 'target_steam_id' value
     *
     * @return int
     */
    public function getTargetSteamId()
    {
        return $this->target_steam_id;
    }

    /**
     * Set 'target_steam_id' value
     *
     * @param int $value
     */
    public function setTargetSteamId($value = null)
    {
        $this->target_steam_id = $value;
    }

    /**
     * Check if 'description' has a value
     *
     * @return bool
     */
    public function hasDescription()
    {
        return $this->description !== null;
    }

    /**
     * Get 'description' value
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set 'description' value
     *
     * @param string $value
     */
    public function setDescription($value = null)
    {
        $this->description = $value;
    }

    /**
     * Check if 'gid' has a value
     *
     * @return bool
     */
    public function hasGid()
    {
        return $this->gid !== null;
    }

    /**
     * Get 'gid' value
     *
     * @return int
     */
    public function getGid()
    {
        return $this->gid;
    }

    /**
     * Set 'gid' value
     *
     * @param int $value
     */
    public function setGid($value = null)
    {
        $this->gid = $value;
    }

    /**
     * Check if 'abuse_type' has a value
     *
     * @return bool
     */
    public function hasAbuseType()
    {
        return $this->abuse_type !== null;
    }

    /**
     * Get 'abuse_type' value
     *
     * @return int
     */
    public function getAbuseType()
    {
        return $this->abuse_type;
    }

    /**
     * Set 'abuse_type' value
     *
     * @param int $value
     */
    public function setAbuseType($value = null)
    {
        $this->abuse_type = $value;
    }

    /**
     * Check if 'content_type' has a value
     *
     * @return bool
     */
    public function hasContentType()
    {
        return $this->content_type !== null;
    }

    /**
     * Get 'content_type' value
     *
     * @return int
     */
    public function getContentType()
    {
        return $this->content_type;
    }

    /**
     * Set 'content_type' value
     *
     * @param int $value
     */
    public function setContentType($value = null)
    {
        $this->content_type = $value;
    }

    /**
     * Check if 'target_game_server_ip' has a value
     *
     * @return bool
     */
    public function hasTargetGameServerIp()
    {
        return $this->target_game_server_ip !== null;
    }

    /**
     * Get 'target_game_server_ip' value
     *
     * @return int
     */
    public function getTargetGameServerIp()
    {
        return $this->target_game_server_ip;
    }

    /**
     * Set 'target_game_server_ip' value
     *
     * @param int $value
     */
    public function setTargetGameServerIp($value = null)
    {
        $this->target_game_server_ip = $value;
    }

    /**
     * Check if 'target_game_server_port' has a value
     *
     * @return bool
     */
    public function hasTargetGameServerPort()
    {
        return $this->target_game_server_port !== null;
    }

    /**
     * Get 'target_game_server_port' value
     *
     * @return int
     */
    public function getTargetGameServerPort()
    {
        return $this->target_game_server_port;
    }

    /**
     * Set 'target_game_server_port' value
     *
     * @param int $value
     */
    public function setTargetGameServerPort($value = null)
    {
        $this->target_game_server_port = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'target_steam_id' => null,
            'description' => null,
            'gid' => null,
            'abuse_type' => null,
            'content_type' => null,
            'target_game_server_ip' => null,
            'target_game_server_port' => null
        ], $values);

        $message->setTargetSteamId($values['target_steam_id']);
        $message->setDescription($values['description']);
        $message->setGid($values['gid']);
        $message->setAbuseType($values['abuse_type']);
        $message->setContentType($values['content_type']);
        $message->setTargetGameServerIp($values['target_game_server_ip']);
        $message->setTargetGameServerPort($values['target_game_server_port']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgGCReportAbuse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'target_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'gid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'abuse_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'content_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'target_game_server_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'target_game_server_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->target_steam_id !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->target_steam_id);
        }

        if ($this->description !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->description);
        }

        if ($this->gid !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->gid);
        }

        if ($this->abuse_type !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->abuse_type);
        }

        if ($this->content_type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->content_type);
        }

        if ($this->target_game_server_ip !== null) {
            $writer->writeVarint($stream, 53);
            $writer->writeFixed32($stream, $this->target_game_server_ip);
        }

        if ($this->target_game_server_port !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->target_game_server_port);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->target_steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->description = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->gid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->abuse_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->content_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->target_game_server_ip = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->target_game_server_port = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->target_steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->description);
        }

        if ($this->gid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->gid);
        }

        if ($this->abuse_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->abuse_type);
        }

        if ($this->content_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->content_type);
        }

        if ($this->target_game_server_ip !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->target_game_server_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->target_game_server_port);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->target_steam_id = null;
        $this->description = null;
        $this->gid = null;
        $this->abuse_type = null;
        $this->content_type = null;
        $this->target_game_server_ip = null;
        $this->target_game_server_port = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGCReportAbuse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->target_steam_id = ($message->target_steam_id !== null) ? $message->target_steam_id : $this->target_steam_id;
        $this->description = ($message->description !== null) ? $message->description : $this->description;
        $this->gid = ($message->gid !== null) ? $message->gid : $this->gid;
        $this->abuse_type = ($message->abuse_type !== null) ? $message->abuse_type : $this->abuse_type;
        $this->content_type = ($message->content_type !== null) ? $message->content_type : $this->content_type;
        $this->target_game_server_ip = ($message->target_game_server_ip !== null) ? $message->target_game_server_ip : $this->target_game_server_ip;
        $this->target_game_server_port = ($message->target_game_server_port !== null) ? $message->target_game_server_port : $this->target_game_server_port;
    }


}

