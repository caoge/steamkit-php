<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGC.CMsgGCStorePurchaseInit
 */
class CMsgGCStorePurchaseInit extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * country optional string = 1
     *
     * @var string
     */
    protected $country = null;

    /**
     * language optional int32 = 2
     *
     * @var int
     */
    protected $language = null;

    /**
     * currency optional int32 = 3
     *
     * @var int
     */
    protected $currency = null;

    /**
     * line_items repeated message = 4
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CGCStorePurchaseInit_LineItem>
     */
    protected $line_items = null;

    /**
     * Check if 'country' has a value
     *
     * @return bool
     */
    public function hasCountry()
    {
        return $this->country !== null;
    }

    /**
     * Get 'country' value
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Set 'country' value
     *
     * @param string $value
     */
    public function setCountry($value = null)
    {
        $this->country = $value;
    }

    /**
     * Check if 'language' has a value
     *
     * @return bool
     */
    public function hasLanguage()
    {
        return $this->language !== null;
    }

    /**
     * Get 'language' value
     *
     * @return int
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set 'language' value
     *
     * @param int $value
     */
    public function setLanguage($value = null)
    {
        $this->language = $value;
    }

    /**
     * Check if 'currency' has a value
     *
     * @return bool
     */
    public function hasCurrency()
    {
        return $this->currency !== null;
    }

    /**
     * Get 'currency' value
     *
     * @return int
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * Set 'currency' value
     *
     * @param int $value
     */
    public function setCurrency($value = null)
    {
        $this->currency = $value;
    }

    /**
     * Check if 'line_items' has a value
     *
     * @return bool
     */
    public function hasLineItemsList()
    {
        return $this->line_items !== null;
    }

    /**
     * Get 'line_items' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CGCStorePurchaseInit_LineItem>
     */
    public function getLineItemsList()
    {
        return $this->line_items;
    }

    /**
     * Set 'line_items' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgGC\CGCStorePurchaseInit_LineItem> $value
     */
    public function setLineItemsList(\Protobuf\Collection $value = null)
    {
        $this->line_items = $value;
    }

    /**
     * Add a new element to 'line_items'
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgGC\CGCStorePurchaseInit_LineItem $value
     */
    public function addLineItems(\SteamKit\Base\GC\CSGO\SteamMsgGC\CGCStorePurchaseInit_LineItem $value)
    {
        if ($this->line_items === null) {
            $this->line_items = new \Protobuf\MessageCollection();
        }

        $this->line_items->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'country' => null,
            'language' => null,
            'currency' => null,
            'line_items' => []
        ], $values);

        $message->setCountry($values['country']);
        $message->setLanguage($values['language']);
        $message->setCurrency($values['currency']);

        foreach ($values['line_items'] as $item) {
            $message->addLineItems($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgGCStorePurchaseInit',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'country',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'language',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'currency',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'line_items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgGC.CGCStorePurchaseInit_LineItem'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->country !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->country);
        }

        if ($this->language !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->language);
        }

        if ($this->currency !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->currency);
        }

        if ($this->line_items !== null) {
            foreach ($this->line_items as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->country = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->language = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->currency = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgGC\CGCStorePurchaseInit_LineItem();

                if ($this->line_items === null) {
                    $this->line_items = new \Protobuf\MessageCollection();
                }

                $this->line_items->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->country !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->country);
        }

        if ($this->language !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->language);
        }

        if ($this->currency !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->currency);
        }

        if ($this->line_items !== null) {
            foreach ($this->line_items as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->country = null;
        $this->language = null;
        $this->currency = null;
        $this->line_items = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGCStorePurchaseInit) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->country = ($message->country !== null) ? $message->country : $this->country;
        $this->language = ($message->language !== null) ? $message->language : $this->language;
        $this->currency = ($message->currency !== null) ? $message->currency : $this->currency;
        $this->line_items = ($message->line_items !== null) ? $message->line_items : $this->line_items;
    }


}

