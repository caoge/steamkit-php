<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/base_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGameServerInfo;

/**
 * Protobuf enum : SteamKit.Base.GC.CSGO.SteamMsgGC.CMsgGameServerInfo.ServerType
 */
class ServerType extends \Protobuf\Enum
{

    /**
     * UNSPECIFIED = 0
     */
    const UNSPECIFIED_VALUE = 0;

    /**
     * GAME = 1
     */
    const GAME_VALUE = 1;

    /**
     * PROXY = 2
     */
    const PROXY_VALUE = 2;

    /**
     * @var \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGameServerInfo\ServerType
     */
    protected static $UNSPECIFIED = null;

    /**
     * @var \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGameServerInfo\ServerType
     */
    protected static $GAME = null;

    /**
     * @var \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGameServerInfo\ServerType
     */
    protected static $PROXY = null;

    /**
     * @return \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGameServerInfo\ServerType
     */
    public static function UNSPECIFIED()
    {
        if (self::$UNSPECIFIED !== null) {
            return self::$UNSPECIFIED;
        }

        return self::$UNSPECIFIED = new self('UNSPECIFIED', self::UNSPECIFIED_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGameServerInfo\ServerType
     */
    public static function GAME()
    {
        if (self::$GAME !== null) {
            return self::$GAME;
        }

        return self::$GAME = new self('GAME', self::GAME_VALUE);
    }

    /**
     * @return \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGameServerInfo\ServerType
     */
    public static function PROXY()
    {
        if (self::$PROXY !== null) {
            return self::$PROXY;
        }

        return self::$PROXY = new self('PROXY', self::PROXY_VALUE);
    }

    /**
     * @param int $value
     * @return \SteamKit\Base\GC\CSGO\SteamMsgGC\CMsgGameServerInfo\ServerType
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0: return self::UNSPECIFIED();
            case 1: return self::GAME();
            case 2: return self::PROXY();
            default: return null;
        }
    }


}

