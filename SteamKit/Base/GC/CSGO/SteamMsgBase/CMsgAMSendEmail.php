<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/steammessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgBase;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgBase.CMsgAMSendEmail
 */
class CMsgAMSendEmail extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steamid optional fixed64 = 1
     *
     * @var int
     */
    protected $steamid = null;

    /**
     * email_msg_type optional uint32 = 2
     *
     * @var int
     */
    protected $email_msg_type = null;

    /**
     * email_format optional uint32 = 3
     *
     * @var int
     */
    protected $email_format = null;

    /**
     * persona_name_tokens repeated message = 5
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\PersonaNameReplacementToken>
     */
    protected $persona_name_tokens = null;

    /**
     * source_gc optional uint32 = 6
     *
     * @var int
     */
    protected $source_gc = null;

    /**
     * tokens repeated message = 7
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\ReplacementToken>
     */
    protected $tokens = null;

    /**
     * Check if 'steamid' has a value
     *
     * @return bool
     */
    public function hasSteamid()
    {
        return $this->steamid !== null;
    }

    /**
     * Get 'steamid' value
     *
     * @return int
     */
    public function getSteamid()
    {
        return $this->steamid;
    }

    /**
     * Set 'steamid' value
     *
     * @param int $value
     */
    public function setSteamid($value = null)
    {
        $this->steamid = $value;
    }

    /**
     * Check if 'email_msg_type' has a value
     *
     * @return bool
     */
    public function hasEmailMsgType()
    {
        return $this->email_msg_type !== null;
    }

    /**
     * Get 'email_msg_type' value
     *
     * @return int
     */
    public function getEmailMsgType()
    {
        return $this->email_msg_type;
    }

    /**
     * Set 'email_msg_type' value
     *
     * @param int $value
     */
    public function setEmailMsgType($value = null)
    {
        $this->email_msg_type = $value;
    }

    /**
     * Check if 'email_format' has a value
     *
     * @return bool
     */
    public function hasEmailFormat()
    {
        return $this->email_format !== null;
    }

    /**
     * Get 'email_format' value
     *
     * @return int
     */
    public function getEmailFormat()
    {
        return $this->email_format;
    }

    /**
     * Set 'email_format' value
     *
     * @param int $value
     */
    public function setEmailFormat($value = null)
    {
        $this->email_format = $value;
    }

    /**
     * Check if 'persona_name_tokens' has a value
     *
     * @return bool
     */
    public function hasPersonaNameTokensList()
    {
        return $this->persona_name_tokens !== null;
    }

    /**
     * Get 'persona_name_tokens' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\PersonaNameReplacementToken>
     */
    public function getPersonaNameTokensList()
    {
        return $this->persona_name_tokens;
    }

    /**
     * Set 'persona_name_tokens' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\PersonaNameReplacementToken> $value
     */
    public function setPersonaNameTokensList(\Protobuf\Collection $value = null)
    {
        $this->persona_name_tokens = $value;
    }

    /**
     * Add a new element to 'persona_name_tokens'
     *
     * @param
     * \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\PersonaNameReplacementToken
     * $value
     */
    public function addPersonaNameTokens(\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\PersonaNameReplacementToken $value)
    {
        if ($this->persona_name_tokens === null) {
            $this->persona_name_tokens = new \Protobuf\MessageCollection();
        }

        $this->persona_name_tokens->add($value);
    }

    /**
     * Check if 'source_gc' has a value
     *
     * @return bool
     */
    public function hasSourceGc()
    {
        return $this->source_gc !== null;
    }

    /**
     * Get 'source_gc' value
     *
     * @return int
     */
    public function getSourceGc()
    {
        return $this->source_gc;
    }

    /**
     * Set 'source_gc' value
     *
     * @param int $value
     */
    public function setSourceGc($value = null)
    {
        $this->source_gc = $value;
    }

    /**
     * Check if 'tokens' has a value
     *
     * @return bool
     */
    public function hasTokensList()
    {
        return $this->tokens !== null;
    }

    /**
     * Get 'tokens' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\ReplacementToken>
     */
    public function getTokensList()
    {
        return $this->tokens;
    }

    /**
     * Set 'tokens' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\ReplacementToken> $value
     */
    public function setTokensList(\Protobuf\Collection $value = null)
    {
        $this->tokens = $value;
    }

    /**
     * Add a new element to 'tokens'
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\ReplacementToken
     * $value
     */
    public function addTokens(\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\ReplacementToken $value)
    {
        if ($this->tokens === null) {
            $this->tokens = new \Protobuf\MessageCollection();
        }

        $this->tokens->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steamid' => null,
            'email_msg_type' => null,
            'email_format' => null,
            'persona_name_tokens' => [],
            'source_gc' => null,
            'tokens' => []
        ], $values);

        $message->setSteamid($values['steamid']);
        $message->setEmailMsgType($values['email_msg_type']);
        $message->setEmailFormat($values['email_format']);
        $message->setSourceGc($values['source_gc']);

        foreach ($values['persona_name_tokens'] as $item) {
            $message->addPersonaNameTokens($item);
        }

        foreach ($values['tokens'] as $item) {
            $message->addTokens($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgAMSendEmail',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steamid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'email_msg_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'email_format',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'persona_name_tokens',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgBase.CMsgAMSendEmail.PersonaNameReplacementToken'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'source_gc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'tokens',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgBase.CMsgAMSendEmail.ReplacementToken'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steamid !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->steamid);
        }

        if ($this->email_msg_type !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->email_msg_type);
        }

        if ($this->email_format !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->email_format);
        }

        if ($this->persona_name_tokens !== null) {
            foreach ($this->persona_name_tokens as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->source_gc !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->source_gc);
        }

        if ($this->tokens !== null) {
            foreach ($this->tokens as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steamid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->email_msg_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->email_format = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\PersonaNameReplacementToken();

                if ($this->persona_name_tokens === null) {
                    $this->persona_name_tokens = new \Protobuf\MessageCollection();
                }

                $this->persona_name_tokens->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->source_gc = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail\ReplacementToken();

                if ($this->tokens === null) {
                    $this->tokens = new \Protobuf\MessageCollection();
                }

                $this->tokens->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steamid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->email_msg_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->email_msg_type);
        }

        if ($this->email_format !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->email_format);
        }

        if ($this->persona_name_tokens !== null) {
            foreach ($this->persona_name_tokens as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->source_gc !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->source_gc);
        }

        if ($this->tokens !== null) {
            foreach ($this->tokens as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steamid = null;
        $this->email_msg_type = null;
        $this->email_format = null;
        $this->persona_name_tokens = null;
        $this->source_gc = null;
        $this->tokens = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgAMSendEmail) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steamid = ($message->steamid !== null) ? $message->steamid : $this->steamid;
        $this->email_msg_type = ($message->email_msg_type !== null) ? $message->email_msg_type : $this->email_msg_type;
        $this->email_format = ($message->email_format !== null) ? $message->email_format : $this->email_format;
        $this->persona_name_tokens = ($message->persona_name_tokens !== null) ? $message->persona_name_tokens : $this->persona_name_tokens;
        $this->source_gc = ($message->source_gc !== null) ? $message->source_gc : $this->source_gc;
        $this->tokens = ($message->tokens !== null) ? $message->tokens : $this->tokens;
    }


}

