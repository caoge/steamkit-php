<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/steammessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgBase;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgBase.CMsgGCHUpdateSession
 */
class CMsgGCHUpdateSession extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steam_id optional fixed64 = 1
     *
     * @var int
     */
    protected $steam_id = null;

    /**
     * app_id optional uint32 = 2
     *
     * @var int
     */
    protected $app_id = null;

    /**
     * online optional bool = 3
     *
     * @var bool
     */
    protected $online = null;

    /**
     * server_steam_id optional fixed64 = 4
     *
     * @var int
     */
    protected $server_steam_id = null;

    /**
     * server_addr optional uint32 = 5
     *
     * @var int
     */
    protected $server_addr = null;

    /**
     * server_port optional uint32 = 6
     *
     * @var int
     */
    protected $server_port = null;

    /**
     * os_type optional uint32 = 7
     *
     * @var int
     */
    protected $os_type = null;

    /**
     * client_addr optional uint32 = 8
     *
     * @var int
     */
    protected $client_addr = null;

    /**
     * extra_fields repeated message = 9
     *
     * @var \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgGCHUpdateSession\ExtraField>
     */
    protected $extra_fields = null;

    /**
     * Check if 'steam_id' has a value
     *
     * @return bool
     */
    public function hasSteamId()
    {
        return $this->steam_id !== null;
    }

    /**
     * Get 'steam_id' value
     *
     * @return int
     */
    public function getSteamId()
    {
        return $this->steam_id;
    }

    /**
     * Set 'steam_id' value
     *
     * @param int $value
     */
    public function setSteamId($value = null)
    {
        $this->steam_id = $value;
    }

    /**
     * Check if 'app_id' has a value
     *
     * @return bool
     */
    public function hasAppId()
    {
        return $this->app_id !== null;
    }

    /**
     * Get 'app_id' value
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * Set 'app_id' value
     *
     * @param int $value
     */
    public function setAppId($value = null)
    {
        $this->app_id = $value;
    }

    /**
     * Check if 'online' has a value
     *
     * @return bool
     */
    public function hasOnline()
    {
        return $this->online !== null;
    }

    /**
     * Get 'online' value
     *
     * @return bool
     */
    public function getOnline()
    {
        return $this->online;
    }

    /**
     * Set 'online' value
     *
     * @param bool $value
     */
    public function setOnline($value = null)
    {
        $this->online = $value;
    }

    /**
     * Check if 'server_steam_id' has a value
     *
     * @return bool
     */
    public function hasServerSteamId()
    {
        return $this->server_steam_id !== null;
    }

    /**
     * Get 'server_steam_id' value
     *
     * @return int
     */
    public function getServerSteamId()
    {
        return $this->server_steam_id;
    }

    /**
     * Set 'server_steam_id' value
     *
     * @param int $value
     */
    public function setServerSteamId($value = null)
    {
        $this->server_steam_id = $value;
    }

    /**
     * Check if 'server_addr' has a value
     *
     * @return bool
     */
    public function hasServerAddr()
    {
        return $this->server_addr !== null;
    }

    /**
     * Get 'server_addr' value
     *
     * @return int
     */
    public function getServerAddr()
    {
        return $this->server_addr;
    }

    /**
     * Set 'server_addr' value
     *
     * @param int $value
     */
    public function setServerAddr($value = null)
    {
        $this->server_addr = $value;
    }

    /**
     * Check if 'server_port' has a value
     *
     * @return bool
     */
    public function hasServerPort()
    {
        return $this->server_port !== null;
    }

    /**
     * Get 'server_port' value
     *
     * @return int
     */
    public function getServerPort()
    {
        return $this->server_port;
    }

    /**
     * Set 'server_port' value
     *
     * @param int $value
     */
    public function setServerPort($value = null)
    {
        $this->server_port = $value;
    }

    /**
     * Check if 'os_type' has a value
     *
     * @return bool
     */
    public function hasOsType()
    {
        return $this->os_type !== null;
    }

    /**
     * Get 'os_type' value
     *
     * @return int
     */
    public function getOsType()
    {
        return $this->os_type;
    }

    /**
     * Set 'os_type' value
     *
     * @param int $value
     */
    public function setOsType($value = null)
    {
        $this->os_type = $value;
    }

    /**
     * Check if 'client_addr' has a value
     *
     * @return bool
     */
    public function hasClientAddr()
    {
        return $this->client_addr !== null;
    }

    /**
     * Get 'client_addr' value
     *
     * @return int
     */
    public function getClientAddr()
    {
        return $this->client_addr;
    }

    /**
     * Set 'client_addr' value
     *
     * @param int $value
     */
    public function setClientAddr($value = null)
    {
        $this->client_addr = $value;
    }

    /**
     * Check if 'extra_fields' has a value
     *
     * @return bool
     */
    public function hasExtraFieldsList()
    {
        return $this->extra_fields !== null;
    }

    /**
     * Get 'extra_fields' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgGCHUpdateSession\ExtraField>
     */
    public function getExtraFieldsList()
    {
        return $this->extra_fields;
    }

    /**
     * Set 'extra_fields' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgGCHUpdateSession\ExtraField> $value
     */
    public function setExtraFieldsList(\Protobuf\Collection $value = null)
    {
        $this->extra_fields = $value;
    }

    /**
     * Add a new element to 'extra_fields'
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgGCHUpdateSession\ExtraField
     * $value
     */
    public function addExtraFields(\SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgGCHUpdateSession\ExtraField $value)
    {
        if ($this->extra_fields === null) {
            $this->extra_fields = new \Protobuf\MessageCollection();
        }

        $this->extra_fields->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steam_id' => null,
            'app_id' => null,
            'online' => null,
            'server_steam_id' => null,
            'server_addr' => null,
            'server_port' => null,
            'os_type' => null,
            'client_addr' => null,
            'extra_fields' => []
        ], $values);

        $message->setSteamId($values['steam_id']);
        $message->setAppId($values['app_id']);
        $message->setOnline($values['online']);
        $message->setServerSteamId($values['server_steam_id']);
        $message->setServerAddr($values['server_addr']);
        $message->setServerPort($values['server_port']);
        $message->setOsType($values['os_type']);
        $message->setClientAddr($values['client_addr']);

        foreach ($values['extra_fields'] as $item) {
            $message->addExtraFields($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgGCHUpdateSession',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'online',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'server_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'server_addr',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'server_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'os_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'client_addr',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'extra_fields',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgBase.CMsgGCHUpdateSession.ExtraField'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steam_id !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->steam_id);
        }

        if ($this->app_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->app_id);
        }

        if ($this->online !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->online);
        }

        if ($this->server_steam_id !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeFixed64($stream, $this->server_steam_id);
        }

        if ($this->server_addr !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->server_addr);
        }

        if ($this->server_port !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->server_port);
        }

        if ($this->os_type !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->os_type);
        }

        if ($this->client_addr !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->client_addr);
        }

        if ($this->extra_fields !== null) {
            foreach ($this->extra_fields as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->online = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->server_steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->server_addr = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->server_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->os_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->client_addr = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgGCHUpdateSession\ExtraField();

                if ($this->extra_fields === null) {
                    $this->extra_fields = new \Protobuf\MessageCollection();
                }

                $this->extra_fields->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_id);
        }

        if ($this->online !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->server_steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->server_addr !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->server_addr);
        }

        if ($this->server_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->server_port);
        }

        if ($this->os_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->os_type);
        }

        if ($this->client_addr !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->client_addr);
        }

        if ($this->extra_fields !== null) {
            foreach ($this->extra_fields as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steam_id = null;
        $this->app_id = null;
        $this->online = null;
        $this->server_steam_id = null;
        $this->server_addr = null;
        $this->server_port = null;
        $this->os_type = null;
        $this->client_addr = null;
        $this->extra_fields = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgGCHUpdateSession) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steam_id = ($message->steam_id !== null) ? $message->steam_id : $this->steam_id;
        $this->app_id = ($message->app_id !== null) ? $message->app_id : $this->app_id;
        $this->online = ($message->online !== null) ? $message->online : $this->online;
        $this->server_steam_id = ($message->server_steam_id !== null) ? $message->server_steam_id : $this->server_steam_id;
        $this->server_addr = ($message->server_addr !== null) ? $message->server_addr : $this->server_addr;
        $this->server_port = ($message->server_port !== null) ? $message->server_port : $this->server_port;
        $this->os_type = ($message->os_type !== null) ? $message->os_type : $this->os_type;
        $this->client_addr = ($message->client_addr !== null) ? $message->client_addr : $this->client_addr;
        $this->extra_fields = ($message->extra_fields !== null) ? $message->extra_fields : $this->extra_fields;
    }


}

