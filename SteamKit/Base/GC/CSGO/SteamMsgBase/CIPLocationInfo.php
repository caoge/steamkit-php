<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/steammessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgBase;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgBase.CIPLocationInfo
 */
class CIPLocationInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * ip optional uint32 = 1
     *
     * @var int
     */
    protected $ip = null;

    /**
     * latitude optional float = 2
     *
     * @var float
     */
    protected $latitude = null;

    /**
     * longitude optional float = 3
     *
     * @var float
     */
    protected $longitude = null;

    /**
     * country optional string = 4
     *
     * @var string
     */
    protected $country = null;

    /**
     * state optional string = 5
     *
     * @var string
     */
    protected $state = null;

    /**
     * city optional string = 6
     *
     * @var string
     */
    protected $city = null;

    /**
     * Check if 'ip' has a value
     *
     * @return bool
     */
    public function hasIp()
    {
        return $this->ip !== null;
    }

    /**
     * Get 'ip' value
     *
     * @return int
     */
    public function getIp()
    {
        return $this->ip;
    }

    /**
     * Set 'ip' value
     *
     * @param int $value
     */
    public function setIp($value = null)
    {
        $this->ip = $value;
    }

    /**
     * Check if 'latitude' has a value
     *
     * @return bool
     */
    public function hasLatitude()
    {
        return $this->latitude !== null;
    }

    /**
     * Get 'latitude' value
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->latitude;
    }

    /**
     * Set 'latitude' value
     *
     * @param float $value
     */
    public function setLatitude($value = null)
    {
        $this->latitude = $value;
    }

    /**
     * Check if 'longitude' has a value
     *
     * @return bool
     */
    public function hasLongitude()
    {
        return $this->longitude !== null;
    }

    /**
     * Get 'longitude' value
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->longitude;
    }

    /**
     * Set 'longitude' value
     *
     * @param float $value
     */
    public function setLongitude($value = null)
    {
        $this->longitude = $value;
    }

    /**
     * Check if 'country' has a value
     *
     * @return bool
     */
    public function hasCountry()
    {
        return $this->country !== null;
    }

    /**
     * Get 'country' value
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Set 'country' value
     *
     * @param string $value
     */
    public function setCountry($value = null)
    {
        $this->country = $value;
    }

    /**
     * Check if 'state' has a value
     *
     * @return bool
     */
    public function hasState()
    {
        return $this->state !== null;
    }

    /**
     * Get 'state' value
     *
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set 'state' value
     *
     * @param string $value
     */
    public function setState($value = null)
    {
        $this->state = $value;
    }

    /**
     * Check if 'city' has a value
     *
     * @return bool
     */
    public function hasCity()
    {
        return $this->city !== null;
    }

    /**
     * Get 'city' value
     *
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * Set 'city' value
     *
     * @param string $value
     */
    public function setCity($value = null)
    {
        $this->city = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'ip' => null,
            'latitude' => null,
            'longitude' => null,
            'country' => null,
            'state' => null,
            'city' => null
        ], $values);

        $message->setIp($values['ip']);
        $message->setLatitude($values['latitude']);
        $message->setLongitude($values['longitude']);
        $message->setCountry($values['country']);
        $message->setState($values['state']);
        $message->setCity($values['city']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CIPLocationInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'latitude',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'longitude',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'country',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'city',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->ip !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->ip);
        }

        if ($this->latitude !== null) {
            $writer->writeVarint($stream, 21);
            $writer->writeFloat($stream, $this->latitude);
        }

        if ($this->longitude !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFloat($stream, $this->longitude);
        }

        if ($this->country !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->country);
        }

        if ($this->state !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->state);
        }

        if ($this->city !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->city);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->latitude = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->longitude = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->country = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->state = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->city = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->ip !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ip);
        }

        if ($this->latitude !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->longitude !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->country !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->country);
        }

        if ($this->state !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->state);
        }

        if ($this->city !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->city);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->ip = null;
        $this->latitude = null;
        $this->longitude = null;
        $this->country = null;
        $this->state = null;
        $this->city = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgBase\CIPLocationInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->ip = ($message->ip !== null) ? $message->ip : $this->ip;
        $this->latitude = ($message->latitude !== null) ? $message->latitude : $this->latitude;
        $this->longitude = ($message->longitude !== null) ? $message->longitude : $this->longitude;
        $this->country = ($message->country !== null) ? $message->country : $this->country;
        $this->state = ($message->state !== null) ? $message->state : $this->state;
        $this->city = ($message->city !== null) ? $message->city : $this->city;
    }


}

