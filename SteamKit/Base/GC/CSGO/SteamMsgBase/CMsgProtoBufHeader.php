<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/steammessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgBase;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgBase.CMsgProtoBufHeader
 */
class CMsgProtoBufHeader extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * client_steam_id optional fixed64 = 1
     *
     * @var int
     */
    protected $client_steam_id = null;

    /**
     * client_session_id optional int32 = 2
     *
     * @var int
     */
    protected $client_session_id = null;

    /**
     * source_app_id optional uint32 = 3
     *
     * @var int
     */
    protected $source_app_id = null;

    /**
     * job_id_source optional fixed64 = 10
     *
     * @var int
     */
    protected $job_id_source = null;

    /**
     * job_id_target optional fixed64 = 11
     *
     * @var int
     */
    protected $job_id_target = null;

    /**
     * target_job_name optional string = 12
     *
     * @var string
     */
    protected $target_job_name = null;

    /**
     * eresult optional int32 = 13
     *
     * @var int
     */
    protected $eresult = null;

    /**
     * error_message optional string = 14
     *
     * @var string
     */
    protected $error_message = null;

    /**
     * gc_msg_src optional enum = 200
     *
     * @var \SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc
     */
    protected $gc_msg_src = null;

    /**
     * gc_dir_index_source optional uint32 = 201
     *
     * @var int
     */
    protected $gc_dir_index_source = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->job_id_source = '18446744073709551615';
        $this->job_id_target = '18446744073709551615';
        $this->eresult = '2';
        $this->gc_msg_src = \SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'client_steam_id' has a value
     *
     * @return bool
     */
    public function hasClientSteamId()
    {
        return $this->client_steam_id !== null;
    }

    /**
     * Get 'client_steam_id' value
     *
     * @return int
     */
    public function getClientSteamId()
    {
        return $this->client_steam_id;
    }

    /**
     * Set 'client_steam_id' value
     *
     * @param int $value
     */
    public function setClientSteamId($value = null)
    {
        $this->client_steam_id = $value;
    }

    /**
     * Check if 'client_session_id' has a value
     *
     * @return bool
     */
    public function hasClientSessionId()
    {
        return $this->client_session_id !== null;
    }

    /**
     * Get 'client_session_id' value
     *
     * @return int
     */
    public function getClientSessionId()
    {
        return $this->client_session_id;
    }

    /**
     * Set 'client_session_id' value
     *
     * @param int $value
     */
    public function setClientSessionId($value = null)
    {
        $this->client_session_id = $value;
    }

    /**
     * Check if 'source_app_id' has a value
     *
     * @return bool
     */
    public function hasSourceAppId()
    {
        return $this->source_app_id !== null;
    }

    /**
     * Get 'source_app_id' value
     *
     * @return int
     */
    public function getSourceAppId()
    {
        return $this->source_app_id;
    }

    /**
     * Set 'source_app_id' value
     *
     * @param int $value
     */
    public function setSourceAppId($value = null)
    {
        $this->source_app_id = $value;
    }

    /**
     * Check if 'job_id_source' has a value
     *
     * @return bool
     */
    public function hasJobIdSource()
    {
        return $this->job_id_source !== null;
    }

    /**
     * Get 'job_id_source' value
     *
     * @return int
     */
    public function getJobIdSource()
    {
        return $this->job_id_source;
    }

    /**
     * Set 'job_id_source' value
     *
     * @param int $value
     */
    public function setJobIdSource($value = null)
    {
        $this->job_id_source = $value;
    }

    /**
     * Check if 'job_id_target' has a value
     *
     * @return bool
     */
    public function hasJobIdTarget()
    {
        return $this->job_id_target !== null;
    }

    /**
     * Get 'job_id_target' value
     *
     * @return int
     */
    public function getJobIdTarget()
    {
        return $this->job_id_target;
    }

    /**
     * Set 'job_id_target' value
     *
     * @param int $value
     */
    public function setJobIdTarget($value = null)
    {
        $this->job_id_target = $value;
    }

    /**
     * Check if 'target_job_name' has a value
     *
     * @return bool
     */
    public function hasTargetJobName()
    {
        return $this->target_job_name !== null;
    }

    /**
     * Get 'target_job_name' value
     *
     * @return string
     */
    public function getTargetJobName()
    {
        return $this->target_job_name;
    }

    /**
     * Set 'target_job_name' value
     *
     * @param string $value
     */
    public function setTargetJobName($value = null)
    {
        $this->target_job_name = $value;
    }

    /**
     * Check if 'eresult' has a value
     *
     * @return bool
     */
    public function hasEresult()
    {
        return $this->eresult !== null;
    }

    /**
     * Get 'eresult' value
     *
     * @return int
     */
    public function getEresult()
    {
        return $this->eresult;
    }

    /**
     * Set 'eresult' value
     *
     * @param int $value
     */
    public function setEresult($value = null)
    {
        $this->eresult = $value;
    }

    /**
     * Check if 'error_message' has a value
     *
     * @return bool
     */
    public function hasErrorMessage()
    {
        return $this->error_message !== null;
    }

    /**
     * Get 'error_message' value
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }

    /**
     * Set 'error_message' value
     *
     * @param string $value
     */
    public function setErrorMessage($value = null)
    {
        $this->error_message = $value;
    }

    /**
     * Check if 'gc_msg_src' has a value
     *
     * @return bool
     */
    public function hasGcMsgSrc()
    {
        return $this->gc_msg_src !== null;
    }

    /**
     * Get 'gc_msg_src' value
     *
     * @return \SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc
     */
    public function getGcMsgSrc()
    {
        return $this->gc_msg_src;
    }

    /**
     * Set 'gc_msg_src' value
     *
     * @param \SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc $value
     */
    public function setGcMsgSrc(\SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc $value = null)
    {
        $this->gc_msg_src = $value;
    }

    /**
     * Check if 'gc_dir_index_source' has a value
     *
     * @return bool
     */
    public function hasGcDirIndexSource()
    {
        return $this->gc_dir_index_source !== null;
    }

    /**
     * Get 'gc_dir_index_source' value
     *
     * @return int
     */
    public function getGcDirIndexSource()
    {
        return $this->gc_dir_index_source;
    }

    /**
     * Set 'gc_dir_index_source' value
     *
     * @param int $value
     */
    public function setGcDirIndexSource($value = null)
    {
        $this->gc_dir_index_source = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'client_steam_id' => null,
            'client_session_id' => null,
            'source_app_id' => null,
            'job_id_source' => '18446744073709551615',
            'job_id_target' => '18446744073709551615',
            'target_job_name' => null,
            'eresult' => '2',
            'error_message' => null,
            'gc_msg_src' => \SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified(),
            'gc_dir_index_source' => null
        ], $values);

        $message->setClientSteamId($values['client_steam_id']);
        $message->setClientSessionId($values['client_session_id']);
        $message->setSourceAppId($values['source_app_id']);
        $message->setJobIdSource($values['job_id_source']);
        $message->setJobIdTarget($values['job_id_target']);
        $message->setTargetJobName($values['target_job_name']);
        $message->setEresult($values['eresult']);
        $message->setErrorMessage($values['error_message']);
        $message->setGcMsgSrc($values['gc_msg_src']);
        $message->setGcDirIndexSource($values['gc_dir_index_source']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        $options = \google\protobuf\MessageOptions::fromArray([
        ]);

        $options->extensions()->add(\SteamKit\Base\GC\CSGO\SteamMsgBase\Extension::msgpoolSoftLimit(), 256);
        $options->extensions()->add(\SteamKit\Base\GC\CSGO\SteamMsgBase\Extension::msgpoolHardLimit(), 1024);

        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgProtoBufHeader',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'client_steam_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'client_session_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'source_app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'job_id_source',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '18446744073709551615'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'job_id_target',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '18446744073709551615'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'target_job_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'eresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'error_message',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 200,
                    'name' => 'gc_msg_src',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.GC.CSGO.SteamMsgBase.GCProtoBufMsgSrc',
                    'default_value' => \SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 201,
                    'name' => 'gc_dir_index_source',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
            'options' => $options
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->client_steam_id !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->client_steam_id);
        }

        if ($this->client_session_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->client_session_id);
        }

        if ($this->source_app_id !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->source_app_id);
        }

        if ($this->job_id_source !== null) {
            $writer->writeVarint($stream, 81);
            $writer->writeFixed64($stream, $this->job_id_source);
        }

        if ($this->job_id_target !== null) {
            $writer->writeVarint($stream, 89);
            $writer->writeFixed64($stream, $this->job_id_target);
        }

        if ($this->target_job_name !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->target_job_name);
        }

        if ($this->eresult !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->eresult);
        }

        if ($this->error_message !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->error_message);
        }

        if ($this->gc_msg_src !== null) {
            $writer->writeVarint($stream, 1600);
            $writer->writeVarint($stream, $this->gc_msg_src->value());
        }

        if ($this->gc_dir_index_source !== null) {
            $writer->writeVarint($stream, 1608);
            $writer->writeVarint($stream, $this->gc_dir_index_source);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->client_steam_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->client_session_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->source_app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->job_id_source = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->job_id_target = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->target_job_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->eresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->error_message = $reader->readString($stream);

                continue;
            }

            if ($tag === 200) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->gc_msg_src = \SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 201) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->gc_dir_index_source = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->client_steam_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->client_session_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->client_session_id);
        }

        if ($this->source_app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->source_app_id);
        }

        if ($this->job_id_source !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->job_id_target !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->target_job_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->target_job_name);
        }

        if ($this->eresult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult);
        }

        if ($this->error_message !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->error_message);
        }

        if ($this->gc_msg_src !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->gc_msg_src->value());
        }

        if ($this->gc_dir_index_source !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->gc_dir_index_source);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->client_steam_id = null;
        $this->client_session_id = null;
        $this->source_app_id = null;
        $this->job_id_source = '18446744073709551615';
        $this->job_id_target = '18446744073709551615';
        $this->target_job_name = null;
        $this->eresult = '2';
        $this->error_message = null;
        $this->gc_msg_src = \SteamKit\Base\GC\CSGO\SteamMsgBase\GCProtoBufMsgSrc::GCProtoBufMsgSrc_Unspecified();
        $this->gc_dir_index_source = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgBase\CMsgProtoBufHeader) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->client_steam_id = ($message->client_steam_id !== null) ? $message->client_steam_id : $this->client_steam_id;
        $this->client_session_id = ($message->client_session_id !== null) ? $message->client_session_id : $this->client_session_id;
        $this->source_app_id = ($message->source_app_id !== null) ? $message->source_app_id : $this->source_app_id;
        $this->job_id_source = ($message->job_id_source !== null) ? $message->job_id_source : $this->job_id_source;
        $this->job_id_target = ($message->job_id_target !== null) ? $message->job_id_target : $this->job_id_target;
        $this->target_job_name = ($message->target_job_name !== null) ? $message->target_job_name : $this->target_job_name;
        $this->eresult = ($message->eresult !== null) ? $message->eresult : $this->eresult;
        $this->error_message = ($message->error_message !== null) ? $message->error_message : $this->error_message;
        $this->gc_msg_src = ($message->gc_msg_src !== null) ? $message->gc_msg_src : $this->gc_msg_src;
        $this->gc_dir_index_source = ($message->gc_dir_index_source !== null) ? $message->gc_dir_index_source : $this->gc_dir_index_source;
    }


}

