<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : csgo/econ_gcmessages.proto
 */


namespace SteamKit\Base\GC\CSGO\SteamMsgGCEcon;

/**
 * Protobuf message : SteamKit.Base.GC.CSGO.SteamMsgGCEcon.CMsgGCGiftedItems
 */
class CMsgGCGiftedItems extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * accountid optional uint32 = 1
     *
     * @var int
     */
    protected $accountid = null;

    /**
     * giftdefindex optional uint32 = 2
     *
     * @var int
     */
    protected $giftdefindex = null;

    /**
     * max_gifts_possible optional uint32 = 3
     *
     * @var int
     */
    protected $max_gifts_possible = null;

    /**
     * num_eligible_recipients optional uint32 = 4
     *
     * @var int
     */
    protected $num_eligible_recipients = null;

    /**
     * recipients_accountids repeated uint32 = 5
     *
     * @var \Protobuf\Collection
     */
    protected $recipients_accountids = null;

    /**
     * Check if 'accountid' has a value
     *
     * @return bool
     */
    public function hasAccountid()
    {
        return $this->accountid !== null;
    }

    /**
     * Get 'accountid' value
     *
     * @return int
     */
    public function getAccountid()
    {
        return $this->accountid;
    }

    /**
     * Set 'accountid' value
     *
     * @param int $value
     */
    public function setAccountid($value = null)
    {
        $this->accountid = $value;
    }

    /**
     * Check if 'giftdefindex' has a value
     *
     * @return bool
     */
    public function hasGiftdefindex()
    {
        return $this->giftdefindex !== null;
    }

    /**
     * Get 'giftdefindex' value
     *
     * @return int
     */
    public function getGiftdefindex()
    {
        return $this->giftdefindex;
    }

    /**
     * Set 'giftdefindex' value
     *
     * @param int $value
     */
    public function setGiftdefindex($value = null)
    {
        $this->giftdefindex = $value;
    }

    /**
     * Check if 'max_gifts_possible' has a value
     *
     * @return bool
     */
    public function hasMaxGiftsPossible()
    {
        return $this->max_gifts_possible !== null;
    }

    /**
     * Get 'max_gifts_possible' value
     *
     * @return int
     */
    public function getMaxGiftsPossible()
    {
        return $this->max_gifts_possible;
    }

    /**
     * Set 'max_gifts_possible' value
     *
     * @param int $value
     */
    public function setMaxGiftsPossible($value = null)
    {
        $this->max_gifts_possible = $value;
    }

    /**
     * Check if 'num_eligible_recipients' has a value
     *
     * @return bool
     */
    public function hasNumEligibleRecipients()
    {
        return $this->num_eligible_recipients !== null;
    }

    /**
     * Get 'num_eligible_recipients' value
     *
     * @return int
     */
    public function getNumEligibleRecipients()
    {
        return $this->num_eligible_recipients;
    }

    /**
     * Set 'num_eligible_recipients' value
     *
     * @param int $value
     */
    public function setNumEligibleRecipients($value = null)
    {
        $this->num_eligible_recipients = $value;
    }

    /**
     * Check if 'recipients_accountids' has a value
     *
     * @return bool
     */
    public function hasRecipientsAccountidsList()
    {
        return $this->recipients_accountids !== null;
    }

    /**
     * Get 'recipients_accountids' value
     *
     * @return \Protobuf\Collection
     */
    public function getRecipientsAccountidsList()
    {
        return $this->recipients_accountids;
    }

    /**
     * Set 'recipients_accountids' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setRecipientsAccountidsList(\Protobuf\Collection $value = null)
    {
        $this->recipients_accountids = $value;
    }

    /**
     * Add a new element to 'recipients_accountids'
     *
     * @param int $value
     */
    public function addRecipientsAccountids($value)
    {
        if ($this->recipients_accountids === null) {
            $this->recipients_accountids = new \Protobuf\ScalarCollection();
        }

        $this->recipients_accountids->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'accountid' => null,
            'giftdefindex' => null,
            'max_gifts_possible' => null,
            'num_eligible_recipients' => null,
            'recipients_accountids' => []
        ], $values);

        $message->setAccountid($values['accountid']);
        $message->setGiftdefindex($values['giftdefindex']);
        $message->setMaxGiftsPossible($values['max_gifts_possible']);
        $message->setNumEligibleRecipients($values['num_eligible_recipients']);

        foreach ($values['recipients_accountids'] as $item) {
            $message->addRecipientsAccountids($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgGCGiftedItems',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'accountid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'giftdefindex',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'max_gifts_possible',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'num_eligible_recipients',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'recipients_accountids',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->accountid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->accountid);
        }

        if ($this->giftdefindex !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->giftdefindex);
        }

        if ($this->max_gifts_possible !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->max_gifts_possible);
        }

        if ($this->num_eligible_recipients !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->num_eligible_recipients);
        }

        if ($this->recipients_accountids !== null) {
            foreach ($this->recipients_accountids as $val) {
                $writer->writeVarint($stream, 40);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->accountid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->giftdefindex = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->max_gifts_possible = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->num_eligible_recipients = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                if ($this->recipients_accountids === null) {
                    $this->recipients_accountids = new \Protobuf\ScalarCollection();
                }

                $this->recipients_accountids->add($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->accountid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->accountid);
        }

        if ($this->giftdefindex !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->giftdefindex);
        }

        if ($this->max_gifts_possible !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_gifts_possible);
        }

        if ($this->num_eligible_recipients !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->num_eligible_recipients);
        }

        if ($this->recipients_accountids !== null) {
            foreach ($this->recipients_accountids as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->accountid = null;
        $this->giftdefindex = null;
        $this->max_gifts_possible = null;
        $this->num_eligible_recipients = null;
        $this->recipients_accountids = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\CSGO\SteamMsgGCEcon\CMsgGCGiftedItems) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->accountid = ($message->accountid !== null) ? $message->accountid : $this->accountid;
        $this->giftdefindex = ($message->giftdefindex !== null) ? $message->giftdefindex : $this->giftdefindex;
        $this->max_gifts_possible = ($message->max_gifts_possible !== null) ? $message->max_gifts_possible : $this->max_gifts_possible;
        $this->num_eligible_recipients = ($message->num_eligible_recipients !== null) ? $message->num_eligible_recipients : $this->num_eligible_recipients;
        $this->recipients_accountids = ($message->recipients_accountids !== null) ? $message->recipients_accountids : $this->recipients_accountids;
    }


}

