<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : dod/htmlmessages.proto
 */


namespace SteamKit\Base\GC\DOD\HTMLMessages;

/**
 * Protobuf message : SteamKit.Base.GC.DOD.HTMLMessages.CMsgSetCursor
 */
class CMsgSetCursor extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * browser_handle optional uint32 = 1
     *
     * @var int
     */
    protected $browser_handle = null;

    /**
     * cursor optional uint32 = 2
     *
     * @var int
     */
    protected $cursor = null;

    /**
     * data optional uint32 = 3
     *
     * @var int
     */
    protected $data = null;

    /**
     * wide optional uint32 = 4
     *
     * @var int
     */
    protected $wide = null;

    /**
     * tall optional uint32 = 5
     *
     * @var int
     */
    protected $tall = null;

    /**
     * xhotspot optional uint32 = 6
     *
     * @var int
     */
    protected $xhotspot = null;

    /**
     * yhotspot optional uint32 = 7
     *
     * @var int
     */
    protected $yhotspot = null;

    /**
     * Check if 'browser_handle' has a value
     *
     * @return bool
     */
    public function hasBrowserHandle()
    {
        return $this->browser_handle !== null;
    }

    /**
     * Get 'browser_handle' value
     *
     * @return int
     */
    public function getBrowserHandle()
    {
        return $this->browser_handle;
    }

    /**
     * Set 'browser_handle' value
     *
     * @param int $value
     */
    public function setBrowserHandle($value = null)
    {
        $this->browser_handle = $value;
    }

    /**
     * Check if 'cursor' has a value
     *
     * @return bool
     */
    public function hasCursor()
    {
        return $this->cursor !== null;
    }

    /**
     * Get 'cursor' value
     *
     * @return int
     */
    public function getCursor()
    {
        return $this->cursor;
    }

    /**
     * Set 'cursor' value
     *
     * @param int $value
     */
    public function setCursor($value = null)
    {
        $this->cursor = $value;
    }

    /**
     * Check if 'data' has a value
     *
     * @return bool
     */
    public function hasData()
    {
        return $this->data !== null;
    }

    /**
     * Get 'data' value
     *
     * @return int
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Set 'data' value
     *
     * @param int $value
     */
    public function setData($value = null)
    {
        $this->data = $value;
    }

    /**
     * Check if 'wide' has a value
     *
     * @return bool
     */
    public function hasWide()
    {
        return $this->wide !== null;
    }

    /**
     * Get 'wide' value
     *
     * @return int
     */
    public function getWide()
    {
        return $this->wide;
    }

    /**
     * Set 'wide' value
     *
     * @param int $value
     */
    public function setWide($value = null)
    {
        $this->wide = $value;
    }

    /**
     * Check if 'tall' has a value
     *
     * @return bool
     */
    public function hasTall()
    {
        return $this->tall !== null;
    }

    /**
     * Get 'tall' value
     *
     * @return int
     */
    public function getTall()
    {
        return $this->tall;
    }

    /**
     * Set 'tall' value
     *
     * @param int $value
     */
    public function setTall($value = null)
    {
        $this->tall = $value;
    }

    /**
     * Check if 'xhotspot' has a value
     *
     * @return bool
     */
    public function hasXhotspot()
    {
        return $this->xhotspot !== null;
    }

    /**
     * Get 'xhotspot' value
     *
     * @return int
     */
    public function getXhotspot()
    {
        return $this->xhotspot;
    }

    /**
     * Set 'xhotspot' value
     *
     * @param int $value
     */
    public function setXhotspot($value = null)
    {
        $this->xhotspot = $value;
    }

    /**
     * Check if 'yhotspot' has a value
     *
     * @return bool
     */
    public function hasYhotspot()
    {
        return $this->yhotspot !== null;
    }

    /**
     * Get 'yhotspot' value
     *
     * @return int
     */
    public function getYhotspot()
    {
        return $this->yhotspot;
    }

    /**
     * Set 'yhotspot' value
     *
     * @param int $value
     */
    public function setYhotspot($value = null)
    {
        $this->yhotspot = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'browser_handle' => null,
            'cursor' => null,
            'data' => null,
            'wide' => null,
            'tall' => null,
            'xhotspot' => null,
            'yhotspot' => null
        ], $values);

        $message->setBrowserHandle($values['browser_handle']);
        $message->setCursor($values['cursor']);
        $message->setData($values['data']);
        $message->setWide($values['wide']);
        $message->setTall($values['tall']);
        $message->setXhotspot($values['xhotspot']);
        $message->setYhotspot($values['yhotspot']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgSetCursor',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'browser_handle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'cursor',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'wide',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'tall',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'xhotspot',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'yhotspot',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->browser_handle !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->browser_handle);
        }

        if ($this->cursor !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->cursor);
        }

        if ($this->data !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->data);
        }

        if ($this->wide !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->wide);
        }

        if ($this->tall !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->tall);
        }

        if ($this->xhotspot !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->xhotspot);
        }

        if ($this->yhotspot !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->yhotspot);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->browser_handle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cursor = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->data = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->wide = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->tall = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->xhotspot = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->yhotspot = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->browser_handle !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->browser_handle);
        }

        if ($this->cursor !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cursor);
        }

        if ($this->data !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->data);
        }

        if ($this->wide !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->wide);
        }

        if ($this->tall !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->tall);
        }

        if ($this->xhotspot !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->xhotspot);
        }

        if ($this->yhotspot !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->yhotspot);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->browser_handle = null;
        $this->cursor = null;
        $this->data = null;
        $this->wide = null;
        $this->tall = null;
        $this->xhotspot = null;
        $this->yhotspot = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\DOD\HTMLMessages\CMsgSetCursor) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->browser_handle = ($message->browser_handle !== null) ? $message->browser_handle : $this->browser_handle;
        $this->cursor = ($message->cursor !== null) ? $message->cursor : $this->cursor;
        $this->data = ($message->data !== null) ? $message->data : $this->data;
        $this->wide = ($message->wide !== null) ? $message->wide : $this->wide;
        $this->tall = ($message->tall !== null) ? $message->tall : $this->tall;
        $this->xhotspot = ($message->xhotspot !== null) ? $message->xhotspot : $this->xhotspot;
        $this->yhotspot = ($message->yhotspot !== null) ? $message->yhotspot : $this->yhotspot;
    }


}

