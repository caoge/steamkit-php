<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : dod/htmlmessages.proto
 */


namespace SteamKit\Base\GC\DOD\HTMLMessages;

/**
 * Protobuf message :
 * SteamKit.Base.GC.DOD.HTMLMessages.CMsgVerticalScrollBarSizeResponse
 */
class CMsgVerticalScrollBarSizeResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * browser_handle optional uint32 = 1
     *
     * @var int
     */
    protected $browser_handle = null;

    /**
     * x optional uint32 = 2
     *
     * @var int
     */
    protected $x = null;

    /**
     * y optional uint32 = 3
     *
     * @var int
     */
    protected $y = null;

    /**
     * wide optional uint32 = 4
     *
     * @var int
     */
    protected $wide = null;

    /**
     * tall optional uint32 = 5
     *
     * @var int
     */
    protected $tall = null;

    /**
     * scroll_max optional uint32 = 6
     *
     * @var int
     */
    protected $scroll_max = null;

    /**
     * scroll optional uint32 = 7
     *
     * @var int
     */
    protected $scroll = null;

    /**
     * zoom optional float = 8
     *
     * @var float
     */
    protected $zoom = null;

    /**
     * visible optional bool = 9
     *
     * @var bool
     */
    protected $visible = null;

    /**
     * Check if 'browser_handle' has a value
     *
     * @return bool
     */
    public function hasBrowserHandle()
    {
        return $this->browser_handle !== null;
    }

    /**
     * Get 'browser_handle' value
     *
     * @return int
     */
    public function getBrowserHandle()
    {
        return $this->browser_handle;
    }

    /**
     * Set 'browser_handle' value
     *
     * @param int $value
     */
    public function setBrowserHandle($value = null)
    {
        $this->browser_handle = $value;
    }

    /**
     * Check if 'x' has a value
     *
     * @return bool
     */
    public function hasX()
    {
        return $this->x !== null;
    }

    /**
     * Get 'x' value
     *
     * @return int
     */
    public function getX()
    {
        return $this->x;
    }

    /**
     * Set 'x' value
     *
     * @param int $value
     */
    public function setX($value = null)
    {
        $this->x = $value;
    }

    /**
     * Check if 'y' has a value
     *
     * @return bool
     */
    public function hasY()
    {
        return $this->y !== null;
    }

    /**
     * Get 'y' value
     *
     * @return int
     */
    public function getY()
    {
        return $this->y;
    }

    /**
     * Set 'y' value
     *
     * @param int $value
     */
    public function setY($value = null)
    {
        $this->y = $value;
    }

    /**
     * Check if 'wide' has a value
     *
     * @return bool
     */
    public function hasWide()
    {
        return $this->wide !== null;
    }

    /**
     * Get 'wide' value
     *
     * @return int
     */
    public function getWide()
    {
        return $this->wide;
    }

    /**
     * Set 'wide' value
     *
     * @param int $value
     */
    public function setWide($value = null)
    {
        $this->wide = $value;
    }

    /**
     * Check if 'tall' has a value
     *
     * @return bool
     */
    public function hasTall()
    {
        return $this->tall !== null;
    }

    /**
     * Get 'tall' value
     *
     * @return int
     */
    public function getTall()
    {
        return $this->tall;
    }

    /**
     * Set 'tall' value
     *
     * @param int $value
     */
    public function setTall($value = null)
    {
        $this->tall = $value;
    }

    /**
     * Check if 'scroll_max' has a value
     *
     * @return bool
     */
    public function hasScrollMax()
    {
        return $this->scroll_max !== null;
    }

    /**
     * Get 'scroll_max' value
     *
     * @return int
     */
    public function getScrollMax()
    {
        return $this->scroll_max;
    }

    /**
     * Set 'scroll_max' value
     *
     * @param int $value
     */
    public function setScrollMax($value = null)
    {
        $this->scroll_max = $value;
    }

    /**
     * Check if 'scroll' has a value
     *
     * @return bool
     */
    public function hasScroll()
    {
        return $this->scroll !== null;
    }

    /**
     * Get 'scroll' value
     *
     * @return int
     */
    public function getScroll()
    {
        return $this->scroll;
    }

    /**
     * Set 'scroll' value
     *
     * @param int $value
     */
    public function setScroll($value = null)
    {
        $this->scroll = $value;
    }

    /**
     * Check if 'zoom' has a value
     *
     * @return bool
     */
    public function hasZoom()
    {
        return $this->zoom !== null;
    }

    /**
     * Get 'zoom' value
     *
     * @return float
     */
    public function getZoom()
    {
        return $this->zoom;
    }

    /**
     * Set 'zoom' value
     *
     * @param float $value
     */
    public function setZoom($value = null)
    {
        $this->zoom = $value;
    }

    /**
     * Check if 'visible' has a value
     *
     * @return bool
     */
    public function hasVisible()
    {
        return $this->visible !== null;
    }

    /**
     * Get 'visible' value
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->visible;
    }

    /**
     * Set 'visible' value
     *
     * @param bool $value
     */
    public function setVisible($value = null)
    {
        $this->visible = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'browser_handle' => null,
            'x' => null,
            'y' => null,
            'wide' => null,
            'tall' => null,
            'scroll_max' => null,
            'scroll' => null,
            'zoom' => null,
            'visible' => null
        ], $values);

        $message->setBrowserHandle($values['browser_handle']);
        $message->setX($values['x']);
        $message->setY($values['y']);
        $message->setWide($values['wide']);
        $message->setTall($values['tall']);
        $message->setScrollMax($values['scroll_max']);
        $message->setScroll($values['scroll']);
        $message->setZoom($values['zoom']);
        $message->setVisible($values['visible']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgVerticalScrollBarSizeResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'browser_handle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'x',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'y',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'wide',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'tall',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'scroll_max',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'scroll',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'zoom',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'visible',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->browser_handle !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->browser_handle);
        }

        if ($this->x !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->x);
        }

        if ($this->y !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->y);
        }

        if ($this->wide !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->wide);
        }

        if ($this->tall !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->tall);
        }

        if ($this->scroll_max !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->scroll_max);
        }

        if ($this->scroll !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->scroll);
        }

        if ($this->zoom !== null) {
            $writer->writeVarint($stream, 69);
            $writer->writeFloat($stream, $this->zoom);
        }

        if ($this->visible !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->visible);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->browser_handle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->x = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->y = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->wide = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->tall = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->scroll_max = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->scroll = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->zoom = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->visible = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->browser_handle !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->browser_handle);
        }

        if ($this->x !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->x);
        }

        if ($this->y !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->y);
        }

        if ($this->wide !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->wide);
        }

        if ($this->tall !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->tall);
        }

        if ($this->scroll_max !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->scroll_max);
        }

        if ($this->scroll !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->scroll);
        }

        if ($this->zoom !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->visible !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->browser_handle = null;
        $this->x = null;
        $this->y = null;
        $this->wide = null;
        $this->tall = null;
        $this->scroll_max = null;
        $this->scroll = null;
        $this->zoom = null;
        $this->visible = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\GC\DOD\HTMLMessages\CMsgVerticalScrollBarSizeResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->browser_handle = ($message->browser_handle !== null) ? $message->browser_handle : $this->browser_handle;
        $this->x = ($message->x !== null) ? $message->x : $this->x;
        $this->y = ($message->y !== null) ? $message->y : $this->y;
        $this->wide = ($message->wide !== null) ? $message->wide : $this->wide;
        $this->tall = ($message->tall !== null) ? $message->tall : $this->tall;
        $this->scroll_max = ($message->scroll_max !== null) ? $message->scroll_max : $this->scroll_max;
        $this->scroll = ($message->scroll !== null) ? $message->scroll : $this->scroll;
        $this->zoom = ($message->zoom !== null) ? $message->zoom : $this->zoom;
        $this->visible = ($message->visible !== null) ? $message->visible : $this->visible;
    }


}

