<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_gamenotifications.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgGameNotifications;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgGameNotifications.CGameNotifications_Session
 */
class CGameNotifications_Session extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * sessionid optional uint64 = 1
     *
     * @var int
     */
    protected $sessionid = null;

    /**
     * appid optional uint64 = 2
     *
     * @var int
     */
    protected $appid = null;

    /**
     * context optional uint64 = 3
     *
     * @var int
     */
    protected $context = null;

    /**
     * title optional message = 4
     *
     * @var \SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_LocalizedText
     */
    protected $title = null;

    /**
     * time_created optional uint32 = 5
     *
     * @var int
     */
    protected $time_created = null;

    /**
     * time_updated optional uint32 = 6
     *
     * @var int
     */
    protected $time_updated = null;

    /**
     * user_status repeated message = 7
     *
     * @var \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_UserStatus>
     */
    protected $user_status = null;

    /**
     * Check if 'sessionid' has a value
     *
     * @return bool
     */
    public function hasSessionid()
    {
        return $this->sessionid !== null;
    }

    /**
     * Get 'sessionid' value
     *
     * @return int
     */
    public function getSessionid()
    {
        return $this->sessionid;
    }

    /**
     * Set 'sessionid' value
     *
     * @param int $value
     */
    public function setSessionid($value = null)
    {
        $this->sessionid = $value;
    }

    /**
     * Check if 'appid' has a value
     *
     * @return bool
     */
    public function hasAppid()
    {
        return $this->appid !== null;
    }

    /**
     * Get 'appid' value
     *
     * @return int
     */
    public function getAppid()
    {
        return $this->appid;
    }

    /**
     * Set 'appid' value
     *
     * @param int $value
     */
    public function setAppid($value = null)
    {
        $this->appid = $value;
    }

    /**
     * Check if 'context' has a value
     *
     * @return bool
     */
    public function hasContext()
    {
        return $this->context !== null;
    }

    /**
     * Get 'context' value
     *
     * @return int
     */
    public function getContext()
    {
        return $this->context;
    }

    /**
     * Set 'context' value
     *
     * @param int $value
     */
    public function setContext($value = null)
    {
        $this->context = $value;
    }

    /**
     * Check if 'title' has a value
     *
     * @return bool
     */
    public function hasTitle()
    {
        return $this->title !== null;
    }

    /**
     * Get 'title' value
     *
     * @return \SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_LocalizedText
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set 'title' value
     *
     * @param \SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_LocalizedText $value
     */
    public function setTitle(\SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_LocalizedText $value = null)
    {
        $this->title = $value;
    }

    /**
     * Check if 'time_created' has a value
     *
     * @return bool
     */
    public function hasTimeCreated()
    {
        return $this->time_created !== null;
    }

    /**
     * Get 'time_created' value
     *
     * @return int
     */
    public function getTimeCreated()
    {
        return $this->time_created;
    }

    /**
     * Set 'time_created' value
     *
     * @param int $value
     */
    public function setTimeCreated($value = null)
    {
        $this->time_created = $value;
    }

    /**
     * Check if 'time_updated' has a value
     *
     * @return bool
     */
    public function hasTimeUpdated()
    {
        return $this->time_updated !== null;
    }

    /**
     * Get 'time_updated' value
     *
     * @return int
     */
    public function getTimeUpdated()
    {
        return $this->time_updated;
    }

    /**
     * Set 'time_updated' value
     *
     * @param int $value
     */
    public function setTimeUpdated($value = null)
    {
        $this->time_updated = $value;
    }

    /**
     * Check if 'user_status' has a value
     *
     * @return bool
     */
    public function hasUserStatusList()
    {
        return $this->user_status !== null;
    }

    /**
     * Get 'user_status' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_UserStatus>
     */
    public function getUserStatusList()
    {
        return $this->user_status;
    }

    /**
     * Set 'user_status' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_UserStatus> $value
     */
    public function setUserStatusList(\Protobuf\Collection $value = null)
    {
        $this->user_status = $value;
    }

    /**
     * Add a new element to 'user_status'
     *
     * @param
     * \SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_UserStatus
     * $value
     */
    public function addUserStatus(\SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_UserStatus $value)
    {
        if ($this->user_status === null) {
            $this->user_status = new \Protobuf\MessageCollection();
        }

        $this->user_status->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'sessionid' => null,
            'appid' => null,
            'context' => null,
            'title' => null,
            'time_created' => null,
            'time_updated' => null,
            'user_status' => []
        ], $values);

        $message->setSessionid($values['sessionid']);
        $message->setAppid($values['appid']);
        $message->setContext($values['context']);
        $message->setTitle($values['title']);
        $message->setTimeCreated($values['time_created']);
        $message->setTimeUpdated($values['time_updated']);

        foreach ($values['user_status'] as $item) {
            $message->addUserStatus($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CGameNotifications_Session',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'sessionid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'context',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'title',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgGameNotifications.CGameNotifications_LocalizedText'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'time_created',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'time_updated',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'user_status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgGameNotifications.CGameNotifications_UserStatus'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->sessionid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->sessionid);
        }

        if ($this->appid !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->appid);
        }

        if ($this->context !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->context);
        }

        if ($this->title !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->title->serializedSize($sizeContext));
            $this->title->writeTo($context);
        }

        if ($this->time_created !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->time_created);
        }

        if ($this->time_updated !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->time_updated);
        }

        if ($this->user_status !== null) {
            foreach ($this->user_status as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->sessionid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->context = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_LocalizedText();

                $this->title = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->time_created = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->time_updated = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_UserStatus();

                if ($this->user_status === null) {
                    $this->user_status = new \Protobuf\MessageCollection();
                }

                $this->user_status->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->sessionid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sessionid);
        }

        if ($this->appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->appid);
        }

        if ($this->context !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->context);
        }

        if ($this->title !== null) {
            $innerSize = $this->title->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->time_created !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->time_created);
        }

        if ($this->time_updated !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->time_updated);
        }

        if ($this->user_status !== null) {
            foreach ($this->user_status as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->sessionid = null;
        $this->appid = null;
        $this->context = null;
        $this->title = null;
        $this->time_created = null;
        $this->time_updated = null;
        $this->user_status = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgGameNotifications\CGameNotifications_Session) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->sessionid = ($message->sessionid !== null) ? $message->sessionid : $this->sessionid;
        $this->appid = ($message->appid !== null) ? $message->appid : $this->appid;
        $this->context = ($message->context !== null) ? $message->context : $this->context;
        $this->title = ($message->title !== null) ? $message->title : $this->title;
        $this->time_created = ($message->time_created !== null) ? $message->time_created : $this->time_created;
        $this->time_updated = ($message->time_updated !== null) ? $message->time_updated : $this->time_updated;
        $this->user_status = ($message->user_status !== null) ? $message->user_status : $this->user_status;
    }


}

