<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_secrets.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgSecrets;

/**
 * Protobuf message : SteamKit.Base.Unified.SteamMsgSecrets.CKeyEscrow_Ticket
 */
class CKeyEscrow_Ticket extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * password optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $password = null;

    /**
     * identifier optional uint64 = 2
     *
     * @var int
     */
    protected $identifier = null;

    /**
     * payload optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $payload = null;

    /**
     * timestamp optional uint32 = 4
     *
     * @var int
     */
    protected $timestamp = null;

    /**
     * usage optional enum = 5
     *
     * @var \SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage
     */
    protected $usage = null;

    /**
     * device_name optional string = 6
     *
     * @var string
     */
    protected $device_name = null;

    /**
     * device_model optional string = 7
     *
     * @var string
     */
    protected $device_model = null;

    /**
     * device_serial optional string = 8
     *
     * @var string
     */
    protected $device_serial = null;

    /**
     * device_provisioning_id optional uint32 = 9
     *
     * @var int
     */
    protected $device_provisioning_id = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->usage = \SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice();

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'password' has a value
     *
     * @return bool
     */
    public function hasPassword()
    {
        return $this->password !== null;
    }

    /**
     * Get 'password' value
     *
     * @return \Protobuf\Stream
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set 'password' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPassword($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->password = $value;
    }

    /**
     * Check if 'identifier' has a value
     *
     * @return bool
     */
    public function hasIdentifier()
    {
        return $this->identifier !== null;
    }

    /**
     * Get 'identifier' value
     *
     * @return int
     */
    public function getIdentifier()
    {
        return $this->identifier;
    }

    /**
     * Set 'identifier' value
     *
     * @param int $value
     */
    public function setIdentifier($value = null)
    {
        $this->identifier = $value;
    }

    /**
     * Check if 'payload' has a value
     *
     * @return bool
     */
    public function hasPayload()
    {
        return $this->payload !== null;
    }

    /**
     * Get 'payload' value
     *
     * @return \Protobuf\Stream
     */
    public function getPayload()
    {
        return $this->payload;
    }

    /**
     * Set 'payload' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPayload($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->payload = $value;
    }

    /**
     * Check if 'timestamp' has a value
     *
     * @return bool
     */
    public function hasTimestamp()
    {
        return $this->timestamp !== null;
    }

    /**
     * Get 'timestamp' value
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * Set 'timestamp' value
     *
     * @param int $value
     */
    public function setTimestamp($value = null)
    {
        $this->timestamp = $value;
    }

    /**
     * Check if 'usage' has a value
     *
     * @return bool
     */
    public function hasUsage()
    {
        return $this->usage !== null;
    }

    /**
     * Get 'usage' value
     *
     * @return \SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage
     */
    public function getUsage()
    {
        return $this->usage;
    }

    /**
     * Set 'usage' value
     *
     * @param \SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage $value
     */
    public function setUsage(\SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage $value = null)
    {
        $this->usage = $value;
    }

    /**
     * Check if 'device_name' has a value
     *
     * @return bool
     */
    public function hasDeviceName()
    {
        return $this->device_name !== null;
    }

    /**
     * Get 'device_name' value
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->device_name;
    }

    /**
     * Set 'device_name' value
     *
     * @param string $value
     */
    public function setDeviceName($value = null)
    {
        $this->device_name = $value;
    }

    /**
     * Check if 'device_model' has a value
     *
     * @return bool
     */
    public function hasDeviceModel()
    {
        return $this->device_model !== null;
    }

    /**
     * Get 'device_model' value
     *
     * @return string
     */
    public function getDeviceModel()
    {
        return $this->device_model;
    }

    /**
     * Set 'device_model' value
     *
     * @param string $value
     */
    public function setDeviceModel($value = null)
    {
        $this->device_model = $value;
    }

    /**
     * Check if 'device_serial' has a value
     *
     * @return bool
     */
    public function hasDeviceSerial()
    {
        return $this->device_serial !== null;
    }

    /**
     * Get 'device_serial' value
     *
     * @return string
     */
    public function getDeviceSerial()
    {
        return $this->device_serial;
    }

    /**
     * Set 'device_serial' value
     *
     * @param string $value
     */
    public function setDeviceSerial($value = null)
    {
        $this->device_serial = $value;
    }

    /**
     * Check if 'device_provisioning_id' has a value
     *
     * @return bool
     */
    public function hasDeviceProvisioningId()
    {
        return $this->device_provisioning_id !== null;
    }

    /**
     * Get 'device_provisioning_id' value
     *
     * @return int
     */
    public function getDeviceProvisioningId()
    {
        return $this->device_provisioning_id;
    }

    /**
     * Set 'device_provisioning_id' value
     *
     * @param int $value
     */
    public function setDeviceProvisioningId($value = null)
    {
        $this->device_provisioning_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'password' => null,
            'identifier' => null,
            'payload' => null,
            'timestamp' => null,
            'usage' => \SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice(),
            'device_name' => null,
            'device_model' => null,
            'device_serial' => null,
            'device_provisioning_id' => null
        ], $values);

        $message->setPassword($values['password']);
        $message->setIdentifier($values['identifier']);
        $message->setPayload($values['payload']);
        $message->setTimestamp($values['timestamp']);
        $message->setUsage($values['usage']);
        $message->setDeviceName($values['device_name']);
        $message->setDeviceModel($values['device_model']);
        $message->setDeviceSerial($values['device_serial']);
        $message->setDeviceProvisioningId($values['device_provisioning_id']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CKeyEscrow_Ticket',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'identifier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'payload',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'timestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'usage',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgSecrets.EKeyEscrowUsage',
                    'default_value' => \SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'device_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'device_model',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'device_serial',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'device_provisioning_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->password !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->password);
        }

        if ($this->identifier !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->identifier);
        }

        if ($this->payload !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->payload);
        }

        if ($this->timestamp !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->timestamp);
        }

        if ($this->usage !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->usage->value());
        }

        if ($this->device_name !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->device_name);
        }

        if ($this->device_model !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->device_model);
        }

        if ($this->device_serial !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->device_serial);
        }

        if ($this->device_provisioning_id !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->device_provisioning_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->password = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->identifier = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->payload = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->timestamp = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->usage = \SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_model = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_serial = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->device_provisioning_id = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->password !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->password);
        }

        if ($this->identifier !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->identifier);
        }

        if ($this->payload !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->payload);
        }

        if ($this->timestamp !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->timestamp);
        }

        if ($this->usage !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->usage->value());
        }

        if ($this->device_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_name);
        }

        if ($this->device_model !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_model);
        }

        if ($this->device_serial !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_serial);
        }

        if ($this->device_provisioning_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->device_provisioning_id);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->password = null;
        $this->identifier = null;
        $this->payload = null;
        $this->timestamp = null;
        $this->usage = \SteamKit\Base\Unified\SteamMsgSecrets\EKeyEscrowUsage::k_EKeyEscrowUsageStreamingDevice();
        $this->device_name = null;
        $this->device_model = null;
        $this->device_serial = null;
        $this->device_provisioning_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgSecrets\CKeyEscrow_Ticket) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->password = ($message->password !== null) ? $message->password : $this->password;
        $this->identifier = ($message->identifier !== null) ? $message->identifier : $this->identifier;
        $this->payload = ($message->payload !== null) ? $message->payload : $this->payload;
        $this->timestamp = ($message->timestamp !== null) ? $message->timestamp : $this->timestamp;
        $this->usage = ($message->usage !== null) ? $message->usage : $this->usage;
        $this->device_name = ($message->device_name !== null) ? $message->device_name : $this->device_name;
        $this->device_model = ($message->device_model !== null) ? $message->device_model : $this->device_model;
        $this->device_serial = ($message->device_serial !== null) ? $message->device_serial : $this->device_serial;
        $this->device_provisioning_id = ($message->device_provisioning_id !== null) ? $message->device_provisioning_id : $this->device_provisioning_id;
    }


}

