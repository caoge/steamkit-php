<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_publishedfile.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgPublishedFile;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgPublishedFile.CPublishedFile_GetChangeHistory_Request
 */
class CPublishedFile_GetChangeHistory_Request extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * publishedfileid optional fixed64 = 1
     *
     * @var int
     */
    protected $publishedfileid = null;

    /**
     * total_only optional bool = 2
     *
     * @var bool
     */
    protected $total_only = null;

    /**
     * startindex optional uint32 = 3
     *
     * @var int
     */
    protected $startindex = null;

    /**
     * count optional uint32 = 4
     *
     * @var int
     */
    protected $count = null;

    /**
     * language optional int32 = 5
     *
     * @var int
     */
    protected $language = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->language = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'publishedfileid' has a value
     *
     * @return bool
     */
    public function hasPublishedfileid()
    {
        return $this->publishedfileid !== null;
    }

    /**
     * Get 'publishedfileid' value
     *
     * @return int
     */
    public function getPublishedfileid()
    {
        return $this->publishedfileid;
    }

    /**
     * Set 'publishedfileid' value
     *
     * @param int $value
     */
    public function setPublishedfileid($value = null)
    {
        $this->publishedfileid = $value;
    }

    /**
     * Check if 'total_only' has a value
     *
     * @return bool
     */
    public function hasTotalOnly()
    {
        return $this->total_only !== null;
    }

    /**
     * Get 'total_only' value
     *
     * @return bool
     */
    public function getTotalOnly()
    {
        return $this->total_only;
    }

    /**
     * Set 'total_only' value
     *
     * @param bool $value
     */
    public function setTotalOnly($value = null)
    {
        $this->total_only = $value;
    }

    /**
     * Check if 'startindex' has a value
     *
     * @return bool
     */
    public function hasStartindex()
    {
        return $this->startindex !== null;
    }

    /**
     * Get 'startindex' value
     *
     * @return int
     */
    public function getStartindex()
    {
        return $this->startindex;
    }

    /**
     * Set 'startindex' value
     *
     * @param int $value
     */
    public function setStartindex($value = null)
    {
        $this->startindex = $value;
    }

    /**
     * Check if 'count' has a value
     *
     * @return bool
     */
    public function hasCount()
    {
        return $this->count !== null;
    }

    /**
     * Get 'count' value
     *
     * @return int
     */
    public function getCount()
    {
        return $this->count;
    }

    /**
     * Set 'count' value
     *
     * @param int $value
     */
    public function setCount($value = null)
    {
        $this->count = $value;
    }

    /**
     * Check if 'language' has a value
     *
     * @return bool
     */
    public function hasLanguage()
    {
        return $this->language !== null;
    }

    /**
     * Get 'language' value
     *
     * @return int
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set 'language' value
     *
     * @param int $value
     */
    public function setLanguage($value = null)
    {
        $this->language = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'publishedfileid' => null,
            'total_only' => null,
            'startindex' => null,
            'count' => null,
            'language' => '0'
        ], $values);

        $message->setPublishedfileid($values['publishedfileid']);
        $message->setTotalOnly($values['total_only']);
        $message->setStartindex($values['startindex']);
        $message->setCount($values['count']);
        $message->setLanguage($values['language']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CPublishedFile_GetChangeHistory_Request',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'publishedfileid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'total_only',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'startindex',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'count',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'language',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->publishedfileid !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->publishedfileid);
        }

        if ($this->total_only !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->total_only);
        }

        if ($this->startindex !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->startindex);
        }

        if ($this->count !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->count);
        }

        if ($this->language !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->language);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->publishedfileid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->total_only = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->startindex = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->count = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->language = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->publishedfileid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->total_only !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->startindex !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->startindex);
        }

        if ($this->count !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->count);
        }

        if ($this->language !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->language);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->publishedfileid = null;
        $this->total_only = null;
        $this->startindex = null;
        $this->count = null;
        $this->language = '0';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetChangeHistory_Request) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->publishedfileid = ($message->publishedfileid !== null) ? $message->publishedfileid : $this->publishedfileid;
        $this->total_only = ($message->total_only !== null) ? $message->total_only : $this->total_only;
        $this->startindex = ($message->startindex !== null) ? $message->startindex : $this->startindex;
        $this->count = ($message->count !== null) ? $message->count : $this->count;
        $this->language = ($message->language !== null) ? $message->language : $this->language;
    }


}

