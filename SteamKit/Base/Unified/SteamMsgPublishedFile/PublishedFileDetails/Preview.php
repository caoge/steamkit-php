<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_publishedfile.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgPublishedFile\PublishedFileDetails;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgPublishedFile.PublishedFileDetails.Preview
 */
class Preview extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * previewid optional uint64 = 1
     *
     * @var int
     */
    protected $previewid = null;

    /**
     * sortorder optional uint32 = 2
     *
     * @var int
     */
    protected $sortorder = null;

    /**
     * url optional string = 3
     *
     * @var string
     */
    protected $url = null;

    /**
     * size optional uint32 = 4
     *
     * @var int
     */
    protected $size = null;

    /**
     * filename optional string = 5
     *
     * @var string
     */
    protected $filename = null;

    /**
     * youtubevideoid optional string = 6
     *
     * @var string
     */
    protected $youtubevideoid = null;

    /**
     * preview_type optional uint32 = 7
     *
     * @var int
     */
    protected $preview_type = null;

    /**
     * external_reference optional string = 8
     *
     * @var string
     */
    protected $external_reference = null;

    /**
     * Check if 'previewid' has a value
     *
     * @return bool
     */
    public function hasPreviewid()
    {
        return $this->previewid !== null;
    }

    /**
     * Get 'previewid' value
     *
     * @return int
     */
    public function getPreviewid()
    {
        return $this->previewid;
    }

    /**
     * Set 'previewid' value
     *
     * @param int $value
     */
    public function setPreviewid($value = null)
    {
        $this->previewid = $value;
    }

    /**
     * Check if 'sortorder' has a value
     *
     * @return bool
     */
    public function hasSortorder()
    {
        return $this->sortorder !== null;
    }

    /**
     * Get 'sortorder' value
     *
     * @return int
     */
    public function getSortorder()
    {
        return $this->sortorder;
    }

    /**
     * Set 'sortorder' value
     *
     * @param int $value
     */
    public function setSortorder($value = null)
    {
        $this->sortorder = $value;
    }

    /**
     * Check if 'url' has a value
     *
     * @return bool
     */
    public function hasUrl()
    {
        return $this->url !== null;
    }

    /**
     * Get 'url' value
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set 'url' value
     *
     * @param string $value
     */
    public function setUrl($value = null)
    {
        $this->url = $value;
    }

    /**
     * Check if 'size' has a value
     *
     * @return bool
     */
    public function hasSize()
    {
        return $this->size !== null;
    }

    /**
     * Get 'size' value
     *
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * Set 'size' value
     *
     * @param int $value
     */
    public function setSize($value = null)
    {
        $this->size = $value;
    }

    /**
     * Check if 'filename' has a value
     *
     * @return bool
     */
    public function hasFilename()
    {
        return $this->filename !== null;
    }

    /**
     * Get 'filename' value
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * Set 'filename' value
     *
     * @param string $value
     */
    public function setFilename($value = null)
    {
        $this->filename = $value;
    }

    /**
     * Check if 'youtubevideoid' has a value
     *
     * @return bool
     */
    public function hasYoutubevideoid()
    {
        return $this->youtubevideoid !== null;
    }

    /**
     * Get 'youtubevideoid' value
     *
     * @return string
     */
    public function getYoutubevideoid()
    {
        return $this->youtubevideoid;
    }

    /**
     * Set 'youtubevideoid' value
     *
     * @param string $value
     */
    public function setYoutubevideoid($value = null)
    {
        $this->youtubevideoid = $value;
    }

    /**
     * Check if 'preview_type' has a value
     *
     * @return bool
     */
    public function hasPreviewType()
    {
        return $this->preview_type !== null;
    }

    /**
     * Get 'preview_type' value
     *
     * @return int
     */
    public function getPreviewType()
    {
        return $this->preview_type;
    }

    /**
     * Set 'preview_type' value
     *
     * @param int $value
     */
    public function setPreviewType($value = null)
    {
        $this->preview_type = $value;
    }

    /**
     * Check if 'external_reference' has a value
     *
     * @return bool
     */
    public function hasExternalReference()
    {
        return $this->external_reference !== null;
    }

    /**
     * Get 'external_reference' value
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->external_reference;
    }

    /**
     * Set 'external_reference' value
     *
     * @param string $value
     */
    public function setExternalReference($value = null)
    {
        $this->external_reference = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'previewid' => null,
            'sortorder' => null,
            'url' => null,
            'size' => null,
            'filename' => null,
            'youtubevideoid' => null,
            'preview_type' => null,
            'external_reference' => null
        ], $values);

        $message->setPreviewid($values['previewid']);
        $message->setSortorder($values['sortorder']);
        $message->setUrl($values['url']);
        $message->setSize($values['size']);
        $message->setFilename($values['filename']);
        $message->setYoutubevideoid($values['youtubevideoid']);
        $message->setPreviewType($values['preview_type']);
        $message->setExternalReference($values['external_reference']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Preview',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'previewid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'sortorder',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'size',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'filename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'youtubevideoid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'preview_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'external_reference',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->previewid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->previewid);
        }

        if ($this->sortorder !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->sortorder);
        }

        if ($this->url !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->url);
        }

        if ($this->size !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->size);
        }

        if ($this->filename !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->filename);
        }

        if ($this->youtubevideoid !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->youtubevideoid);
        }

        if ($this->preview_type !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->preview_type);
        }

        if ($this->external_reference !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->external_reference);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->previewid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->sortorder = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->url = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->filename = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->youtubevideoid = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->preview_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->external_reference = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->previewid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->previewid);
        }

        if ($this->sortorder !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sortorder);
        }

        if ($this->url !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->url);
        }

        if ($this->size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->size);
        }

        if ($this->filename !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->filename);
        }

        if ($this->youtubevideoid !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->youtubevideoid);
        }

        if ($this->preview_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->preview_type);
        }

        if ($this->external_reference !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->external_reference);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->previewid = null;
        $this->sortorder = null;
        $this->url = null;
        $this->size = null;
        $this->filename = null;
        $this->youtubevideoid = null;
        $this->preview_type = null;
        $this->external_reference = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgPublishedFile\PublishedFileDetails\Preview) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->previewid = ($message->previewid !== null) ? $message->previewid : $this->previewid;
        $this->sortorder = ($message->sortorder !== null) ? $message->sortorder : $this->sortorder;
        $this->url = ($message->url !== null) ? $message->url : $this->url;
        $this->size = ($message->size !== null) ? $message->size : $this->size;
        $this->filename = ($message->filename !== null) ? $message->filename : $this->filename;
        $this->youtubevideoid = ($message->youtubevideoid !== null) ? $message->youtubevideoid : $this->youtubevideoid;
        $this->preview_type = ($message->preview_type !== null) ? $message->preview_type : $this->preview_type;
        $this->external_reference = ($message->external_reference !== null) ? $message->external_reference : $this->external_reference;
    }


}

