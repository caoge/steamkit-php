<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_publishedfile.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgPublishedFile;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgPublishedFile.CPublishedFile_Update_Request
 */
class CPublishedFile_Update_Request extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * appid optional uint32 = 1
     *
     * @var int
     */
    protected $appid = null;

    /**
     * publishedfileid optional fixed64 = 2
     *
     * @var int
     */
    protected $publishedfileid = null;

    /**
     * title optional string = 3
     *
     * @var string
     */
    protected $title = null;

    /**
     * file_description optional string = 4
     *
     * @var string
     */
    protected $file_description = null;

    /**
     * visibility optional uint32 = 5
     *
     * @var int
     */
    protected $visibility = null;

    /**
     * tags repeated string = 6
     *
     * @var \Protobuf\Collection
     */
    protected $tags = null;

    /**
     * filename optional string = 7
     *
     * @var string
     */
    protected $filename = null;

    /**
     * preview_filename optional string = 8
     *
     * @var string
     */
    protected $preview_filename = null;

    /**
     * image_width optional uint32 = 15
     *
     * @var int
     */
    protected $image_width = null;

    /**
     * image_height optional uint32 = 16
     *
     * @var int
     */
    protected $image_height = null;

    /**
     * Check if 'appid' has a value
     *
     * @return bool
     */
    public function hasAppid()
    {
        return $this->appid !== null;
    }

    /**
     * Get 'appid' value
     *
     * @return int
     */
    public function getAppid()
    {
        return $this->appid;
    }

    /**
     * Set 'appid' value
     *
     * @param int $value
     */
    public function setAppid($value = null)
    {
        $this->appid = $value;
    }

    /**
     * Check if 'publishedfileid' has a value
     *
     * @return bool
     */
    public function hasPublishedfileid()
    {
        return $this->publishedfileid !== null;
    }

    /**
     * Get 'publishedfileid' value
     *
     * @return int
     */
    public function getPublishedfileid()
    {
        return $this->publishedfileid;
    }

    /**
     * Set 'publishedfileid' value
     *
     * @param int $value
     */
    public function setPublishedfileid($value = null)
    {
        $this->publishedfileid = $value;
    }

    /**
     * Check if 'title' has a value
     *
     * @return bool
     */
    public function hasTitle()
    {
        return $this->title !== null;
    }

    /**
     * Get 'title' value
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set 'title' value
     *
     * @param string $value
     */
    public function setTitle($value = null)
    {
        $this->title = $value;
    }

    /**
     * Check if 'file_description' has a value
     *
     * @return bool
     */
    public function hasFileDescription()
    {
        return $this->file_description !== null;
    }

    /**
     * Get 'file_description' value
     *
     * @return string
     */
    public function getFileDescription()
    {
        return $this->file_description;
    }

    /**
     * Set 'file_description' value
     *
     * @param string $value
     */
    public function setFileDescription($value = null)
    {
        $this->file_description = $value;
    }

    /**
     * Check if 'visibility' has a value
     *
     * @return bool
     */
    public function hasVisibility()
    {
        return $this->visibility !== null;
    }

    /**
     * Get 'visibility' value
     *
     * @return int
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    /**
     * Set 'visibility' value
     *
     * @param int $value
     */
    public function setVisibility($value = null)
    {
        $this->visibility = $value;
    }

    /**
     * Check if 'tags' has a value
     *
     * @return bool
     */
    public function hasTagsList()
    {
        return $this->tags !== null;
    }

    /**
     * Get 'tags' value
     *
     * @return \Protobuf\Collection
     */
    public function getTagsList()
    {
        return $this->tags;
    }

    /**
     * Set 'tags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTagsList(\Protobuf\Collection $value = null)
    {
        $this->tags = $value;
    }

    /**
     * Add a new element to 'tags'
     *
     * @param string $value
     */
    public function addTags($value)
    {
        if ($this->tags === null) {
            $this->tags = new \Protobuf\ScalarCollection();
        }

        $this->tags->add($value);
    }

    /**
     * Check if 'filename' has a value
     *
     * @return bool
     */
    public function hasFilename()
    {
        return $this->filename !== null;
    }

    /**
     * Get 'filename' value
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * Set 'filename' value
     *
     * @param string $value
     */
    public function setFilename($value = null)
    {
        $this->filename = $value;
    }

    /**
     * Check if 'preview_filename' has a value
     *
     * @return bool
     */
    public function hasPreviewFilename()
    {
        return $this->preview_filename !== null;
    }

    /**
     * Get 'preview_filename' value
     *
     * @return string
     */
    public function getPreviewFilename()
    {
        return $this->preview_filename;
    }

    /**
     * Set 'preview_filename' value
     *
     * @param string $value
     */
    public function setPreviewFilename($value = null)
    {
        $this->preview_filename = $value;
    }

    /**
     * Check if 'image_width' has a value
     *
     * @return bool
     */
    public function hasImageWidth()
    {
        return $this->image_width !== null;
    }

    /**
     * Get 'image_width' value
     *
     * @return int
     */
    public function getImageWidth()
    {
        return $this->image_width;
    }

    /**
     * Set 'image_width' value
     *
     * @param int $value
     */
    public function setImageWidth($value = null)
    {
        $this->image_width = $value;
    }

    /**
     * Check if 'image_height' has a value
     *
     * @return bool
     */
    public function hasImageHeight()
    {
        return $this->image_height !== null;
    }

    /**
     * Get 'image_height' value
     *
     * @return int
     */
    public function getImageHeight()
    {
        return $this->image_height;
    }

    /**
     * Set 'image_height' value
     *
     * @param int $value
     */
    public function setImageHeight($value = null)
    {
        $this->image_height = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'appid' => null,
            'publishedfileid' => null,
            'title' => null,
            'file_description' => null,
            'visibility' => null,
            'tags' => [],
            'filename' => null,
            'preview_filename' => null,
            'image_width' => null,
            'image_height' => null
        ], $values);

        $message->setAppid($values['appid']);
        $message->setPublishedfileid($values['publishedfileid']);
        $message->setTitle($values['title']);
        $message->setFileDescription($values['file_description']);
        $message->setVisibility($values['visibility']);
        $message->setFilename($values['filename']);
        $message->setPreviewFilename($values['preview_filename']);
        $message->setImageWidth($values['image_width']);
        $message->setImageHeight($values['image_height']);

        foreach ($values['tags'] as $item) {
            $message->addTags($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CPublishedFile_Update_Request',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'publishedfileid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'title',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'file_description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'visibility',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'filename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'preview_filename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'image_width',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'image_height',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->appid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->appid);
        }

        if ($this->publishedfileid !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->publishedfileid);
        }

        if ($this->title !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->title);
        }

        if ($this->file_description !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->file_description);
        }

        if ($this->visibility !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->visibility);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->filename !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->filename);
        }

        if ($this->preview_filename !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->preview_filename);
        }

        if ($this->image_width !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->image_width);
        }

        if ($this->image_height !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->image_height);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->publishedfileid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->title = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->file_description = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->visibility = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->tags === null) {
                    $this->tags = new \Protobuf\ScalarCollection();
                }

                $this->tags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->filename = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->preview_filename = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->image_width = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->image_height = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->appid);
        }

        if ($this->publishedfileid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->title !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->title);
        }

        if ($this->file_description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->file_description);
        }

        if ($this->visibility !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->visibility);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->filename !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->filename);
        }

        if ($this->preview_filename !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->preview_filename);
        }

        if ($this->image_width !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->image_width);
        }

        if ($this->image_height !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->image_height);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->appid = null;
        $this->publishedfileid = null;
        $this->title = null;
        $this->file_description = null;
        $this->visibility = null;
        $this->tags = null;
        $this->filename = null;
        $this->preview_filename = null;
        $this->image_width = null;
        $this->image_height = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_Update_Request) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->appid = ($message->appid !== null) ? $message->appid : $this->appid;
        $this->publishedfileid = ($message->publishedfileid !== null) ? $message->publishedfileid : $this->publishedfileid;
        $this->title = ($message->title !== null) ? $message->title : $this->title;
        $this->file_description = ($message->file_description !== null) ? $message->file_description : $this->file_description;
        $this->visibility = ($message->visibility !== null) ? $message->visibility : $this->visibility;
        $this->tags = ($message->tags !== null) ? $message->tags : $this->tags;
        $this->filename = ($message->filename !== null) ? $message->filename : $this->filename;
        $this->preview_filename = ($message->preview_filename !== null) ? $message->preview_filename : $this->preview_filename;
        $this->image_width = ($message->image_width !== null) ? $message->image_width : $this->image_width;
        $this->image_height = ($message->image_height !== null) ? $message->image_height : $this->image_height;
    }


}

