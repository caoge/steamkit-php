<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_publishedfile.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgPublishedFile;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgPublishedFile.CPublishedFile_GetDetails_Request
 */
class CPublishedFile_GetDetails_Request extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * publishedfileids repeated fixed64 = 1
     *
     * @var \Protobuf\Collection
     */
    protected $publishedfileids = null;

    /**
     * includetags optional bool = 2
     *
     * @var bool
     */
    protected $includetags = null;

    /**
     * includeadditionalpreviews optional bool = 3
     *
     * @var bool
     */
    protected $includeadditionalpreviews = null;

    /**
     * includechildren optional bool = 4
     *
     * @var bool
     */
    protected $includechildren = null;

    /**
     * includekvtags optional bool = 5
     *
     * @var bool
     */
    protected $includekvtags = null;

    /**
     * includevotes optional bool = 6
     *
     * @var bool
     */
    protected $includevotes = null;

    /**
     * short_description optional bool = 8
     *
     * @var bool
     */
    protected $short_description = null;

    /**
     * includeforsaledata optional bool = 10
     *
     * @var bool
     */
    protected $includeforsaledata = null;

    /**
     * includemetadata optional bool = 11
     *
     * @var bool
     */
    protected $includemetadata = null;

    /**
     * language optional int32 = 12
     *
     * @var int
     */
    protected $language = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->language = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'publishedfileids' has a value
     *
     * @return bool
     */
    public function hasPublishedfileidsList()
    {
        return $this->publishedfileids !== null;
    }

    /**
     * Get 'publishedfileids' value
     *
     * @return \Protobuf\Collection
     */
    public function getPublishedfileidsList()
    {
        return $this->publishedfileids;
    }

    /**
     * Set 'publishedfileids' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setPublishedfileidsList(\Protobuf\Collection $value = null)
    {
        $this->publishedfileids = $value;
    }

    /**
     * Add a new element to 'publishedfileids'
     *
     * @param int $value
     */
    public function addPublishedfileids($value)
    {
        if ($this->publishedfileids === null) {
            $this->publishedfileids = new \Protobuf\ScalarCollection();
        }

        $this->publishedfileids->add($value);
    }

    /**
     * Check if 'includetags' has a value
     *
     * @return bool
     */
    public function hasIncludetags()
    {
        return $this->includetags !== null;
    }

    /**
     * Get 'includetags' value
     *
     * @return bool
     */
    public function getIncludetags()
    {
        return $this->includetags;
    }

    /**
     * Set 'includetags' value
     *
     * @param bool $value
     */
    public function setIncludetags($value = null)
    {
        $this->includetags = $value;
    }

    /**
     * Check if 'includeadditionalpreviews' has a value
     *
     * @return bool
     */
    public function hasIncludeadditionalpreviews()
    {
        return $this->includeadditionalpreviews !== null;
    }

    /**
     * Get 'includeadditionalpreviews' value
     *
     * @return bool
     */
    public function getIncludeadditionalpreviews()
    {
        return $this->includeadditionalpreviews;
    }

    /**
     * Set 'includeadditionalpreviews' value
     *
     * @param bool $value
     */
    public function setIncludeadditionalpreviews($value = null)
    {
        $this->includeadditionalpreviews = $value;
    }

    /**
     * Check if 'includechildren' has a value
     *
     * @return bool
     */
    public function hasIncludechildren()
    {
        return $this->includechildren !== null;
    }

    /**
     * Get 'includechildren' value
     *
     * @return bool
     */
    public function getIncludechildren()
    {
        return $this->includechildren;
    }

    /**
     * Set 'includechildren' value
     *
     * @param bool $value
     */
    public function setIncludechildren($value = null)
    {
        $this->includechildren = $value;
    }

    /**
     * Check if 'includekvtags' has a value
     *
     * @return bool
     */
    public function hasIncludekvtags()
    {
        return $this->includekvtags !== null;
    }

    /**
     * Get 'includekvtags' value
     *
     * @return bool
     */
    public function getIncludekvtags()
    {
        return $this->includekvtags;
    }

    /**
     * Set 'includekvtags' value
     *
     * @param bool $value
     */
    public function setIncludekvtags($value = null)
    {
        $this->includekvtags = $value;
    }

    /**
     * Check if 'includevotes' has a value
     *
     * @return bool
     */
    public function hasIncludevotes()
    {
        return $this->includevotes !== null;
    }

    /**
     * Get 'includevotes' value
     *
     * @return bool
     */
    public function getIncludevotes()
    {
        return $this->includevotes;
    }

    /**
     * Set 'includevotes' value
     *
     * @param bool $value
     */
    public function setIncludevotes($value = null)
    {
        $this->includevotes = $value;
    }

    /**
     * Check if 'short_description' has a value
     *
     * @return bool
     */
    public function hasShortDescription()
    {
        return $this->short_description !== null;
    }

    /**
     * Get 'short_description' value
     *
     * @return bool
     */
    public function getShortDescription()
    {
        return $this->short_description;
    }

    /**
     * Set 'short_description' value
     *
     * @param bool $value
     */
    public function setShortDescription($value = null)
    {
        $this->short_description = $value;
    }

    /**
     * Check if 'includeforsaledata' has a value
     *
     * @return bool
     */
    public function hasIncludeforsaledata()
    {
        return $this->includeforsaledata !== null;
    }

    /**
     * Get 'includeforsaledata' value
     *
     * @return bool
     */
    public function getIncludeforsaledata()
    {
        return $this->includeforsaledata;
    }

    /**
     * Set 'includeforsaledata' value
     *
     * @param bool $value
     */
    public function setIncludeforsaledata($value = null)
    {
        $this->includeforsaledata = $value;
    }

    /**
     * Check if 'includemetadata' has a value
     *
     * @return bool
     */
    public function hasIncludemetadata()
    {
        return $this->includemetadata !== null;
    }

    /**
     * Get 'includemetadata' value
     *
     * @return bool
     */
    public function getIncludemetadata()
    {
        return $this->includemetadata;
    }

    /**
     * Set 'includemetadata' value
     *
     * @param bool $value
     */
    public function setIncludemetadata($value = null)
    {
        $this->includemetadata = $value;
    }

    /**
     * Check if 'language' has a value
     *
     * @return bool
     */
    public function hasLanguage()
    {
        return $this->language !== null;
    }

    /**
     * Get 'language' value
     *
     * @return int
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set 'language' value
     *
     * @param int $value
     */
    public function setLanguage($value = null)
    {
        $this->language = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'publishedfileids' => [],
            'includetags' => null,
            'includeadditionalpreviews' => null,
            'includechildren' => null,
            'includekvtags' => null,
            'includevotes' => null,
            'short_description' => null,
            'includeforsaledata' => null,
            'includemetadata' => null,
            'language' => '0'
        ], $values);

        $message->setIncludetags($values['includetags']);
        $message->setIncludeadditionalpreviews($values['includeadditionalpreviews']);
        $message->setIncludechildren($values['includechildren']);
        $message->setIncludekvtags($values['includekvtags']);
        $message->setIncludevotes($values['includevotes']);
        $message->setShortDescription($values['short_description']);
        $message->setIncludeforsaledata($values['includeforsaledata']);
        $message->setIncludemetadata($values['includemetadata']);
        $message->setLanguage($values['language']);

        foreach ($values['publishedfileids'] as $item) {
            $message->addPublishedfileids($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CPublishedFile_GetDetails_Request',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'publishedfileids',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'includetags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'includeadditionalpreviews',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'includechildren',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'includekvtags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'includevotes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'short_description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'includeforsaledata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'includemetadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'language',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->publishedfileids !== null) {
            foreach ($this->publishedfileids as $val) {
                $writer->writeVarint($stream, 9);
                $writer->writeFixed64($stream, $val);
            }
        }

        if ($this->includetags !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->includetags);
        }

        if ($this->includeadditionalpreviews !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->includeadditionalpreviews);
        }

        if ($this->includechildren !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->includechildren);
        }

        if ($this->includekvtags !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->includekvtags);
        }

        if ($this->includevotes !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->includevotes);
        }

        if ($this->short_description !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->short_description);
        }

        if ($this->includeforsaledata !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->includeforsaledata);
        }

        if ($this->includemetadata !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->includemetadata);
        }

        if ($this->language !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->language);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                if ($this->publishedfileids === null) {
                    $this->publishedfileids = new \Protobuf\ScalarCollection();
                }

                $this->publishedfileids->add($reader->readFixed64($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->includetags = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->includeadditionalpreviews = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->includechildren = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->includekvtags = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->includevotes = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->short_description = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->includeforsaledata = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->includemetadata = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->language = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->publishedfileids !== null) {
            foreach ($this->publishedfileids as $val) {
                $size += 1;
                $size += 8;
            }
        }

        if ($this->includetags !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->includeadditionalpreviews !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->includechildren !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->includekvtags !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->includevotes !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->short_description !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->includeforsaledata !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->includemetadata !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->language !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->language);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->publishedfileids = null;
        $this->includetags = null;
        $this->includeadditionalpreviews = null;
        $this->includechildren = null;
        $this->includekvtags = null;
        $this->includevotes = null;
        $this->short_description = null;
        $this->includeforsaledata = null;
        $this->includemetadata = null;
        $this->language = '0';
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetDetails_Request) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->publishedfileids = ($message->publishedfileids !== null) ? $message->publishedfileids : $this->publishedfileids;
        $this->includetags = ($message->includetags !== null) ? $message->includetags : $this->includetags;
        $this->includeadditionalpreviews = ($message->includeadditionalpreviews !== null) ? $message->includeadditionalpreviews : $this->includeadditionalpreviews;
        $this->includechildren = ($message->includechildren !== null) ? $message->includechildren : $this->includechildren;
        $this->includekvtags = ($message->includekvtags !== null) ? $message->includekvtags : $this->includekvtags;
        $this->includevotes = ($message->includevotes !== null) ? $message->includevotes : $this->includevotes;
        $this->short_description = ($message->short_description !== null) ? $message->short_description : $this->short_description;
        $this->includeforsaledata = ($message->includeforsaledata !== null) ? $message->includeforsaledata : $this->includeforsaledata;
        $this->includemetadata = ($message->includemetadata !== null) ? $message->includemetadata : $this->includemetadata;
        $this->language = ($message->language !== null) ? $message->language : $this->language;
    }


}

