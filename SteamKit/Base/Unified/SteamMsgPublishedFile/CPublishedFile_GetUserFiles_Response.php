<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_publishedfile.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgPublishedFile;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgPublishedFile.CPublishedFile_GetUserFiles_Response
 */
class CPublishedFile_GetUserFiles_Response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * total optional uint32 = 1
     *
     * @var int
     */
    protected $total = null;

    /**
     * startindex optional uint32 = 2
     *
     * @var int
     */
    protected $startindex = null;

    /**
     * publishedfiledetails repeated message = 3
     *
     * @var \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\PublishedFileDetails>
     */
    protected $publishedfiledetails = null;

    /**
     * apps repeated message = 4
     *
     * @var \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Response\App>
     */
    protected $apps = null;

    /**
     * Check if 'total' has a value
     *
     * @return bool
     */
    public function hasTotal()
    {
        return $this->total !== null;
    }

    /**
     * Get 'total' value
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->total;
    }

    /**
     * Set 'total' value
     *
     * @param int $value
     */
    public function setTotal($value = null)
    {
        $this->total = $value;
    }

    /**
     * Check if 'startindex' has a value
     *
     * @return bool
     */
    public function hasStartindex()
    {
        return $this->startindex !== null;
    }

    /**
     * Get 'startindex' value
     *
     * @return int
     */
    public function getStartindex()
    {
        return $this->startindex;
    }

    /**
     * Set 'startindex' value
     *
     * @param int $value
     */
    public function setStartindex($value = null)
    {
        $this->startindex = $value;
    }

    /**
     * Check if 'publishedfiledetails' has a value
     *
     * @return bool
     */
    public function hasPublishedfiledetailsList()
    {
        return $this->publishedfiledetails !== null;
    }

    /**
     * Get 'publishedfiledetails' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\PublishedFileDetails>
     */
    public function getPublishedfiledetailsList()
    {
        return $this->publishedfiledetails;
    }

    /**
     * Set 'publishedfiledetails' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\PublishedFileDetails> $value
     */
    public function setPublishedfiledetailsList(\Protobuf\Collection $value = null)
    {
        $this->publishedfiledetails = $value;
    }

    /**
     * Add a new element to 'publishedfiledetails'
     *
     * @param \SteamKit\Base\Unified\SteamMsgPublishedFile\PublishedFileDetails $value
     */
    public function addPublishedfiledetails(\SteamKit\Base\Unified\SteamMsgPublishedFile\PublishedFileDetails $value)
    {
        if ($this->publishedfiledetails === null) {
            $this->publishedfiledetails = new \Protobuf\MessageCollection();
        }

        $this->publishedfiledetails->add($value);
    }

    /**
     * Check if 'apps' has a value
     *
     * @return bool
     */
    public function hasAppsList()
    {
        return $this->apps !== null;
    }

    /**
     * Get 'apps' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Response\App>
     */
    public function getAppsList()
    {
        return $this->apps;
    }

    /**
     * Set 'apps' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Response\App> $value
     */
    public function setAppsList(\Protobuf\Collection $value = null)
    {
        $this->apps = $value;
    }

    /**
     * Add a new element to 'apps'
     *
     * @param
     * \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Response\App
     * $value
     */
    public function addApps(\SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Response\App $value)
    {
        if ($this->apps === null) {
            $this->apps = new \Protobuf\MessageCollection();
        }

        $this->apps->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'total' => null,
            'startindex' => null,
            'publishedfiledetails' => [],
            'apps' => []
        ], $values);

        $message->setTotal($values['total']);
        $message->setStartindex($values['startindex']);

        foreach ($values['publishedfiledetails'] as $item) {
            $message->addPublishedfiledetails($item);
        }

        foreach ($values['apps'] as $item) {
            $message->addApps($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CPublishedFile_GetUserFiles_Response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'total',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'startindex',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'publishedfiledetails',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgPublishedFile.PublishedFileDetails'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'apps',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgPublishedFile.CPublishedFile_GetUserFiles_Response.App'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->total !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->total);
        }

        if ($this->startindex !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->startindex);
        }

        if ($this->publishedfiledetails !== null) {
            foreach ($this->publishedfiledetails as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->apps !== null) {
            foreach ($this->apps as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->total = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->startindex = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\Unified\SteamMsgPublishedFile\PublishedFileDetails();

                if ($this->publishedfiledetails === null) {
                    $this->publishedfiledetails = new \Protobuf\MessageCollection();
                }

                $this->publishedfiledetails->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Response\App();

                if ($this->apps === null) {
                    $this->apps = new \Protobuf\MessageCollection();
                }

                $this->apps->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->total !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->total);
        }

        if ($this->startindex !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->startindex);
        }

        if ($this->publishedfiledetails !== null) {
            foreach ($this->publishedfiledetails as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->apps !== null) {
            foreach ($this->apps as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->total = null;
        $this->startindex = null;
        $this->publishedfiledetails = null;
        $this->apps = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->total = ($message->total !== null) ? $message->total : $this->total;
        $this->startindex = ($message->startindex !== null) ? $message->startindex : $this->startindex;
        $this->publishedfiledetails = ($message->publishedfiledetails !== null) ? $message->publishedfiledetails : $this->publishedfiledetails;
        $this->apps = ($message->apps !== null) ? $message->apps : $this->apps;
    }


}

