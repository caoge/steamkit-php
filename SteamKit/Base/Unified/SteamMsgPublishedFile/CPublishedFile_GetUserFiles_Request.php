<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_publishedfile.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgPublishedFile;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgPublishedFile.CPublishedFile_GetUserFiles_Request
 */
class CPublishedFile_GetUserFiles_Request extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steamid optional fixed64 = 1
     *
     * @var int
     */
    protected $steamid = null;

    /**
     * appid optional uint32 = 2
     *
     * @var int
     */
    protected $appid = null;

    /**
     * page optional uint32 = 4
     *
     * @var int
     */
    protected $page = null;

    /**
     * numperpage optional uint32 = 5
     *
     * @var int
     */
    protected $numperpage = null;

    /**
     * type optional string = 6
     *
     * @var string
     */
    protected $type = null;

    /**
     * sortmethod optional string = 7
     *
     * @var string
     */
    protected $sortmethod = null;

    /**
     * privacy optional uint32 = 9
     *
     * @var int
     */
    protected $privacy = null;

    /**
     * requiredtags repeated string = 10
     *
     * @var \Protobuf\Collection
     */
    protected $requiredtags = null;

    /**
     * excludedtags repeated string = 11
     *
     * @var \Protobuf\Collection
     */
    protected $excludedtags = null;

    /**
     * required_kv_tags repeated message = 30
     *
     * @var \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Request\KVTag>
     */
    protected $required_kv_tags = null;

    /**
     * filetype optional uint32 = 14
     *
     * @var int
     */
    protected $filetype = null;

    /**
     * creator_appid optional uint32 = 15
     *
     * @var int
     */
    protected $creator_appid = null;

    /**
     * match_cloud_filename optional string = 16
     *
     * @var string
     */
    protected $match_cloud_filename = null;

    /**
     * cache_max_age_seconds optional uint32 = 27
     *
     * @var int
     */
    protected $cache_max_age_seconds = null;

    /**
     * language optional int32 = 29
     *
     * @var int
     */
    protected $language = null;

    /**
     * totalonly optional bool = 17
     *
     * @var bool
     */
    protected $totalonly = null;

    /**
     * ids_only optional bool = 18
     *
     * @var bool
     */
    protected $ids_only = null;

    /**
     * return_vote_data optional bool = 19
     *
     * @var bool
     */
    protected $return_vote_data = null;

    /**
     * return_tags optional bool = 20
     *
     * @var bool
     */
    protected $return_tags = null;

    /**
     * return_kv_tags optional bool = 21
     *
     * @var bool
     */
    protected $return_kv_tags = null;

    /**
     * return_previews optional bool = 22
     *
     * @var bool
     */
    protected $return_previews = null;

    /**
     * return_children optional bool = 23
     *
     * @var bool
     */
    protected $return_children = null;

    /**
     * return_short_description optional bool = 24
     *
     * @var bool
     */
    protected $return_short_description = null;

    /**
     * return_for_sale_data optional bool = 26
     *
     * @var bool
     */
    protected $return_for_sale_data = null;

    /**
     * return_metadata optional bool = 28
     *
     * @var bool
     */
    protected $return_metadata = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->page = '1';
        $this->numperpage = '1';
        $this->type = 'myfiles';
        $this->sortmethod = 'lastupdated';
        $this->cache_max_age_seconds = '0';
        $this->language = '0';
        $this->return_vote_data = true;
        $this->return_kv_tags = true;
        $this->return_short_description = true;
        $this->return_metadata = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'steamid' has a value
     *
     * @return bool
     */
    public function hasSteamid()
    {
        return $this->steamid !== null;
    }

    /**
     * Get 'steamid' value
     *
     * @return int
     */
    public function getSteamid()
    {
        return $this->steamid;
    }

    /**
     * Set 'steamid' value
     *
     * @param int $value
     */
    public function setSteamid($value = null)
    {
        $this->steamid = $value;
    }

    /**
     * Check if 'appid' has a value
     *
     * @return bool
     */
    public function hasAppid()
    {
        return $this->appid !== null;
    }

    /**
     * Get 'appid' value
     *
     * @return int
     */
    public function getAppid()
    {
        return $this->appid;
    }

    /**
     * Set 'appid' value
     *
     * @param int $value
     */
    public function setAppid($value = null)
    {
        $this->appid = $value;
    }

    /**
     * Check if 'page' has a value
     *
     * @return bool
     */
    public function hasPage()
    {
        return $this->page !== null;
    }

    /**
     * Get 'page' value
     *
     * @return int
     */
    public function getPage()
    {
        return $this->page;
    }

    /**
     * Set 'page' value
     *
     * @param int $value
     */
    public function setPage($value = null)
    {
        $this->page = $value;
    }

    /**
     * Check if 'numperpage' has a value
     *
     * @return bool
     */
    public function hasNumperpage()
    {
        return $this->numperpage !== null;
    }

    /**
     * Get 'numperpage' value
     *
     * @return int
     */
    public function getNumperpage()
    {
        return $this->numperpage;
    }

    /**
     * Set 'numperpage' value
     *
     * @param int $value
     */
    public function setNumperpage($value = null)
    {
        $this->numperpage = $value;
    }

    /**
     * Check if 'type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->type !== null;
    }

    /**
     * Get 'type' value
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set 'type' value
     *
     * @param string $value
     */
    public function setType($value = null)
    {
        $this->type = $value;
    }

    /**
     * Check if 'sortmethod' has a value
     *
     * @return bool
     */
    public function hasSortmethod()
    {
        return $this->sortmethod !== null;
    }

    /**
     * Get 'sortmethod' value
     *
     * @return string
     */
    public function getSortmethod()
    {
        return $this->sortmethod;
    }

    /**
     * Set 'sortmethod' value
     *
     * @param string $value
     */
    public function setSortmethod($value = null)
    {
        $this->sortmethod = $value;
    }

    /**
     * Check if 'privacy' has a value
     *
     * @return bool
     */
    public function hasPrivacy()
    {
        return $this->privacy !== null;
    }

    /**
     * Get 'privacy' value
     *
     * @return int
     */
    public function getPrivacy()
    {
        return $this->privacy;
    }

    /**
     * Set 'privacy' value
     *
     * @param int $value
     */
    public function setPrivacy($value = null)
    {
        $this->privacy = $value;
    }

    /**
     * Check if 'requiredtags' has a value
     *
     * @return bool
     */
    public function hasRequiredtagsList()
    {
        return $this->requiredtags !== null;
    }

    /**
     * Get 'requiredtags' value
     *
     * @return \Protobuf\Collection
     */
    public function getRequiredtagsList()
    {
        return $this->requiredtags;
    }

    /**
     * Set 'requiredtags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setRequiredtagsList(\Protobuf\Collection $value = null)
    {
        $this->requiredtags = $value;
    }

    /**
     * Add a new element to 'requiredtags'
     *
     * @param string $value
     */
    public function addRequiredtags($value)
    {
        if ($this->requiredtags === null) {
            $this->requiredtags = new \Protobuf\ScalarCollection();
        }

        $this->requiredtags->add($value);
    }

    /**
     * Check if 'excludedtags' has a value
     *
     * @return bool
     */
    public function hasExcludedtagsList()
    {
        return $this->excludedtags !== null;
    }

    /**
     * Get 'excludedtags' value
     *
     * @return \Protobuf\Collection
     */
    public function getExcludedtagsList()
    {
        return $this->excludedtags;
    }

    /**
     * Set 'excludedtags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setExcludedtagsList(\Protobuf\Collection $value = null)
    {
        $this->excludedtags = $value;
    }

    /**
     * Add a new element to 'excludedtags'
     *
     * @param string $value
     */
    public function addExcludedtags($value)
    {
        if ($this->excludedtags === null) {
            $this->excludedtags = new \Protobuf\ScalarCollection();
        }

        $this->excludedtags->add($value);
    }

    /**
     * Check if 'required_kv_tags' has a value
     *
     * @return bool
     */
    public function hasRequiredKvTagsList()
    {
        return $this->required_kv_tags !== null;
    }

    /**
     * Get 'required_kv_tags' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Request\KVTag>
     */
    public function getRequiredKvTagsList()
    {
        return $this->required_kv_tags;
    }

    /**
     * Set 'required_kv_tags' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Request\KVTag> $value
     */
    public function setRequiredKvTagsList(\Protobuf\Collection $value = null)
    {
        $this->required_kv_tags = $value;
    }

    /**
     * Add a new element to 'required_kv_tags'
     *
     * @param
     * \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Request\KVTag
     * $value
     */
    public function addRequiredKvTags(\SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Request\KVTag $value)
    {
        if ($this->required_kv_tags === null) {
            $this->required_kv_tags = new \Protobuf\MessageCollection();
        }

        $this->required_kv_tags->add($value);
    }

    /**
     * Check if 'filetype' has a value
     *
     * @return bool
     */
    public function hasFiletype()
    {
        return $this->filetype !== null;
    }

    /**
     * Get 'filetype' value
     *
     * @return int
     */
    public function getFiletype()
    {
        return $this->filetype;
    }

    /**
     * Set 'filetype' value
     *
     * @param int $value
     */
    public function setFiletype($value = null)
    {
        $this->filetype = $value;
    }

    /**
     * Check if 'creator_appid' has a value
     *
     * @return bool
     */
    public function hasCreatorAppid()
    {
        return $this->creator_appid !== null;
    }

    /**
     * Get 'creator_appid' value
     *
     * @return int
     */
    public function getCreatorAppid()
    {
        return $this->creator_appid;
    }

    /**
     * Set 'creator_appid' value
     *
     * @param int $value
     */
    public function setCreatorAppid($value = null)
    {
        $this->creator_appid = $value;
    }

    /**
     * Check if 'match_cloud_filename' has a value
     *
     * @return bool
     */
    public function hasMatchCloudFilename()
    {
        return $this->match_cloud_filename !== null;
    }

    /**
     * Get 'match_cloud_filename' value
     *
     * @return string
     */
    public function getMatchCloudFilename()
    {
        return $this->match_cloud_filename;
    }

    /**
     * Set 'match_cloud_filename' value
     *
     * @param string $value
     */
    public function setMatchCloudFilename($value = null)
    {
        $this->match_cloud_filename = $value;
    }

    /**
     * Check if 'cache_max_age_seconds' has a value
     *
     * @return bool
     */
    public function hasCacheMaxAgeSeconds()
    {
        return $this->cache_max_age_seconds !== null;
    }

    /**
     * Get 'cache_max_age_seconds' value
     *
     * @return int
     */
    public function getCacheMaxAgeSeconds()
    {
        return $this->cache_max_age_seconds;
    }

    /**
     * Set 'cache_max_age_seconds' value
     *
     * @param int $value
     */
    public function setCacheMaxAgeSeconds($value = null)
    {
        $this->cache_max_age_seconds = $value;
    }

    /**
     * Check if 'language' has a value
     *
     * @return bool
     */
    public function hasLanguage()
    {
        return $this->language !== null;
    }

    /**
     * Get 'language' value
     *
     * @return int
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set 'language' value
     *
     * @param int $value
     */
    public function setLanguage($value = null)
    {
        $this->language = $value;
    }

    /**
     * Check if 'totalonly' has a value
     *
     * @return bool
     */
    public function hasTotalonly()
    {
        return $this->totalonly !== null;
    }

    /**
     * Get 'totalonly' value
     *
     * @return bool
     */
    public function getTotalonly()
    {
        return $this->totalonly;
    }

    /**
     * Set 'totalonly' value
     *
     * @param bool $value
     */
    public function setTotalonly($value = null)
    {
        $this->totalonly = $value;
    }

    /**
     * Check if 'ids_only' has a value
     *
     * @return bool
     */
    public function hasIdsOnly()
    {
        return $this->ids_only !== null;
    }

    /**
     * Get 'ids_only' value
     *
     * @return bool
     */
    public function getIdsOnly()
    {
        return $this->ids_only;
    }

    /**
     * Set 'ids_only' value
     *
     * @param bool $value
     */
    public function setIdsOnly($value = null)
    {
        $this->ids_only = $value;
    }

    /**
     * Check if 'return_vote_data' has a value
     *
     * @return bool
     */
    public function hasReturnVoteData()
    {
        return $this->return_vote_data !== null;
    }

    /**
     * Get 'return_vote_data' value
     *
     * @return bool
     */
    public function getReturnVoteData()
    {
        return $this->return_vote_data;
    }

    /**
     * Set 'return_vote_data' value
     *
     * @param bool $value
     */
    public function setReturnVoteData($value = null)
    {
        $this->return_vote_data = $value;
    }

    /**
     * Check if 'return_tags' has a value
     *
     * @return bool
     */
    public function hasReturnTags()
    {
        return $this->return_tags !== null;
    }

    /**
     * Get 'return_tags' value
     *
     * @return bool
     */
    public function getReturnTags()
    {
        return $this->return_tags;
    }

    /**
     * Set 'return_tags' value
     *
     * @param bool $value
     */
    public function setReturnTags($value = null)
    {
        $this->return_tags = $value;
    }

    /**
     * Check if 'return_kv_tags' has a value
     *
     * @return bool
     */
    public function hasReturnKvTags()
    {
        return $this->return_kv_tags !== null;
    }

    /**
     * Get 'return_kv_tags' value
     *
     * @return bool
     */
    public function getReturnKvTags()
    {
        return $this->return_kv_tags;
    }

    /**
     * Set 'return_kv_tags' value
     *
     * @param bool $value
     */
    public function setReturnKvTags($value = null)
    {
        $this->return_kv_tags = $value;
    }

    /**
     * Check if 'return_previews' has a value
     *
     * @return bool
     */
    public function hasReturnPreviews()
    {
        return $this->return_previews !== null;
    }

    /**
     * Get 'return_previews' value
     *
     * @return bool
     */
    public function getReturnPreviews()
    {
        return $this->return_previews;
    }

    /**
     * Set 'return_previews' value
     *
     * @param bool $value
     */
    public function setReturnPreviews($value = null)
    {
        $this->return_previews = $value;
    }

    /**
     * Check if 'return_children' has a value
     *
     * @return bool
     */
    public function hasReturnChildren()
    {
        return $this->return_children !== null;
    }

    /**
     * Get 'return_children' value
     *
     * @return bool
     */
    public function getReturnChildren()
    {
        return $this->return_children;
    }

    /**
     * Set 'return_children' value
     *
     * @param bool $value
     */
    public function setReturnChildren($value = null)
    {
        $this->return_children = $value;
    }

    /**
     * Check if 'return_short_description' has a value
     *
     * @return bool
     */
    public function hasReturnShortDescription()
    {
        return $this->return_short_description !== null;
    }

    /**
     * Get 'return_short_description' value
     *
     * @return bool
     */
    public function getReturnShortDescription()
    {
        return $this->return_short_description;
    }

    /**
     * Set 'return_short_description' value
     *
     * @param bool $value
     */
    public function setReturnShortDescription($value = null)
    {
        $this->return_short_description = $value;
    }

    /**
     * Check if 'return_for_sale_data' has a value
     *
     * @return bool
     */
    public function hasReturnForSaleData()
    {
        return $this->return_for_sale_data !== null;
    }

    /**
     * Get 'return_for_sale_data' value
     *
     * @return bool
     */
    public function getReturnForSaleData()
    {
        return $this->return_for_sale_data;
    }

    /**
     * Set 'return_for_sale_data' value
     *
     * @param bool $value
     */
    public function setReturnForSaleData($value = null)
    {
        $this->return_for_sale_data = $value;
    }

    /**
     * Check if 'return_metadata' has a value
     *
     * @return bool
     */
    public function hasReturnMetadata()
    {
        return $this->return_metadata !== null;
    }

    /**
     * Get 'return_metadata' value
     *
     * @return bool
     */
    public function getReturnMetadata()
    {
        return $this->return_metadata;
    }

    /**
     * Set 'return_metadata' value
     *
     * @param bool $value
     */
    public function setReturnMetadata($value = null)
    {
        $this->return_metadata = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steamid' => null,
            'appid' => null,
            'page' => '1',
            'numperpage' => '1',
            'type' => 'myfiles',
            'sortmethod' => 'lastupdated',
            'privacy' => null,
            'requiredtags' => [],
            'excludedtags' => [],
            'required_kv_tags' => [],
            'filetype' => null,
            'creator_appid' => null,
            'match_cloud_filename' => null,
            'cache_max_age_seconds' => '0',
            'language' => '0',
            'totalonly' => null,
            'ids_only' => null,
            'return_vote_data' => true,
            'return_tags' => null,
            'return_kv_tags' => true,
            'return_previews' => null,
            'return_children' => null,
            'return_short_description' => true,
            'return_for_sale_data' => null,
            'return_metadata' => false
        ], $values);

        $message->setSteamid($values['steamid']);
        $message->setAppid($values['appid']);
        $message->setPage($values['page']);
        $message->setNumperpage($values['numperpage']);
        $message->setType($values['type']);
        $message->setSortmethod($values['sortmethod']);
        $message->setPrivacy($values['privacy']);
        $message->setFiletype($values['filetype']);
        $message->setCreatorAppid($values['creator_appid']);
        $message->setMatchCloudFilename($values['match_cloud_filename']);
        $message->setCacheMaxAgeSeconds($values['cache_max_age_seconds']);
        $message->setLanguage($values['language']);
        $message->setTotalonly($values['totalonly']);
        $message->setIdsOnly($values['ids_only']);
        $message->setReturnVoteData($values['return_vote_data']);
        $message->setReturnTags($values['return_tags']);
        $message->setReturnKvTags($values['return_kv_tags']);
        $message->setReturnPreviews($values['return_previews']);
        $message->setReturnChildren($values['return_children']);
        $message->setReturnShortDescription($values['return_short_description']);
        $message->setReturnForSaleData($values['return_for_sale_data']);
        $message->setReturnMetadata($values['return_metadata']);

        foreach ($values['requiredtags'] as $item) {
            $message->addRequiredtags($item);
        }

        foreach ($values['excludedtags'] as $item) {
            $message->addExcludedtags($item);
        }

        foreach ($values['required_kv_tags'] as $item) {
            $message->addRequiredKvTags($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CPublishedFile_GetUserFiles_Request',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steamid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'page',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '1'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'numperpage',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '1'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => 'myfiles'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'sortmethod',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => 'lastupdated'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'privacy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'requiredtags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'excludedtags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 30,
                    'name' => 'required_kv_tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgPublishedFile.CPublishedFile_GetUserFiles_Request.KVTag'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'filetype',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'creator_appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'match_cloud_filename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'cache_max_age_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 29,
                    'name' => 'language',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'totalonly',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'ids_only',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'return_vote_data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'return_tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'return_kv_tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'return_previews',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'return_children',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'return_short_description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'return_for_sale_data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 28,
                    'name' => 'return_metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steamid !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->steamid);
        }

        if ($this->appid !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->appid);
        }

        if ($this->page !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->page);
        }

        if ($this->numperpage !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->numperpage);
        }

        if ($this->type !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->type);
        }

        if ($this->sortmethod !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->sortmethod);
        }

        if ($this->privacy !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->privacy);
        }

        if ($this->requiredtags !== null) {
            foreach ($this->requiredtags as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->excludedtags !== null) {
            foreach ($this->excludedtags as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->required_kv_tags !== null) {
            foreach ($this->required_kv_tags as $val) {
                $writer->writeVarint($stream, 242);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->filetype !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->filetype);
        }

        if ($this->creator_appid !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->creator_appid);
        }

        if ($this->match_cloud_filename !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->match_cloud_filename);
        }

        if ($this->cache_max_age_seconds !== null) {
            $writer->writeVarint($stream, 216);
            $writer->writeVarint($stream, $this->cache_max_age_seconds);
        }

        if ($this->language !== null) {
            $writer->writeVarint($stream, 232);
            $writer->writeVarint($stream, $this->language);
        }

        if ($this->totalonly !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeBool($stream, $this->totalonly);
        }

        if ($this->ids_only !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->ids_only);
        }

        if ($this->return_vote_data !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeBool($stream, $this->return_vote_data);
        }

        if ($this->return_tags !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeBool($stream, $this->return_tags);
        }

        if ($this->return_kv_tags !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeBool($stream, $this->return_kv_tags);
        }

        if ($this->return_previews !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeBool($stream, $this->return_previews);
        }

        if ($this->return_children !== null) {
            $writer->writeVarint($stream, 184);
            $writer->writeBool($stream, $this->return_children);
        }

        if ($this->return_short_description !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeBool($stream, $this->return_short_description);
        }

        if ($this->return_for_sale_data !== null) {
            $writer->writeVarint($stream, 208);
            $writer->writeBool($stream, $this->return_for_sale_data);
        }

        if ($this->return_metadata !== null) {
            $writer->writeVarint($stream, 224);
            $writer->writeBool($stream, $this->return_metadata);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steamid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->page = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->numperpage = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->type = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sortmethod = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->privacy = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->requiredtags === null) {
                    $this->requiredtags = new \Protobuf\ScalarCollection();
                }

                $this->requiredtags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->excludedtags === null) {
                    $this->excludedtags = new \Protobuf\ScalarCollection();
                }

                $this->excludedtags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Request\KVTag();

                if ($this->required_kv_tags === null) {
                    $this->required_kv_tags = new \Protobuf\MessageCollection();
                }

                $this->required_kv_tags->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->filetype = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->creator_appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->match_cloud_filename = $reader->readString($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cache_max_age_seconds = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->language = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->totalonly = $reader->readBool($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->ids_only = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_vote_data = $reader->readBool($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_tags = $reader->readBool($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_kv_tags = $reader->readBool($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_previews = $reader->readBool($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_children = $reader->readBool($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_short_description = $reader->readBool($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_for_sale_data = $reader->readBool($stream);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_metadata = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steamid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->appid);
        }

        if ($this->page !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->page);
        }

        if ($this->numperpage !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->numperpage);
        }

        if ($this->type !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->type);
        }

        if ($this->sortmethod !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->sortmethod);
        }

        if ($this->privacy !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->privacy);
        }

        if ($this->requiredtags !== null) {
            foreach ($this->requiredtags as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->excludedtags !== null) {
            foreach ($this->excludedtags as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->required_kv_tags !== null) {
            foreach ($this->required_kv_tags as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->filetype !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->filetype);
        }

        if ($this->creator_appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->creator_appid);
        }

        if ($this->match_cloud_filename !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->match_cloud_filename);
        }

        if ($this->cache_max_age_seconds !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->cache_max_age_seconds);
        }

        if ($this->language !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->language);
        }

        if ($this->totalonly !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->ids_only !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->return_vote_data !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->return_tags !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->return_kv_tags !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->return_previews !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->return_children !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->return_short_description !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->return_for_sale_data !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->return_metadata !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steamid = null;
        $this->appid = null;
        $this->page = '1';
        $this->numperpage = '1';
        $this->type = 'myfiles';
        $this->sortmethod = 'lastupdated';
        $this->privacy = null;
        $this->requiredtags = null;
        $this->excludedtags = null;
        $this->required_kv_tags = null;
        $this->filetype = null;
        $this->creator_appid = null;
        $this->match_cloud_filename = null;
        $this->cache_max_age_seconds = '0';
        $this->language = '0';
        $this->totalonly = null;
        $this->ids_only = null;
        $this->return_vote_data = true;
        $this->return_tags = null;
        $this->return_kv_tags = true;
        $this->return_previews = null;
        $this->return_children = null;
        $this->return_short_description = true;
        $this->return_for_sale_data = null;
        $this->return_metadata = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_GetUserFiles_Request) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steamid = ($message->steamid !== null) ? $message->steamid : $this->steamid;
        $this->appid = ($message->appid !== null) ? $message->appid : $this->appid;
        $this->page = ($message->page !== null) ? $message->page : $this->page;
        $this->numperpage = ($message->numperpage !== null) ? $message->numperpage : $this->numperpage;
        $this->type = ($message->type !== null) ? $message->type : $this->type;
        $this->sortmethod = ($message->sortmethod !== null) ? $message->sortmethod : $this->sortmethod;
        $this->privacy = ($message->privacy !== null) ? $message->privacy : $this->privacy;
        $this->requiredtags = ($message->requiredtags !== null) ? $message->requiredtags : $this->requiredtags;
        $this->excludedtags = ($message->excludedtags !== null) ? $message->excludedtags : $this->excludedtags;
        $this->required_kv_tags = ($message->required_kv_tags !== null) ? $message->required_kv_tags : $this->required_kv_tags;
        $this->filetype = ($message->filetype !== null) ? $message->filetype : $this->filetype;
        $this->creator_appid = ($message->creator_appid !== null) ? $message->creator_appid : $this->creator_appid;
        $this->match_cloud_filename = ($message->match_cloud_filename !== null) ? $message->match_cloud_filename : $this->match_cloud_filename;
        $this->cache_max_age_seconds = ($message->cache_max_age_seconds !== null) ? $message->cache_max_age_seconds : $this->cache_max_age_seconds;
        $this->language = ($message->language !== null) ? $message->language : $this->language;
        $this->totalonly = ($message->totalonly !== null) ? $message->totalonly : $this->totalonly;
        $this->ids_only = ($message->ids_only !== null) ? $message->ids_only : $this->ids_only;
        $this->return_vote_data = ($message->return_vote_data !== null) ? $message->return_vote_data : $this->return_vote_data;
        $this->return_tags = ($message->return_tags !== null) ? $message->return_tags : $this->return_tags;
        $this->return_kv_tags = ($message->return_kv_tags !== null) ? $message->return_kv_tags : $this->return_kv_tags;
        $this->return_previews = ($message->return_previews !== null) ? $message->return_previews : $this->return_previews;
        $this->return_children = ($message->return_children !== null) ? $message->return_children : $this->return_children;
        $this->return_short_description = ($message->return_short_description !== null) ? $message->return_short_description : $this->return_short_description;
        $this->return_for_sale_data = ($message->return_for_sale_data !== null) ? $message->return_for_sale_data : $this->return_for_sale_data;
        $this->return_metadata = ($message->return_metadata !== null) ? $message->return_metadata : $this->return_metadata;
    }


}

