<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_publishedfile.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgPublishedFile;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgPublishedFile.CPublishedFile_Publish_Request
 */
class CPublishedFile_Publish_Request extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * appid optional uint32 = 1
     *
     * @var int
     */
    protected $appid = null;

    /**
     * consumer_appid optional uint32 = 2
     *
     * @var int
     */
    protected $consumer_appid = null;

    /**
     * cloudfilename optional string = 3
     *
     * @var string
     */
    protected $cloudfilename = null;

    /**
     * preview_cloudfilename optional string = 4
     *
     * @var string
     */
    protected $preview_cloudfilename = null;

    /**
     * title optional string = 5
     *
     * @var string
     */
    protected $title = null;

    /**
     * file_description optional string = 6
     *
     * @var string
     */
    protected $file_description = null;

    /**
     * file_type optional uint32 = 7
     *
     * @var int
     */
    protected $file_type = null;

    /**
     * consumer_shortcut_name optional string = 8
     *
     * @var string
     */
    protected $consumer_shortcut_name = null;

    /**
     * youtube_username optional string = 9
     *
     * @var string
     */
    protected $youtube_username = null;

    /**
     * youtube_videoid optional string = 10
     *
     * @var string
     */
    protected $youtube_videoid = null;

    /**
     * visibility optional uint32 = 11
     *
     * @var int
     */
    protected $visibility = null;

    /**
     * redirect_uri optional string = 12
     *
     * @var string
     */
    protected $redirect_uri = null;

    /**
     * tags repeated string = 13
     *
     * @var \Protobuf\Collection
     */
    protected $tags = null;

    /**
     * collection_type optional string = 14
     *
     * @var string
     */
    protected $collection_type = null;

    /**
     * game_type optional string = 15
     *
     * @var string
     */
    protected $game_type = null;

    /**
     * url optional string = 16
     *
     * @var string
     */
    protected $url = null;

    /**
     * Check if 'appid' has a value
     *
     * @return bool
     */
    public function hasAppid()
    {
        return $this->appid !== null;
    }

    /**
     * Get 'appid' value
     *
     * @return int
     */
    public function getAppid()
    {
        return $this->appid;
    }

    /**
     * Set 'appid' value
     *
     * @param int $value
     */
    public function setAppid($value = null)
    {
        $this->appid = $value;
    }

    /**
     * Check if 'consumer_appid' has a value
     *
     * @return bool
     */
    public function hasConsumerAppid()
    {
        return $this->consumer_appid !== null;
    }

    /**
     * Get 'consumer_appid' value
     *
     * @return int
     */
    public function getConsumerAppid()
    {
        return $this->consumer_appid;
    }

    /**
     * Set 'consumer_appid' value
     *
     * @param int $value
     */
    public function setConsumerAppid($value = null)
    {
        $this->consumer_appid = $value;
    }

    /**
     * Check if 'cloudfilename' has a value
     *
     * @return bool
     */
    public function hasCloudfilename()
    {
        return $this->cloudfilename !== null;
    }

    /**
     * Get 'cloudfilename' value
     *
     * @return string
     */
    public function getCloudfilename()
    {
        return $this->cloudfilename;
    }

    /**
     * Set 'cloudfilename' value
     *
     * @param string $value
     */
    public function setCloudfilename($value = null)
    {
        $this->cloudfilename = $value;
    }

    /**
     * Check if 'preview_cloudfilename' has a value
     *
     * @return bool
     */
    public function hasPreviewCloudfilename()
    {
        return $this->preview_cloudfilename !== null;
    }

    /**
     * Get 'preview_cloudfilename' value
     *
     * @return string
     */
    public function getPreviewCloudfilename()
    {
        return $this->preview_cloudfilename;
    }

    /**
     * Set 'preview_cloudfilename' value
     *
     * @param string $value
     */
    public function setPreviewCloudfilename($value = null)
    {
        $this->preview_cloudfilename = $value;
    }

    /**
     * Check if 'title' has a value
     *
     * @return bool
     */
    public function hasTitle()
    {
        return $this->title !== null;
    }

    /**
     * Get 'title' value
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set 'title' value
     *
     * @param string $value
     */
    public function setTitle($value = null)
    {
        $this->title = $value;
    }

    /**
     * Check if 'file_description' has a value
     *
     * @return bool
     */
    public function hasFileDescription()
    {
        return $this->file_description !== null;
    }

    /**
     * Get 'file_description' value
     *
     * @return string
     */
    public function getFileDescription()
    {
        return $this->file_description;
    }

    /**
     * Set 'file_description' value
     *
     * @param string $value
     */
    public function setFileDescription($value = null)
    {
        $this->file_description = $value;
    }

    /**
     * Check if 'file_type' has a value
     *
     * @return bool
     */
    public function hasFileType()
    {
        return $this->file_type !== null;
    }

    /**
     * Get 'file_type' value
     *
     * @return int
     */
    public function getFileType()
    {
        return $this->file_type;
    }

    /**
     * Set 'file_type' value
     *
     * @param int $value
     */
    public function setFileType($value = null)
    {
        $this->file_type = $value;
    }

    /**
     * Check if 'consumer_shortcut_name' has a value
     *
     * @return bool
     */
    public function hasConsumerShortcutName()
    {
        return $this->consumer_shortcut_name !== null;
    }

    /**
     * Get 'consumer_shortcut_name' value
     *
     * @return string
     */
    public function getConsumerShortcutName()
    {
        return $this->consumer_shortcut_name;
    }

    /**
     * Set 'consumer_shortcut_name' value
     *
     * @param string $value
     */
    public function setConsumerShortcutName($value = null)
    {
        $this->consumer_shortcut_name = $value;
    }

    /**
     * Check if 'youtube_username' has a value
     *
     * @return bool
     */
    public function hasYoutubeUsername()
    {
        return $this->youtube_username !== null;
    }

    /**
     * Get 'youtube_username' value
     *
     * @return string
     */
    public function getYoutubeUsername()
    {
        return $this->youtube_username;
    }

    /**
     * Set 'youtube_username' value
     *
     * @param string $value
     */
    public function setYoutubeUsername($value = null)
    {
        $this->youtube_username = $value;
    }

    /**
     * Check if 'youtube_videoid' has a value
     *
     * @return bool
     */
    public function hasYoutubeVideoid()
    {
        return $this->youtube_videoid !== null;
    }

    /**
     * Get 'youtube_videoid' value
     *
     * @return string
     */
    public function getYoutubeVideoid()
    {
        return $this->youtube_videoid;
    }

    /**
     * Set 'youtube_videoid' value
     *
     * @param string $value
     */
    public function setYoutubeVideoid($value = null)
    {
        $this->youtube_videoid = $value;
    }

    /**
     * Check if 'visibility' has a value
     *
     * @return bool
     */
    public function hasVisibility()
    {
        return $this->visibility !== null;
    }

    /**
     * Get 'visibility' value
     *
     * @return int
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    /**
     * Set 'visibility' value
     *
     * @param int $value
     */
    public function setVisibility($value = null)
    {
        $this->visibility = $value;
    }

    /**
     * Check if 'redirect_uri' has a value
     *
     * @return bool
     */
    public function hasRedirectUri()
    {
        return $this->redirect_uri !== null;
    }

    /**
     * Get 'redirect_uri' value
     *
     * @return string
     */
    public function getRedirectUri()
    {
        return $this->redirect_uri;
    }

    /**
     * Set 'redirect_uri' value
     *
     * @param string $value
     */
    public function setRedirectUri($value = null)
    {
        $this->redirect_uri = $value;
    }

    /**
     * Check if 'tags' has a value
     *
     * @return bool
     */
    public function hasTagsList()
    {
        return $this->tags !== null;
    }

    /**
     * Get 'tags' value
     *
     * @return \Protobuf\Collection
     */
    public function getTagsList()
    {
        return $this->tags;
    }

    /**
     * Set 'tags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTagsList(\Protobuf\Collection $value = null)
    {
        $this->tags = $value;
    }

    /**
     * Add a new element to 'tags'
     *
     * @param string $value
     */
    public function addTags($value)
    {
        if ($this->tags === null) {
            $this->tags = new \Protobuf\ScalarCollection();
        }

        $this->tags->add($value);
    }

    /**
     * Check if 'collection_type' has a value
     *
     * @return bool
     */
    public function hasCollectionType()
    {
        return $this->collection_type !== null;
    }

    /**
     * Get 'collection_type' value
     *
     * @return string
     */
    public function getCollectionType()
    {
        return $this->collection_type;
    }

    /**
     * Set 'collection_type' value
     *
     * @param string $value
     */
    public function setCollectionType($value = null)
    {
        $this->collection_type = $value;
    }

    /**
     * Check if 'game_type' has a value
     *
     * @return bool
     */
    public function hasGameType()
    {
        return $this->game_type !== null;
    }

    /**
     * Get 'game_type' value
     *
     * @return string
     */
    public function getGameType()
    {
        return $this->game_type;
    }

    /**
     * Set 'game_type' value
     *
     * @param string $value
     */
    public function setGameType($value = null)
    {
        $this->game_type = $value;
    }

    /**
     * Check if 'url' has a value
     *
     * @return bool
     */
    public function hasUrl()
    {
        return $this->url !== null;
    }

    /**
     * Get 'url' value
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set 'url' value
     *
     * @param string $value
     */
    public function setUrl($value = null)
    {
        $this->url = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'appid' => null,
            'consumer_appid' => null,
            'cloudfilename' => null,
            'preview_cloudfilename' => null,
            'title' => null,
            'file_description' => null,
            'file_type' => null,
            'consumer_shortcut_name' => null,
            'youtube_username' => null,
            'youtube_videoid' => null,
            'visibility' => null,
            'redirect_uri' => null,
            'tags' => [],
            'collection_type' => null,
            'game_type' => null,
            'url' => null
        ], $values);

        $message->setAppid($values['appid']);
        $message->setConsumerAppid($values['consumer_appid']);
        $message->setCloudfilename($values['cloudfilename']);
        $message->setPreviewCloudfilename($values['preview_cloudfilename']);
        $message->setTitle($values['title']);
        $message->setFileDescription($values['file_description']);
        $message->setFileType($values['file_type']);
        $message->setConsumerShortcutName($values['consumer_shortcut_name']);
        $message->setYoutubeUsername($values['youtube_username']);
        $message->setYoutubeVideoid($values['youtube_videoid']);
        $message->setVisibility($values['visibility']);
        $message->setRedirectUri($values['redirect_uri']);
        $message->setCollectionType($values['collection_type']);
        $message->setGameType($values['game_type']);
        $message->setUrl($values['url']);

        foreach ($values['tags'] as $item) {
            $message->addTags($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CPublishedFile_Publish_Request',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'consumer_appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'cloudfilename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'preview_cloudfilename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'title',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'file_description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'file_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'consumer_shortcut_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'youtube_username',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'youtube_videoid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'visibility',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'redirect_uri',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'collection_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'game_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->appid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->appid);
        }

        if ($this->consumer_appid !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->consumer_appid);
        }

        if ($this->cloudfilename !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->cloudfilename);
        }

        if ($this->preview_cloudfilename !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->preview_cloudfilename);
        }

        if ($this->title !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->title);
        }

        if ($this->file_description !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->file_description);
        }

        if ($this->file_type !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->file_type);
        }

        if ($this->consumer_shortcut_name !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->consumer_shortcut_name);
        }

        if ($this->youtube_username !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->youtube_username);
        }

        if ($this->youtube_videoid !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->youtube_videoid);
        }

        if ($this->visibility !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->visibility);
        }

        if ($this->redirect_uri !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->redirect_uri);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $writer->writeVarint($stream, 106);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->collection_type !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->collection_type);
        }

        if ($this->game_type !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->game_type);
        }

        if ($this->url !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeString($stream, $this->url);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->consumer_appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->cloudfilename = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->preview_cloudfilename = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->title = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->file_description = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->file_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->consumer_shortcut_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->youtube_username = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->youtube_videoid = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->visibility = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->redirect_uri = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->tags === null) {
                    $this->tags = new \Protobuf\ScalarCollection();
                }

                $this->tags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->collection_type = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->game_type = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->url = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->appid);
        }

        if ($this->consumer_appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->consumer_appid);
        }

        if ($this->cloudfilename !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->cloudfilename);
        }

        if ($this->preview_cloudfilename !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->preview_cloudfilename);
        }

        if ($this->title !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->title);
        }

        if ($this->file_description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->file_description);
        }

        if ($this->file_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->file_type);
        }

        if ($this->consumer_shortcut_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->consumer_shortcut_name);
        }

        if ($this->youtube_username !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->youtube_username);
        }

        if ($this->youtube_videoid !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->youtube_videoid);
        }

        if ($this->visibility !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->visibility);
        }

        if ($this->redirect_uri !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->redirect_uri);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->collection_type !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->collection_type);
        }

        if ($this->game_type !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->game_type);
        }

        if ($this->url !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->url);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->appid = null;
        $this->consumer_appid = null;
        $this->cloudfilename = null;
        $this->preview_cloudfilename = null;
        $this->title = null;
        $this->file_description = null;
        $this->file_type = null;
        $this->consumer_shortcut_name = null;
        $this->youtube_username = null;
        $this->youtube_videoid = null;
        $this->visibility = null;
        $this->redirect_uri = null;
        $this->tags = null;
        $this->collection_type = null;
        $this->game_type = null;
        $this->url = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgPublishedFile\CPublishedFile_Publish_Request) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->appid = ($message->appid !== null) ? $message->appid : $this->appid;
        $this->consumer_appid = ($message->consumer_appid !== null) ? $message->consumer_appid : $this->consumer_appid;
        $this->cloudfilename = ($message->cloudfilename !== null) ? $message->cloudfilename : $this->cloudfilename;
        $this->preview_cloudfilename = ($message->preview_cloudfilename !== null) ? $message->preview_cloudfilename : $this->preview_cloudfilename;
        $this->title = ($message->title !== null) ? $message->title : $this->title;
        $this->file_description = ($message->file_description !== null) ? $message->file_description : $this->file_description;
        $this->file_type = ($message->file_type !== null) ? $message->file_type : $this->file_type;
        $this->consumer_shortcut_name = ($message->consumer_shortcut_name !== null) ? $message->consumer_shortcut_name : $this->consumer_shortcut_name;
        $this->youtube_username = ($message->youtube_username !== null) ? $message->youtube_username : $this->youtube_username;
        $this->youtube_videoid = ($message->youtube_videoid !== null) ? $message->youtube_videoid : $this->youtube_videoid;
        $this->visibility = ($message->visibility !== null) ? $message->visibility : $this->visibility;
        $this->redirect_uri = ($message->redirect_uri !== null) ? $message->redirect_uri : $this->redirect_uri;
        $this->tags = ($message->tags !== null) ? $message->tags : $this->tags;
        $this->collection_type = ($message->collection_type !== null) ? $message->collection_type : $this->collection_type;
        $this->game_type = ($message->game_type !== null) ? $message->game_type : $this->game_type;
        $this->url = ($message->url !== null) ? $message->url : $this->url;
    }


}

