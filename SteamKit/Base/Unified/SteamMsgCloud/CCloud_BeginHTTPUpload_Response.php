<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_cloud.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgCloud;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgCloud.CCloud_BeginHTTPUpload_Response
 */
class CCloud_BeginHTTPUpload_Response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * ugcid optional fixed64 = 1
     *
     * @var int
     */
    protected $ugcid = null;

    /**
     * timestamp optional fixed32 = 2
     *
     * @var int
     */
    protected $timestamp = null;

    /**
     * url_host optional string = 3
     *
     * @var string
     */
    protected $url_host = null;

    /**
     * url_path optional string = 4
     *
     * @var string
     */
    protected $url_path = null;

    /**
     * use_https optional bool = 5
     *
     * @var bool
     */
    protected $use_https = null;

    /**
     * request_headers repeated message = 6
     *
     * @var \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCloud\CCloud_BeginHTTPUpload_Response\HTTPHeaders>
     */
    protected $request_headers = null;

    /**
     * Check if 'ugcid' has a value
     *
     * @return bool
     */
    public function hasUgcid()
    {
        return $this->ugcid !== null;
    }

    /**
     * Get 'ugcid' value
     *
     * @return int
     */
    public function getUgcid()
    {
        return $this->ugcid;
    }

    /**
     * Set 'ugcid' value
     *
     * @param int $value
     */
    public function setUgcid($value = null)
    {
        $this->ugcid = $value;
    }

    /**
     * Check if 'timestamp' has a value
     *
     * @return bool
     */
    public function hasTimestamp()
    {
        return $this->timestamp !== null;
    }

    /**
     * Get 'timestamp' value
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * Set 'timestamp' value
     *
     * @param int $value
     */
    public function setTimestamp($value = null)
    {
        $this->timestamp = $value;
    }

    /**
     * Check if 'url_host' has a value
     *
     * @return bool
     */
    public function hasUrlHost()
    {
        return $this->url_host !== null;
    }

    /**
     * Get 'url_host' value
     *
     * @return string
     */
    public function getUrlHost()
    {
        return $this->url_host;
    }

    /**
     * Set 'url_host' value
     *
     * @param string $value
     */
    public function setUrlHost($value = null)
    {
        $this->url_host = $value;
    }

    /**
     * Check if 'url_path' has a value
     *
     * @return bool
     */
    public function hasUrlPath()
    {
        return $this->url_path !== null;
    }

    /**
     * Get 'url_path' value
     *
     * @return string
     */
    public function getUrlPath()
    {
        return $this->url_path;
    }

    /**
     * Set 'url_path' value
     *
     * @param string $value
     */
    public function setUrlPath($value = null)
    {
        $this->url_path = $value;
    }

    /**
     * Check if 'use_https' has a value
     *
     * @return bool
     */
    public function hasUseHttps()
    {
        return $this->use_https !== null;
    }

    /**
     * Get 'use_https' value
     *
     * @return bool
     */
    public function getUseHttps()
    {
        return $this->use_https;
    }

    /**
     * Set 'use_https' value
     *
     * @param bool $value
     */
    public function setUseHttps($value = null)
    {
        $this->use_https = $value;
    }

    /**
     * Check if 'request_headers' has a value
     *
     * @return bool
     */
    public function hasRequestHeadersList()
    {
        return $this->request_headers !== null;
    }

    /**
     * Get 'request_headers' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCloud\CCloud_BeginHTTPUpload_Response\HTTPHeaders>
     */
    public function getRequestHeadersList()
    {
        return $this->request_headers;
    }

    /**
     * Set 'request_headers' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCloud\CCloud_BeginHTTPUpload_Response\HTTPHeaders> $value
     */
    public function setRequestHeadersList(\Protobuf\Collection $value = null)
    {
        $this->request_headers = $value;
    }

    /**
     * Add a new element to 'request_headers'
     *
     * @param
     * \SteamKit\Base\Unified\SteamMsgCloud\CCloud_BeginHTTPUpload_Response\HTTPHeaders
     * $value
     */
    public function addRequestHeaders(\SteamKit\Base\Unified\SteamMsgCloud\CCloud_BeginHTTPUpload_Response\HTTPHeaders $value)
    {
        if ($this->request_headers === null) {
            $this->request_headers = new \Protobuf\MessageCollection();
        }

        $this->request_headers->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'ugcid' => null,
            'timestamp' => null,
            'url_host' => null,
            'url_path' => null,
            'use_https' => null,
            'request_headers' => []
        ], $values);

        $message->setUgcid($values['ugcid']);
        $message->setTimestamp($values['timestamp']);
        $message->setUrlHost($values['url_host']);
        $message->setUrlPath($values['url_path']);
        $message->setUseHttps($values['use_https']);

        foreach ($values['request_headers'] as $item) {
            $message->addRequestHeaders($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CCloud_BeginHTTPUpload_Response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'ugcid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'timestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'url_host',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'url_path',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'use_https',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'request_headers',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgCloud.CCloud_BeginHTTPUpload_Response.HTTPHeaders'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->ugcid !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->ugcid);
        }

        if ($this->timestamp !== null) {
            $writer->writeVarint($stream, 21);
            $writer->writeFixed32($stream, $this->timestamp);
        }

        if ($this->url_host !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->url_host);
        }

        if ($this->url_path !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->url_path);
        }

        if ($this->use_https !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->use_https);
        }

        if ($this->request_headers !== null) {
            foreach ($this->request_headers as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->ugcid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->timestamp = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->url_host = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->url_path = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->use_https = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\Unified\SteamMsgCloud\CCloud_BeginHTTPUpload_Response\HTTPHeaders();

                if ($this->request_headers === null) {
                    $this->request_headers = new \Protobuf\MessageCollection();
                }

                $this->request_headers->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->ugcid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->timestamp !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->url_host !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->url_host);
        }

        if ($this->url_path !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->url_path);
        }

        if ($this->use_https !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->request_headers !== null) {
            foreach ($this->request_headers as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->ugcid = null;
        $this->timestamp = null;
        $this->url_host = null;
        $this->url_path = null;
        $this->use_https = null;
        $this->request_headers = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgCloud\CCloud_BeginHTTPUpload_Response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->ugcid = ($message->ugcid !== null) ? $message->ugcid : $this->ugcid;
        $this->timestamp = ($message->timestamp !== null) ? $message->timestamp : $this->timestamp;
        $this->url_host = ($message->url_host !== null) ? $message->url_host : $this->url_host;
        $this->url_path = ($message->url_path !== null) ? $message->url_path : $this->url_path;
        $this->use_https = ($message->use_https !== null) ? $message->use_https : $this->use_https;
        $this->request_headers = ($message->request_headers !== null) ? $message->request_headers : $this->request_headers;
    }


}

