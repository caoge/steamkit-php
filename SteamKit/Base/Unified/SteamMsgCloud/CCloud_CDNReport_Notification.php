<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_cloud.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgCloud;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgCloud.CCloud_CDNReport_Notification
 */
class CCloud_CDNReport_Notification extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steamid optional fixed64 = 1
     *
     * @var int
     */
    protected $steamid = null;

    /**
     * url optional string = 2
     *
     * @var string
     */
    protected $url = null;

    /**
     * success optional bool = 3
     *
     * @var bool
     */
    protected $success = null;

    /**
     * http_status_code optional uint32 = 4
     *
     * @var int
     */
    protected $http_status_code = null;

    /**
     * expected_bytes optional uint64 = 5
     *
     * @var int
     */
    protected $expected_bytes = null;

    /**
     * received_bytes optional uint64 = 6
     *
     * @var int
     */
    protected $received_bytes = null;

    /**
     * duration optional uint32 = 7
     *
     * @var int
     */
    protected $duration = null;

    /**
     * Check if 'steamid' has a value
     *
     * @return bool
     */
    public function hasSteamid()
    {
        return $this->steamid !== null;
    }

    /**
     * Get 'steamid' value
     *
     * @return int
     */
    public function getSteamid()
    {
        return $this->steamid;
    }

    /**
     * Set 'steamid' value
     *
     * @param int $value
     */
    public function setSteamid($value = null)
    {
        $this->steamid = $value;
    }

    /**
     * Check if 'url' has a value
     *
     * @return bool
     */
    public function hasUrl()
    {
        return $this->url !== null;
    }

    /**
     * Get 'url' value
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set 'url' value
     *
     * @param string $value
     */
    public function setUrl($value = null)
    {
        $this->url = $value;
    }

    /**
     * Check if 'success' has a value
     *
     * @return bool
     */
    public function hasSuccess()
    {
        return $this->success !== null;
    }

    /**
     * Get 'success' value
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->success;
    }

    /**
     * Set 'success' value
     *
     * @param bool $value
     */
    public function setSuccess($value = null)
    {
        $this->success = $value;
    }

    /**
     * Check if 'http_status_code' has a value
     *
     * @return bool
     */
    public function hasHttpStatusCode()
    {
        return $this->http_status_code !== null;
    }

    /**
     * Get 'http_status_code' value
     *
     * @return int
     */
    public function getHttpStatusCode()
    {
        return $this->http_status_code;
    }

    /**
     * Set 'http_status_code' value
     *
     * @param int $value
     */
    public function setHttpStatusCode($value = null)
    {
        $this->http_status_code = $value;
    }

    /**
     * Check if 'expected_bytes' has a value
     *
     * @return bool
     */
    public function hasExpectedBytes()
    {
        return $this->expected_bytes !== null;
    }

    /**
     * Get 'expected_bytes' value
     *
     * @return int
     */
    public function getExpectedBytes()
    {
        return $this->expected_bytes;
    }

    /**
     * Set 'expected_bytes' value
     *
     * @param int $value
     */
    public function setExpectedBytes($value = null)
    {
        $this->expected_bytes = $value;
    }

    /**
     * Check if 'received_bytes' has a value
     *
     * @return bool
     */
    public function hasReceivedBytes()
    {
        return $this->received_bytes !== null;
    }

    /**
     * Get 'received_bytes' value
     *
     * @return int
     */
    public function getReceivedBytes()
    {
        return $this->received_bytes;
    }

    /**
     * Set 'received_bytes' value
     *
     * @param int $value
     */
    public function setReceivedBytes($value = null)
    {
        $this->received_bytes = $value;
    }

    /**
     * Check if 'duration' has a value
     *
     * @return bool
     */
    public function hasDuration()
    {
        return $this->duration !== null;
    }

    /**
     * Get 'duration' value
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->duration;
    }

    /**
     * Set 'duration' value
     *
     * @param int $value
     */
    public function setDuration($value = null)
    {
        $this->duration = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steamid' => null,
            'url' => null,
            'success' => null,
            'http_status_code' => null,
            'expected_bytes' => null,
            'received_bytes' => null,
            'duration' => null
        ], $values);

        $message->setSteamid($values['steamid']);
        $message->setUrl($values['url']);
        $message->setSuccess($values['success']);
        $message->setHttpStatusCode($values['http_status_code']);
        $message->setExpectedBytes($values['expected_bytes']);
        $message->setReceivedBytes($values['received_bytes']);
        $message->setDuration($values['duration']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CCloud_CDNReport_Notification',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steamid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'success',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'http_status_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'expected_bytes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'received_bytes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'duration',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steamid !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->steamid);
        }

        if ($this->url !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->url);
        }

        if ($this->success !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->success);
        }

        if ($this->http_status_code !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->http_status_code);
        }

        if ($this->expected_bytes !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->expected_bytes);
        }

        if ($this->received_bytes !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->received_bytes);
        }

        if ($this->duration !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->duration);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steamid = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->url = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->success = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->http_status_code = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->expected_bytes = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->received_bytes = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->duration = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steamid !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->url !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->url);
        }

        if ($this->success !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->http_status_code !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->http_status_code);
        }

        if ($this->expected_bytes !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->expected_bytes);
        }

        if ($this->received_bytes !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->received_bytes);
        }

        if ($this->duration !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->duration);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steamid = null;
        $this->url = null;
        $this->success = null;
        $this->http_status_code = null;
        $this->expected_bytes = null;
        $this->received_bytes = null;
        $this->duration = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgCloud\CCloud_CDNReport_Notification) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steamid = ($message->steamid !== null) ? $message->steamid : $this->steamid;
        $this->url = ($message->url !== null) ? $message->url : $this->url;
        $this->success = ($message->success !== null) ? $message->success : $this->success;
        $this->http_status_code = ($message->http_status_code !== null) ? $message->http_status_code : $this->http_status_code;
        $this->expected_bytes = ($message->expected_bytes !== null) ? $message->expected_bytes : $this->expected_bytes;
        $this->received_bytes = ($message->received_bytes !== null) ? $message->received_bytes : $this->received_bytes;
        $this->duration = ($message->duration !== null) ? $message->duration : $this->duration;
    }


}

