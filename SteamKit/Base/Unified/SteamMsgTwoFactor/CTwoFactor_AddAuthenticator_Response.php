<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_twofactor.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgTwoFactor;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgTwoFactor.CTwoFactor_AddAuthenticator_Response
 */
class CTwoFactor_AddAuthenticator_Response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * shared_secret optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $shared_secret = null;

    /**
     * serial_number optional fixed64 = 2
     *
     * @var int
     */
    protected $serial_number = null;

    /**
     * revocation_code optional string = 3
     *
     * @var string
     */
    protected $revocation_code = null;

    /**
     * uri optional string = 4
     *
     * @var string
     */
    protected $uri = null;

    /**
     * server_time optional uint64 = 5
     *
     * @var int
     */
    protected $server_time = null;

    /**
     * account_name optional string = 6
     *
     * @var string
     */
    protected $account_name = null;

    /**
     * token_gid optional string = 7
     *
     * @var string
     */
    protected $token_gid = null;

    /**
     * identity_secret optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $identity_secret = null;

    /**
     * secret_1 optional bytes = 9
     *
     * @var \Protobuf\Stream
     */
    protected $secret_1 = null;

    /**
     * status optional int32 = 10
     *
     * @var int
     */
    protected $status = null;

    /**
     * Check if 'shared_secret' has a value
     *
     * @return bool
     */
    public function hasSharedSecret()
    {
        return $this->shared_secret !== null;
    }

    /**
     * Get 'shared_secret' value
     *
     * @return \Protobuf\Stream
     */
    public function getSharedSecret()
    {
        return $this->shared_secret;
    }

    /**
     * Set 'shared_secret' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSharedSecret($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->shared_secret = $value;
    }

    /**
     * Check if 'serial_number' has a value
     *
     * @return bool
     */
    public function hasSerialNumber()
    {
        return $this->serial_number !== null;
    }

    /**
     * Get 'serial_number' value
     *
     * @return int
     */
    public function getSerialNumber()
    {
        return $this->serial_number;
    }

    /**
     * Set 'serial_number' value
     *
     * @param int $value
     */
    public function setSerialNumber($value = null)
    {
        $this->serial_number = $value;
    }

    /**
     * Check if 'revocation_code' has a value
     *
     * @return bool
     */
    public function hasRevocationCode()
    {
        return $this->revocation_code !== null;
    }

    /**
     * Get 'revocation_code' value
     *
     * @return string
     */
    public function getRevocationCode()
    {
        return $this->revocation_code;
    }

    /**
     * Set 'revocation_code' value
     *
     * @param string $value
     */
    public function setRevocationCode($value = null)
    {
        $this->revocation_code = $value;
    }

    /**
     * Check if 'uri' has a value
     *
     * @return bool
     */
    public function hasUri()
    {
        return $this->uri !== null;
    }

    /**
     * Get 'uri' value
     *
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }

    /**
     * Set 'uri' value
     *
     * @param string $value
     */
    public function setUri($value = null)
    {
        $this->uri = $value;
    }

    /**
     * Check if 'server_time' has a value
     *
     * @return bool
     */
    public function hasServerTime()
    {
        return $this->server_time !== null;
    }

    /**
     * Get 'server_time' value
     *
     * @return int
     */
    public function getServerTime()
    {
        return $this->server_time;
    }

    /**
     * Set 'server_time' value
     *
     * @param int $value
     */
    public function setServerTime($value = null)
    {
        $this->server_time = $value;
    }

    /**
     * Check if 'account_name' has a value
     *
     * @return bool
     */
    public function hasAccountName()
    {
        return $this->account_name !== null;
    }

    /**
     * Get 'account_name' value
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->account_name;
    }

    /**
     * Set 'account_name' value
     *
     * @param string $value
     */
    public function setAccountName($value = null)
    {
        $this->account_name = $value;
    }

    /**
     * Check if 'token_gid' has a value
     *
     * @return bool
     */
    public function hasTokenGid()
    {
        return $this->token_gid !== null;
    }

    /**
     * Get 'token_gid' value
     *
     * @return string
     */
    public function getTokenGid()
    {
        return $this->token_gid;
    }

    /**
     * Set 'token_gid' value
     *
     * @param string $value
     */
    public function setTokenGid($value = null)
    {
        $this->token_gid = $value;
    }

    /**
     * Check if 'identity_secret' has a value
     *
     * @return bool
     */
    public function hasIdentitySecret()
    {
        return $this->identity_secret !== null;
    }

    /**
     * Get 'identity_secret' value
     *
     * @return \Protobuf\Stream
     */
    public function getIdentitySecret()
    {
        return $this->identity_secret;
    }

    /**
     * Set 'identity_secret' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setIdentitySecret($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->identity_secret = $value;
    }

    /**
     * Check if 'secret_1' has a value
     *
     * @return bool
     */
    public function hasSecret1()
    {
        return $this->secret_1 !== null;
    }

    /**
     * Get 'secret_1' value
     *
     * @return \Protobuf\Stream
     */
    public function getSecret1()
    {
        return $this->secret_1;
    }

    /**
     * Set 'secret_1' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSecret1($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->secret_1 = $value;
    }

    /**
     * Check if 'status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->status !== null;
    }

    /**
     * Get 'status' value
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set 'status' value
     *
     * @param int $value
     */
    public function setStatus($value = null)
    {
        $this->status = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'shared_secret' => null,
            'serial_number' => null,
            'revocation_code' => null,
            'uri' => null,
            'server_time' => null,
            'account_name' => null,
            'token_gid' => null,
            'identity_secret' => null,
            'secret_1' => null,
            'status' => null
        ], $values);

        $message->setSharedSecret($values['shared_secret']);
        $message->setSerialNumber($values['serial_number']);
        $message->setRevocationCode($values['revocation_code']);
        $message->setUri($values['uri']);
        $message->setServerTime($values['server_time']);
        $message->setAccountName($values['account_name']);
        $message->setTokenGid($values['token_gid']);
        $message->setIdentitySecret($values['identity_secret']);
        $message->setSecret1($values['secret_1']);
        $message->setStatus($values['status']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CTwoFactor_AddAuthenticator_Response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'shared_secret',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'serial_number',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'revocation_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'uri',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'server_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'account_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'token_gid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'identity_secret',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'secret_1',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->shared_secret !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->shared_secret);
        }

        if ($this->serial_number !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->serial_number);
        }

        if ($this->revocation_code !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->revocation_code);
        }

        if ($this->uri !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->uri);
        }

        if ($this->server_time !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->server_time);
        }

        if ($this->account_name !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->account_name);
        }

        if ($this->token_gid !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->token_gid);
        }

        if ($this->identity_secret !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->identity_secret);
        }

        if ($this->secret_1 !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeByteStream($stream, $this->secret_1);
        }

        if ($this->status !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->status);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->shared_secret = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->serial_number = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->revocation_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->uri = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->server_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->account_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->token_gid = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->identity_secret = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->secret_1 = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->status = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->shared_secret !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->shared_secret);
        }

        if ($this->serial_number !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->revocation_code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->revocation_code);
        }

        if ($this->uri !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->uri);
        }

        if ($this->server_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->server_time);
        }

        if ($this->account_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->account_name);
        }

        if ($this->token_gid !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->token_gid);
        }

        if ($this->identity_secret !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->identity_secret);
        }

        if ($this->secret_1 !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->secret_1);
        }

        if ($this->status !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->status);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->shared_secret = null;
        $this->serial_number = null;
        $this->revocation_code = null;
        $this->uri = null;
        $this->server_time = null;
        $this->account_name = null;
        $this->token_gid = null;
        $this->identity_secret = null;
        $this->secret_1 = null;
        $this->status = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgTwoFactor\CTwoFactor_AddAuthenticator_Response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->shared_secret = ($message->shared_secret !== null) ? $message->shared_secret : $this->shared_secret;
        $this->serial_number = ($message->serial_number !== null) ? $message->serial_number : $this->serial_number;
        $this->revocation_code = ($message->revocation_code !== null) ? $message->revocation_code : $this->revocation_code;
        $this->uri = ($message->uri !== null) ? $message->uri : $this->uri;
        $this->server_time = ($message->server_time !== null) ? $message->server_time : $this->server_time;
        $this->account_name = ($message->account_name !== null) ? $message->account_name : $this->account_name;
        $this->token_gid = ($message->token_gid !== null) ? $message->token_gid : $this->token_gid;
        $this->identity_secret = ($message->identity_secret !== null) ? $message->identity_secret : $this->identity_secret;
        $this->secret_1 = ($message->secret_1 !== null) ? $message->secret_1 : $this->secret_1;
        $this->status = ($message->status !== null) ? $message->status : $this->status;
    }


}

