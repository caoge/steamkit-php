<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_twofactor.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgTwoFactor;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgTwoFactor.CTwoFactor_Status_Response
 */
class CTwoFactor_Status_Response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * state optional uint32 = 1
     *
     * @var int
     */
    protected $state = null;

    /**
     * inactivation_reason optional uint32 = 2
     *
     * @var int
     */
    protected $inactivation_reason = null;

    /**
     * authenticator_type optional uint32 = 3
     *
     * @var int
     */
    protected $authenticator_type = null;

    /**
     * authenticator_allowed optional bool = 4
     *
     * @var bool
     */
    protected $authenticator_allowed = null;

    /**
     * steamguard_scheme optional uint32 = 5
     *
     * @var int
     */
    protected $steamguard_scheme = null;

    /**
     * token_gid optional string = 6
     *
     * @var string
     */
    protected $token_gid = null;

    /**
     * email_validated optional bool = 7
     *
     * @var bool
     */
    protected $email_validated = null;

    /**
     * device_identifier optional string = 8
     *
     * @var string
     */
    protected $device_identifier = null;

    /**
     * time_created optional uint32 = 9
     *
     * @var int
     */
    protected $time_created = null;

    /**
     * revocation_attempts_remaining optional uint32 = 10
     *
     * @var int
     */
    protected $revocation_attempts_remaining = null;

    /**
     * classified_agent optional string = 11
     *
     * @var string
     */
    protected $classified_agent = null;

    /**
     * allow_external_authenticator optional bool = 12
     *
     * @var bool
     */
    protected $allow_external_authenticator = null;

    /**
     * external_authenticator_type optional uint32 = 13
     *
     * @var int
     */
    protected $external_authenticator_type = null;

    /**
     * Check if 'state' has a value
     *
     * @return bool
     */
    public function hasState()
    {
        return $this->state !== null;
    }

    /**
     * Get 'state' value
     *
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set 'state' value
     *
     * @param int $value
     */
    public function setState($value = null)
    {
        $this->state = $value;
    }

    /**
     * Check if 'inactivation_reason' has a value
     *
     * @return bool
     */
    public function hasInactivationReason()
    {
        return $this->inactivation_reason !== null;
    }

    /**
     * Get 'inactivation_reason' value
     *
     * @return int
     */
    public function getInactivationReason()
    {
        return $this->inactivation_reason;
    }

    /**
     * Set 'inactivation_reason' value
     *
     * @param int $value
     */
    public function setInactivationReason($value = null)
    {
        $this->inactivation_reason = $value;
    }

    /**
     * Check if 'authenticator_type' has a value
     *
     * @return bool
     */
    public function hasAuthenticatorType()
    {
        return $this->authenticator_type !== null;
    }

    /**
     * Get 'authenticator_type' value
     *
     * @return int
     */
    public function getAuthenticatorType()
    {
        return $this->authenticator_type;
    }

    /**
     * Set 'authenticator_type' value
     *
     * @param int $value
     */
    public function setAuthenticatorType($value = null)
    {
        $this->authenticator_type = $value;
    }

    /**
     * Check if 'authenticator_allowed' has a value
     *
     * @return bool
     */
    public function hasAuthenticatorAllowed()
    {
        return $this->authenticator_allowed !== null;
    }

    /**
     * Get 'authenticator_allowed' value
     *
     * @return bool
     */
    public function getAuthenticatorAllowed()
    {
        return $this->authenticator_allowed;
    }

    /**
     * Set 'authenticator_allowed' value
     *
     * @param bool $value
     */
    public function setAuthenticatorAllowed($value = null)
    {
        $this->authenticator_allowed = $value;
    }

    /**
     * Check if 'steamguard_scheme' has a value
     *
     * @return bool
     */
    public function hasSteamguardScheme()
    {
        return $this->steamguard_scheme !== null;
    }

    /**
     * Get 'steamguard_scheme' value
     *
     * @return int
     */
    public function getSteamguardScheme()
    {
        return $this->steamguard_scheme;
    }

    /**
     * Set 'steamguard_scheme' value
     *
     * @param int $value
     */
    public function setSteamguardScheme($value = null)
    {
        $this->steamguard_scheme = $value;
    }

    /**
     * Check if 'token_gid' has a value
     *
     * @return bool
     */
    public function hasTokenGid()
    {
        return $this->token_gid !== null;
    }

    /**
     * Get 'token_gid' value
     *
     * @return string
     */
    public function getTokenGid()
    {
        return $this->token_gid;
    }

    /**
     * Set 'token_gid' value
     *
     * @param string $value
     */
    public function setTokenGid($value = null)
    {
        $this->token_gid = $value;
    }

    /**
     * Check if 'email_validated' has a value
     *
     * @return bool
     */
    public function hasEmailValidated()
    {
        return $this->email_validated !== null;
    }

    /**
     * Get 'email_validated' value
     *
     * @return bool
     */
    public function getEmailValidated()
    {
        return $this->email_validated;
    }

    /**
     * Set 'email_validated' value
     *
     * @param bool $value
     */
    public function setEmailValidated($value = null)
    {
        $this->email_validated = $value;
    }

    /**
     * Check if 'device_identifier' has a value
     *
     * @return bool
     */
    public function hasDeviceIdentifier()
    {
        return $this->device_identifier !== null;
    }

    /**
     * Get 'device_identifier' value
     *
     * @return string
     */
    public function getDeviceIdentifier()
    {
        return $this->device_identifier;
    }

    /**
     * Set 'device_identifier' value
     *
     * @param string $value
     */
    public function setDeviceIdentifier($value = null)
    {
        $this->device_identifier = $value;
    }

    /**
     * Check if 'time_created' has a value
     *
     * @return bool
     */
    public function hasTimeCreated()
    {
        return $this->time_created !== null;
    }

    /**
     * Get 'time_created' value
     *
     * @return int
     */
    public function getTimeCreated()
    {
        return $this->time_created;
    }

    /**
     * Set 'time_created' value
     *
     * @param int $value
     */
    public function setTimeCreated($value = null)
    {
        $this->time_created = $value;
    }

    /**
     * Check if 'revocation_attempts_remaining' has a value
     *
     * @return bool
     */
    public function hasRevocationAttemptsRemaining()
    {
        return $this->revocation_attempts_remaining !== null;
    }

    /**
     * Get 'revocation_attempts_remaining' value
     *
     * @return int
     */
    public function getRevocationAttemptsRemaining()
    {
        return $this->revocation_attempts_remaining;
    }

    /**
     * Set 'revocation_attempts_remaining' value
     *
     * @param int $value
     */
    public function setRevocationAttemptsRemaining($value = null)
    {
        $this->revocation_attempts_remaining = $value;
    }

    /**
     * Check if 'classified_agent' has a value
     *
     * @return bool
     */
    public function hasClassifiedAgent()
    {
        return $this->classified_agent !== null;
    }

    /**
     * Get 'classified_agent' value
     *
     * @return string
     */
    public function getClassifiedAgent()
    {
        return $this->classified_agent;
    }

    /**
     * Set 'classified_agent' value
     *
     * @param string $value
     */
    public function setClassifiedAgent($value = null)
    {
        $this->classified_agent = $value;
    }

    /**
     * Check if 'allow_external_authenticator' has a value
     *
     * @return bool
     */
    public function hasAllowExternalAuthenticator()
    {
        return $this->allow_external_authenticator !== null;
    }

    /**
     * Get 'allow_external_authenticator' value
     *
     * @return bool
     */
    public function getAllowExternalAuthenticator()
    {
        return $this->allow_external_authenticator;
    }

    /**
     * Set 'allow_external_authenticator' value
     *
     * @param bool $value
     */
    public function setAllowExternalAuthenticator($value = null)
    {
        $this->allow_external_authenticator = $value;
    }

    /**
     * Check if 'external_authenticator_type' has a value
     *
     * @return bool
     */
    public function hasExternalAuthenticatorType()
    {
        return $this->external_authenticator_type !== null;
    }

    /**
     * Get 'external_authenticator_type' value
     *
     * @return int
     */
    public function getExternalAuthenticatorType()
    {
        return $this->external_authenticator_type;
    }

    /**
     * Set 'external_authenticator_type' value
     *
     * @param int $value
     */
    public function setExternalAuthenticatorType($value = null)
    {
        $this->external_authenticator_type = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'state' => null,
            'inactivation_reason' => null,
            'authenticator_type' => null,
            'authenticator_allowed' => null,
            'steamguard_scheme' => null,
            'token_gid' => null,
            'email_validated' => null,
            'device_identifier' => null,
            'time_created' => null,
            'revocation_attempts_remaining' => null,
            'classified_agent' => null,
            'allow_external_authenticator' => null,
            'external_authenticator_type' => null
        ], $values);

        $message->setState($values['state']);
        $message->setInactivationReason($values['inactivation_reason']);
        $message->setAuthenticatorType($values['authenticator_type']);
        $message->setAuthenticatorAllowed($values['authenticator_allowed']);
        $message->setSteamguardScheme($values['steamguard_scheme']);
        $message->setTokenGid($values['token_gid']);
        $message->setEmailValidated($values['email_validated']);
        $message->setDeviceIdentifier($values['device_identifier']);
        $message->setTimeCreated($values['time_created']);
        $message->setRevocationAttemptsRemaining($values['revocation_attempts_remaining']);
        $message->setClassifiedAgent($values['classified_agent']);
        $message->setAllowExternalAuthenticator($values['allow_external_authenticator']);
        $message->setExternalAuthenticatorType($values['external_authenticator_type']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CTwoFactor_Status_Response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'inactivation_reason',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'authenticator_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'authenticator_allowed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'steamguard_scheme',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'token_gid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'email_validated',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'device_identifier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'time_created',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'revocation_attempts_remaining',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'classified_agent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'allow_external_authenticator',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'external_authenticator_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->state !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->state);
        }

        if ($this->inactivation_reason !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->inactivation_reason);
        }

        if ($this->authenticator_type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->authenticator_type);
        }

        if ($this->authenticator_allowed !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->authenticator_allowed);
        }

        if ($this->steamguard_scheme !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->steamguard_scheme);
        }

        if ($this->token_gid !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->token_gid);
        }

        if ($this->email_validated !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->email_validated);
        }

        if ($this->device_identifier !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->device_identifier);
        }

        if ($this->time_created !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->time_created);
        }

        if ($this->revocation_attempts_remaining !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->revocation_attempts_remaining);
        }

        if ($this->classified_agent !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->classified_agent);
        }

        if ($this->allow_external_authenticator !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->allow_external_authenticator);
        }

        if ($this->external_authenticator_type !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->external_authenticator_type);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->state = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->inactivation_reason = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->authenticator_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->authenticator_allowed = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->steamguard_scheme = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->token_gid = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->email_validated = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_identifier = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->time_created = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->revocation_attempts_remaining = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->classified_agent = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->allow_external_authenticator = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->external_authenticator_type = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->state !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->state);
        }

        if ($this->inactivation_reason !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->inactivation_reason);
        }

        if ($this->authenticator_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->authenticator_type);
        }

        if ($this->authenticator_allowed !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->steamguard_scheme !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->steamguard_scheme);
        }

        if ($this->token_gid !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->token_gid);
        }

        if ($this->email_validated !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->device_identifier !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_identifier);
        }

        if ($this->time_created !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->time_created);
        }

        if ($this->revocation_attempts_remaining !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->revocation_attempts_remaining);
        }

        if ($this->classified_agent !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->classified_agent);
        }

        if ($this->allow_external_authenticator !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->external_authenticator_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->external_authenticator_type);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->state = null;
        $this->inactivation_reason = null;
        $this->authenticator_type = null;
        $this->authenticator_allowed = null;
        $this->steamguard_scheme = null;
        $this->token_gid = null;
        $this->email_validated = null;
        $this->device_identifier = null;
        $this->time_created = null;
        $this->revocation_attempts_remaining = null;
        $this->classified_agent = null;
        $this->allow_external_authenticator = null;
        $this->external_authenticator_type = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgTwoFactor\CTwoFactor_Status_Response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->state = ($message->state !== null) ? $message->state : $this->state;
        $this->inactivation_reason = ($message->inactivation_reason !== null) ? $message->inactivation_reason : $this->inactivation_reason;
        $this->authenticator_type = ($message->authenticator_type !== null) ? $message->authenticator_type : $this->authenticator_type;
        $this->authenticator_allowed = ($message->authenticator_allowed !== null) ? $message->authenticator_allowed : $this->authenticator_allowed;
        $this->steamguard_scheme = ($message->steamguard_scheme !== null) ? $message->steamguard_scheme : $this->steamguard_scheme;
        $this->token_gid = ($message->token_gid !== null) ? $message->token_gid : $this->token_gid;
        $this->email_validated = ($message->email_validated !== null) ? $message->email_validated : $this->email_validated;
        $this->device_identifier = ($message->device_identifier !== null) ? $message->device_identifier : $this->device_identifier;
        $this->time_created = ($message->time_created !== null) ? $message->time_created : $this->time_created;
        $this->revocation_attempts_remaining = ($message->revocation_attempts_remaining !== null) ? $message->revocation_attempts_remaining : $this->revocation_attempts_remaining;
        $this->classified_agent = ($message->classified_agent !== null) ? $message->classified_agent : $this->classified_agent;
        $this->allow_external_authenticator = ($message->allow_external_authenticator !== null) ? $message->allow_external_authenticator : $this->allow_external_authenticator;
        $this->external_authenticator_type = ($message->external_authenticator_type !== null) ? $message->external_authenticator_type : $this->external_authenticator_type;
    }


}

