<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_twofactor.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgTwoFactor;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgTwoFactor.CTwoFactor_RemoveAuthenticator_Request
 */
class CTwoFactor_RemoveAuthenticator_Request extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * revocation_code optional string = 2
     *
     * @var string
     */
    protected $revocation_code = null;

    /**
     * revocation_reason optional uint32 = 5
     *
     * @var int
     */
    protected $revocation_reason = null;

    /**
     * steamguard_scheme optional uint32 = 6
     *
     * @var int
     */
    protected $steamguard_scheme = null;

    /**
     * remove_all_steamguard_cookies optional bool = 7
     *
     * @var bool
     */
    protected $remove_all_steamguard_cookies = null;

    /**
     * Check if 'revocation_code' has a value
     *
     * @return bool
     */
    public function hasRevocationCode()
    {
        return $this->revocation_code !== null;
    }

    /**
     * Get 'revocation_code' value
     *
     * @return string
     */
    public function getRevocationCode()
    {
        return $this->revocation_code;
    }

    /**
     * Set 'revocation_code' value
     *
     * @param string $value
     */
    public function setRevocationCode($value = null)
    {
        $this->revocation_code = $value;
    }

    /**
     * Check if 'revocation_reason' has a value
     *
     * @return bool
     */
    public function hasRevocationReason()
    {
        return $this->revocation_reason !== null;
    }

    /**
     * Get 'revocation_reason' value
     *
     * @return int
     */
    public function getRevocationReason()
    {
        return $this->revocation_reason;
    }

    /**
     * Set 'revocation_reason' value
     *
     * @param int $value
     */
    public function setRevocationReason($value = null)
    {
        $this->revocation_reason = $value;
    }

    /**
     * Check if 'steamguard_scheme' has a value
     *
     * @return bool
     */
    public function hasSteamguardScheme()
    {
        return $this->steamguard_scheme !== null;
    }

    /**
     * Get 'steamguard_scheme' value
     *
     * @return int
     */
    public function getSteamguardScheme()
    {
        return $this->steamguard_scheme;
    }

    /**
     * Set 'steamguard_scheme' value
     *
     * @param int $value
     */
    public function setSteamguardScheme($value = null)
    {
        $this->steamguard_scheme = $value;
    }

    /**
     * Check if 'remove_all_steamguard_cookies' has a value
     *
     * @return bool
     */
    public function hasRemoveAllSteamguardCookies()
    {
        return $this->remove_all_steamguard_cookies !== null;
    }

    /**
     * Get 'remove_all_steamguard_cookies' value
     *
     * @return bool
     */
    public function getRemoveAllSteamguardCookies()
    {
        return $this->remove_all_steamguard_cookies;
    }

    /**
     * Set 'remove_all_steamguard_cookies' value
     *
     * @param bool $value
     */
    public function setRemoveAllSteamguardCookies($value = null)
    {
        $this->remove_all_steamguard_cookies = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'revocation_code' => null,
            'revocation_reason' => null,
            'steamguard_scheme' => null,
            'remove_all_steamguard_cookies' => null
        ], $values);

        $message->setRevocationCode($values['revocation_code']);
        $message->setRevocationReason($values['revocation_reason']);
        $message->setSteamguardScheme($values['steamguard_scheme']);
        $message->setRemoveAllSteamguardCookies($values['remove_all_steamguard_cookies']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CTwoFactor_RemoveAuthenticator_Request',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'revocation_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'revocation_reason',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'steamguard_scheme',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'remove_all_steamguard_cookies',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->revocation_code !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->revocation_code);
        }

        if ($this->revocation_reason !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->revocation_reason);
        }

        if ($this->steamguard_scheme !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->steamguard_scheme);
        }

        if ($this->remove_all_steamguard_cookies !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->remove_all_steamguard_cookies);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->revocation_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->revocation_reason = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->steamguard_scheme = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->remove_all_steamguard_cookies = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->revocation_code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->revocation_code);
        }

        if ($this->revocation_reason !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->revocation_reason);
        }

        if ($this->steamguard_scheme !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->steamguard_scheme);
        }

        if ($this->remove_all_steamguard_cookies !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->revocation_code = null;
        $this->revocation_reason = null;
        $this->steamguard_scheme = null;
        $this->remove_all_steamguard_cookies = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgTwoFactor\CTwoFactor_RemoveAuthenticator_Request) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->revocation_code = ($message->revocation_code !== null) ? $message->revocation_code : $this->revocation_code;
        $this->revocation_reason = ($message->revocation_reason !== null) ? $message->revocation_reason : $this->revocation_reason;
        $this->steamguard_scheme = ($message->steamguard_scheme !== null) ? $message->steamguard_scheme : $this->steamguard_scheme;
        $this->remove_all_steamguard_cookies = ($message->remove_all_steamguard_cookies !== null) ? $message->remove_all_steamguard_cookies : $this->remove_all_steamguard_cookies;
    }


}

