<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_depotbuilder.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgDepotBuilder;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgDepotBuilder.CContentBuilder_StartDepotUpload_Request
 */
class CContentBuilder_StartDepotUpload_Request extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * appid optional uint32 = 1
     *
     * @var int
     */
    protected $appid = null;

    /**
     * depotid optional uint32 = 2
     *
     * @var int
     */
    protected $depotid = null;

    /**
     * workshop_itemid optional uint64 = 3
     *
     * @var int
     */
    protected $workshop_itemid = null;

    /**
     * for_local_cs optional bool = 4
     *
     * @var bool
     */
    protected $for_local_cs = null;

    /**
     * baseline_manifestid optional uint64 = 5
     *
     * @var int
     */
    protected $baseline_manifestid = null;

    /**
     * manifest_size optional uint32 = 6
     *
     * @var int
     */
    protected $manifest_size = null;

    /**
     * Check if 'appid' has a value
     *
     * @return bool
     */
    public function hasAppid()
    {
        return $this->appid !== null;
    }

    /**
     * Get 'appid' value
     *
     * @return int
     */
    public function getAppid()
    {
        return $this->appid;
    }

    /**
     * Set 'appid' value
     *
     * @param int $value
     */
    public function setAppid($value = null)
    {
        $this->appid = $value;
    }

    /**
     * Check if 'depotid' has a value
     *
     * @return bool
     */
    public function hasDepotid()
    {
        return $this->depotid !== null;
    }

    /**
     * Get 'depotid' value
     *
     * @return int
     */
    public function getDepotid()
    {
        return $this->depotid;
    }

    /**
     * Set 'depotid' value
     *
     * @param int $value
     */
    public function setDepotid($value = null)
    {
        $this->depotid = $value;
    }

    /**
     * Check if 'workshop_itemid' has a value
     *
     * @return bool
     */
    public function hasWorkshopItemid()
    {
        return $this->workshop_itemid !== null;
    }

    /**
     * Get 'workshop_itemid' value
     *
     * @return int
     */
    public function getWorkshopItemid()
    {
        return $this->workshop_itemid;
    }

    /**
     * Set 'workshop_itemid' value
     *
     * @param int $value
     */
    public function setWorkshopItemid($value = null)
    {
        $this->workshop_itemid = $value;
    }

    /**
     * Check if 'for_local_cs' has a value
     *
     * @return bool
     */
    public function hasForLocalCs()
    {
        return $this->for_local_cs !== null;
    }

    /**
     * Get 'for_local_cs' value
     *
     * @return bool
     */
    public function getForLocalCs()
    {
        return $this->for_local_cs;
    }

    /**
     * Set 'for_local_cs' value
     *
     * @param bool $value
     */
    public function setForLocalCs($value = null)
    {
        $this->for_local_cs = $value;
    }

    /**
     * Check if 'baseline_manifestid' has a value
     *
     * @return bool
     */
    public function hasBaselineManifestid()
    {
        return $this->baseline_manifestid !== null;
    }

    /**
     * Get 'baseline_manifestid' value
     *
     * @return int
     */
    public function getBaselineManifestid()
    {
        return $this->baseline_manifestid;
    }

    /**
     * Set 'baseline_manifestid' value
     *
     * @param int $value
     */
    public function setBaselineManifestid($value = null)
    {
        $this->baseline_manifestid = $value;
    }

    /**
     * Check if 'manifest_size' has a value
     *
     * @return bool
     */
    public function hasManifestSize()
    {
        return $this->manifest_size !== null;
    }

    /**
     * Get 'manifest_size' value
     *
     * @return int
     */
    public function getManifestSize()
    {
        return $this->manifest_size;
    }

    /**
     * Set 'manifest_size' value
     *
     * @param int $value
     */
    public function setManifestSize($value = null)
    {
        $this->manifest_size = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'appid' => null,
            'depotid' => null,
            'workshop_itemid' => null,
            'for_local_cs' => null,
            'baseline_manifestid' => null,
            'manifest_size' => null
        ], $values);

        $message->setAppid($values['appid']);
        $message->setDepotid($values['depotid']);
        $message->setWorkshopItemid($values['workshop_itemid']);
        $message->setForLocalCs($values['for_local_cs']);
        $message->setBaselineManifestid($values['baseline_manifestid']);
        $message->setManifestSize($values['manifest_size']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CContentBuilder_StartDepotUpload_Request',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'appid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'depotid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'workshop_itemid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'for_local_cs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'baseline_manifestid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'manifest_size',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->appid !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->appid);
        }

        if ($this->depotid !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->depotid);
        }

        if ($this->workshop_itemid !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->workshop_itemid);
        }

        if ($this->for_local_cs !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->for_local_cs);
        }

        if ($this->baseline_manifestid !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->baseline_manifestid);
        }

        if ($this->manifest_size !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->manifest_size);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->appid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->depotid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->workshop_itemid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->for_local_cs = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->baseline_manifestid = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->manifest_size = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->appid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->appid);
        }

        if ($this->depotid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->depotid);
        }

        if ($this->workshop_itemid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->workshop_itemid);
        }

        if ($this->for_local_cs !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->baseline_manifestid !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->baseline_manifestid);
        }

        if ($this->manifest_size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->manifest_size);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->appid = null;
        $this->depotid = null;
        $this->workshop_itemid = null;
        $this->for_local_cs = null;
        $this->baseline_manifestid = null;
        $this->manifest_size = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgDepotBuilder\CContentBuilder_StartDepotUpload_Request) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->appid = ($message->appid !== null) ? $message->appid : $this->appid;
        $this->depotid = ($message->depotid !== null) ? $message->depotid : $this->depotid;
        $this->workshop_itemid = ($message->workshop_itemid !== null) ? $message->workshop_itemid : $this->workshop_itemid;
        $this->for_local_cs = ($message->for_local_cs !== null) ? $message->for_local_cs : $this->for_local_cs;
        $this->baseline_manifestid = ($message->baseline_manifestid !== null) ? $message->baseline_manifestid : $this->baseline_manifestid;
        $this->manifest_size = ($message->manifest_size !== null) ? $message->manifest_size : $this->manifest_size;
    }


}

