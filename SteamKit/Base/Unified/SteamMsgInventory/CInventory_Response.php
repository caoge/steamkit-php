<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_inventory.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgInventory;

/**
 * Protobuf message : SteamKit.Base.Unified.SteamMsgInventory.CInventory_Response
 */
class CInventory_Response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * etag optional string = 1
     *
     * @var string
     */
    protected $etag = null;

    /**
     * removeditemids repeated uint64 = 2
     *
     * @var \Protobuf\Collection
     */
    protected $removeditemids = null;

    /**
     * item_json optional string = 3
     *
     * @var string
     */
    protected $item_json = null;

    /**
     * itemdef_json optional string = 4
     *
     * @var string
     */
    protected $itemdef_json = null;

    /**
     * ticket optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $ticket = null;

    /**
     * Check if 'etag' has a value
     *
     * @return bool
     */
    public function hasEtag()
    {
        return $this->etag !== null;
    }

    /**
     * Get 'etag' value
     *
     * @return string
     */
    public function getEtag()
    {
        return $this->etag;
    }

    /**
     * Set 'etag' value
     *
     * @param string $value
     */
    public function setEtag($value = null)
    {
        $this->etag = $value;
    }

    /**
     * Check if 'removeditemids' has a value
     *
     * @return bool
     */
    public function hasRemoveditemidsList()
    {
        return $this->removeditemids !== null;
    }

    /**
     * Get 'removeditemids' value
     *
     * @return \Protobuf\Collection
     */
    public function getRemoveditemidsList()
    {
        return $this->removeditemids;
    }

    /**
     * Set 'removeditemids' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setRemoveditemidsList(\Protobuf\Collection $value = null)
    {
        $this->removeditemids = $value;
    }

    /**
     * Add a new element to 'removeditemids'
     *
     * @param int $value
     */
    public function addRemoveditemids($value)
    {
        if ($this->removeditemids === null) {
            $this->removeditemids = new \Protobuf\ScalarCollection();
        }

        $this->removeditemids->add($value);
    }

    /**
     * Check if 'item_json' has a value
     *
     * @return bool
     */
    public function hasItemJson()
    {
        return $this->item_json !== null;
    }

    /**
     * Get 'item_json' value
     *
     * @return string
     */
    public function getItemJson()
    {
        return $this->item_json;
    }

    /**
     * Set 'item_json' value
     *
     * @param string $value
     */
    public function setItemJson($value = null)
    {
        $this->item_json = $value;
    }

    /**
     * Check if 'itemdef_json' has a value
     *
     * @return bool
     */
    public function hasItemdefJson()
    {
        return $this->itemdef_json !== null;
    }

    /**
     * Get 'itemdef_json' value
     *
     * @return string
     */
    public function getItemdefJson()
    {
        return $this->itemdef_json;
    }

    /**
     * Set 'itemdef_json' value
     *
     * @param string $value
     */
    public function setItemdefJson($value = null)
    {
        $this->itemdef_json = $value;
    }

    /**
     * Check if 'ticket' has a value
     *
     * @return bool
     */
    public function hasTicket()
    {
        return $this->ticket !== null;
    }

    /**
     * Get 'ticket' value
     *
     * @return \Protobuf\Stream
     */
    public function getTicket()
    {
        return $this->ticket;
    }

    /**
     * Set 'ticket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setTicket($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->ticket = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'etag' => null,
            'removeditemids' => [],
            'item_json' => null,
            'itemdef_json' => null,
            'ticket' => null
        ], $values);

        $message->setEtag($values['etag']);
        $message->setItemJson($values['item_json']);
        $message->setItemdefJson($values['itemdef_json']);
        $message->setTicket($values['ticket']);

        foreach ($values['removeditemids'] as $item) {
            $message->addRemoveditemids($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CInventory_Response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'etag',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'removeditemids',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'item_json',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'itemdef_json',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'ticket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->etag !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->etag);
        }

        if ($this->removeditemids !== null) {
            foreach ($this->removeditemids as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->item_json !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->item_json);
        }

        if ($this->itemdef_json !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->itemdef_json);
        }

        if ($this->ticket !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->ticket);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->etag = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                if ($this->removeditemids === null) {
                    $this->removeditemids = new \Protobuf\ScalarCollection();
                }

                $this->removeditemids->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->item_json = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->itemdef_json = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->ticket = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->etag !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->etag);
        }

        if ($this->removeditemids !== null) {
            foreach ($this->removeditemids as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->item_json !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->item_json);
        }

        if ($this->itemdef_json !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->itemdef_json);
        }

        if ($this->ticket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->ticket);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->etag = null;
        $this->removeditemids = null;
        $this->item_json = null;
        $this->itemdef_json = null;
        $this->ticket = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgInventory\CInventory_Response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->etag = ($message->etag !== null) ? $message->etag : $this->etag;
        $this->removeditemids = ($message->removeditemids !== null) ? $message->removeditemids : $this->removeditemids;
        $this->item_json = ($message->item_json !== null) ? $message->item_json : $this->item_json;
        $this->itemdef_json = ($message->itemdef_json !== null) ? $message->itemdef_json : $this->itemdef_json;
        $this->ticket = ($message->ticket !== null) ? $message->ticket : $this->ticket;
    }


}

