<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_credentials.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgCredentials;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgCredentials.CCredentials_GetSteamGuardDetails_Response
 */
class CCredentials_GetSteamGuardDetails_Response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * is_steamguard_enabled optional bool = 1
     *
     * @var bool
     */
    protected $is_steamguard_enabled = null;

    /**
     * timestamp_steamguard_enabled optional fixed32 = 2
     *
     * @var int
     */
    protected $timestamp_steamguard_enabled = null;

    /**
     * deprecated_newauthentication repeated message = 3
     *
     * @var \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\NewAuthentication>
     */
    protected $deprecated_newauthentication = null;

    /**
     * deprecated_machine_name_userchosen optional string = 4
     *
     * @var string
     */
    protected $deprecated_machine_name_userchosen = null;

    /**
     * deprecated_timestamp_machine_steamguard_enabled optional fixed32 = 5
     *
     * @var int
     */
    protected $deprecated_timestamp_machine_steamguard_enabled = null;

    /**
     * deprecated_authentication_exists_from_geoloc_before_mintime optional bool = 6
     *
     * @var bool
     */
    protected $deprecated_authentication_exists_from_geoloc_before_mintime = null;

    /**
     * deprecated_machine_id optional uint64 = 7
     *
     * @var int
     */
    protected $deprecated_machine_id = null;

    /**
     * session_data repeated message = 8
     *
     * @var \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\SessionData>
     */
    protected $session_data = null;

    /**
     * is_twofactor_enabled optional bool = 9
     *
     * @var bool
     */
    protected $is_twofactor_enabled = null;

    /**
     * timestamp_twofactor_enabled optional fixed32 = 10
     *
     * @var int
     */
    protected $timestamp_twofactor_enabled = null;

    /**
     * is_phone_verified optional bool = 11
     *
     * @var bool
     */
    protected $is_phone_verified = null;

    /**
     * Check if 'is_steamguard_enabled' has a value
     *
     * @return bool
     */
    public function hasIsSteamguardEnabled()
    {
        return $this->is_steamguard_enabled !== null;
    }

    /**
     * Get 'is_steamguard_enabled' value
     *
     * @return bool
     */
    public function getIsSteamguardEnabled()
    {
        return $this->is_steamguard_enabled;
    }

    /**
     * Set 'is_steamguard_enabled' value
     *
     * @param bool $value
     */
    public function setIsSteamguardEnabled($value = null)
    {
        $this->is_steamguard_enabled = $value;
    }

    /**
     * Check if 'timestamp_steamguard_enabled' has a value
     *
     * @return bool
     */
    public function hasTimestampSteamguardEnabled()
    {
        return $this->timestamp_steamguard_enabled !== null;
    }

    /**
     * Get 'timestamp_steamguard_enabled' value
     *
     * @return int
     */
    public function getTimestampSteamguardEnabled()
    {
        return $this->timestamp_steamguard_enabled;
    }

    /**
     * Set 'timestamp_steamguard_enabled' value
     *
     * @param int $value
     */
    public function setTimestampSteamguardEnabled($value = null)
    {
        $this->timestamp_steamguard_enabled = $value;
    }

    /**
     * Check if 'deprecated_newauthentication' has a value
     *
     * @return bool
     */
    public function hasDeprecatedNewauthenticationList()
    {
        return $this->deprecated_newauthentication !== null;
    }

    /**
     * Get 'deprecated_newauthentication' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\NewAuthentication>
     */
    public function getDeprecatedNewauthenticationList()
    {
        return $this->deprecated_newauthentication;
    }

    /**
     * Set 'deprecated_newauthentication' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\NewAuthentication> $value
     */
    public function setDeprecatedNewauthenticationList(\Protobuf\Collection $value = null)
    {
        $this->deprecated_newauthentication = $value;
    }

    /**
     * Add a new element to 'deprecated_newauthentication'
     *
     * @param
     * \SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\NewAuthentication
     * $value
     */
    public function addDeprecatedNewauthentication(\SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\NewAuthentication $value)
    {
        if ($this->deprecated_newauthentication === null) {
            $this->deprecated_newauthentication = new \Protobuf\MessageCollection();
        }

        $this->deprecated_newauthentication->add($value);
    }

    /**
     * Check if 'deprecated_machine_name_userchosen' has a value
     *
     * @return bool
     */
    public function hasDeprecatedMachineNameUserchosen()
    {
        return $this->deprecated_machine_name_userchosen !== null;
    }

    /**
     * Get 'deprecated_machine_name_userchosen' value
     *
     * @return string
     */
    public function getDeprecatedMachineNameUserchosen()
    {
        return $this->deprecated_machine_name_userchosen;
    }

    /**
     * Set 'deprecated_machine_name_userchosen' value
     *
     * @param string $value
     */
    public function setDeprecatedMachineNameUserchosen($value = null)
    {
        $this->deprecated_machine_name_userchosen = $value;
    }

    /**
     * Check if 'deprecated_timestamp_machine_steamguard_enabled' has a value
     *
     * @return bool
     */
    public function hasDeprecatedTimestampMachineSteamguardEnabled()
    {
        return $this->deprecated_timestamp_machine_steamguard_enabled !== null;
    }

    /**
     * Get 'deprecated_timestamp_machine_steamguard_enabled' value
     *
     * @return int
     */
    public function getDeprecatedTimestampMachineSteamguardEnabled()
    {
        return $this->deprecated_timestamp_machine_steamguard_enabled;
    }

    /**
     * Set 'deprecated_timestamp_machine_steamguard_enabled' value
     *
     * @param int $value
     */
    public function setDeprecatedTimestampMachineSteamguardEnabled($value = null)
    {
        $this->deprecated_timestamp_machine_steamguard_enabled = $value;
    }

    /**
     * Check if 'deprecated_authentication_exists_from_geoloc_before_mintime' has a
     * value
     *
     * @return bool
     */
    public function hasDeprecatedAuthenticationExistsFromGeolocBeforeMintime()
    {
        return $this->deprecated_authentication_exists_from_geoloc_before_mintime !== null;
    }

    /**
     * Get 'deprecated_authentication_exists_from_geoloc_before_mintime' value
     *
     * @return bool
     */
    public function getDeprecatedAuthenticationExistsFromGeolocBeforeMintime()
    {
        return $this->deprecated_authentication_exists_from_geoloc_before_mintime;
    }

    /**
     * Set 'deprecated_authentication_exists_from_geoloc_before_mintime' value
     *
     * @param bool $value
     */
    public function setDeprecatedAuthenticationExistsFromGeolocBeforeMintime($value = null)
    {
        $this->deprecated_authentication_exists_from_geoloc_before_mintime = $value;
    }

    /**
     * Check if 'deprecated_machine_id' has a value
     *
     * @return bool
     */
    public function hasDeprecatedMachineId()
    {
        return $this->deprecated_machine_id !== null;
    }

    /**
     * Get 'deprecated_machine_id' value
     *
     * @return int
     */
    public function getDeprecatedMachineId()
    {
        return $this->deprecated_machine_id;
    }

    /**
     * Set 'deprecated_machine_id' value
     *
     * @param int $value
     */
    public function setDeprecatedMachineId($value = null)
    {
        $this->deprecated_machine_id = $value;
    }

    /**
     * Check if 'session_data' has a value
     *
     * @return bool
     */
    public function hasSessionDataList()
    {
        return $this->session_data !== null;
    }

    /**
     * Get 'session_data' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\SessionData>
     */
    public function getSessionDataList()
    {
        return $this->session_data;
    }

    /**
     * Set 'session_data' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\SessionData> $value
     */
    public function setSessionDataList(\Protobuf\Collection $value = null)
    {
        $this->session_data = $value;
    }

    /**
     * Add a new element to 'session_data'
     *
     * @param
     * \SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\SessionData
     * $value
     */
    public function addSessionData(\SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\SessionData $value)
    {
        if ($this->session_data === null) {
            $this->session_data = new \Protobuf\MessageCollection();
        }

        $this->session_data->add($value);
    }

    /**
     * Check if 'is_twofactor_enabled' has a value
     *
     * @return bool
     */
    public function hasIsTwofactorEnabled()
    {
        return $this->is_twofactor_enabled !== null;
    }

    /**
     * Get 'is_twofactor_enabled' value
     *
     * @return bool
     */
    public function getIsTwofactorEnabled()
    {
        return $this->is_twofactor_enabled;
    }

    /**
     * Set 'is_twofactor_enabled' value
     *
     * @param bool $value
     */
    public function setIsTwofactorEnabled($value = null)
    {
        $this->is_twofactor_enabled = $value;
    }

    /**
     * Check if 'timestamp_twofactor_enabled' has a value
     *
     * @return bool
     */
    public function hasTimestampTwofactorEnabled()
    {
        return $this->timestamp_twofactor_enabled !== null;
    }

    /**
     * Get 'timestamp_twofactor_enabled' value
     *
     * @return int
     */
    public function getTimestampTwofactorEnabled()
    {
        return $this->timestamp_twofactor_enabled;
    }

    /**
     * Set 'timestamp_twofactor_enabled' value
     *
     * @param int $value
     */
    public function setTimestampTwofactorEnabled($value = null)
    {
        $this->timestamp_twofactor_enabled = $value;
    }

    /**
     * Check if 'is_phone_verified' has a value
     *
     * @return bool
     */
    public function hasIsPhoneVerified()
    {
        return $this->is_phone_verified !== null;
    }

    /**
     * Get 'is_phone_verified' value
     *
     * @return bool
     */
    public function getIsPhoneVerified()
    {
        return $this->is_phone_verified;
    }

    /**
     * Set 'is_phone_verified' value
     *
     * @param bool $value
     */
    public function setIsPhoneVerified($value = null)
    {
        $this->is_phone_verified = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'is_steamguard_enabled' => null,
            'timestamp_steamguard_enabled' => null,
            'deprecated_newauthentication' => [],
            'deprecated_machine_name_userchosen' => null,
            'deprecated_timestamp_machine_steamguard_enabled' => null,
            'deprecated_authentication_exists_from_geoloc_before_mintime' => null,
            'deprecated_machine_id' => null,
            'session_data' => [],
            'is_twofactor_enabled' => null,
            'timestamp_twofactor_enabled' => null,
            'is_phone_verified' => null
        ], $values);

        $message->setIsSteamguardEnabled($values['is_steamguard_enabled']);
        $message->setTimestampSteamguardEnabled($values['timestamp_steamguard_enabled']);
        $message->setDeprecatedMachineNameUserchosen($values['deprecated_machine_name_userchosen']);
        $message->setDeprecatedTimestampMachineSteamguardEnabled($values['deprecated_timestamp_machine_steamguard_enabled']);
        $message->setDeprecatedAuthenticationExistsFromGeolocBeforeMintime($values['deprecated_authentication_exists_from_geoloc_before_mintime']);
        $message->setDeprecatedMachineId($values['deprecated_machine_id']);
        $message->setIsTwofactorEnabled($values['is_twofactor_enabled']);
        $message->setTimestampTwofactorEnabled($values['timestamp_twofactor_enabled']);
        $message->setIsPhoneVerified($values['is_phone_verified']);

        foreach ($values['deprecated_newauthentication'] as $item) {
            $message->addDeprecatedNewauthentication($item);
        }

        foreach ($values['session_data'] as $item) {
            $message->addSessionData($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CCredentials_GetSteamGuardDetails_Response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'is_steamguard_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'timestamp_steamguard_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'deprecated_newauthentication',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgCredentials.CCredentials_GetSteamGuardDetails_Response.NewAuthentication'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'deprecated_machine_name_userchosen',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'deprecated_timestamp_machine_steamguard_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'deprecated_authentication_exists_from_geoloc_before_mintime',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'deprecated_machine_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'session_data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.Unified.SteamMsgCredentials.CCredentials_GetSteamGuardDetails_Response.SessionData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'is_twofactor_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'timestamp_twofactor_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'is_phone_verified',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->is_steamguard_enabled !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->is_steamguard_enabled);
        }

        if ($this->timestamp_steamguard_enabled !== null) {
            $writer->writeVarint($stream, 21);
            $writer->writeFixed32($stream, $this->timestamp_steamguard_enabled);
        }

        if ($this->deprecated_newauthentication !== null) {
            foreach ($this->deprecated_newauthentication as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->deprecated_machine_name_userchosen !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->deprecated_machine_name_userchosen);
        }

        if ($this->deprecated_timestamp_machine_steamguard_enabled !== null) {
            $writer->writeVarint($stream, 45);
            $writer->writeFixed32($stream, $this->deprecated_timestamp_machine_steamguard_enabled);
        }

        if ($this->deprecated_authentication_exists_from_geoloc_before_mintime !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->deprecated_authentication_exists_from_geoloc_before_mintime);
        }

        if ($this->deprecated_machine_id !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->deprecated_machine_id);
        }

        if ($this->session_data !== null) {
            foreach ($this->session_data as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->is_twofactor_enabled !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->is_twofactor_enabled);
        }

        if ($this->timestamp_twofactor_enabled !== null) {
            $writer->writeVarint($stream, 85);
            $writer->writeFixed32($stream, $this->timestamp_twofactor_enabled);
        }

        if ($this->is_phone_verified !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->is_phone_verified);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_steamguard_enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->timestamp_steamguard_enabled = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\NewAuthentication();

                if ($this->deprecated_newauthentication === null) {
                    $this->deprecated_newauthentication = new \Protobuf\MessageCollection();
                }

                $this->deprecated_newauthentication->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->deprecated_machine_name_userchosen = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->deprecated_timestamp_machine_steamguard_enabled = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->deprecated_authentication_exists_from_geoloc_before_mintime = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->deprecated_machine_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\SessionData();

                if ($this->session_data === null) {
                    $this->session_data = new \Protobuf\MessageCollection();
                }

                $this->session_data->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_twofactor_enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->timestamp_twofactor_enabled = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_phone_verified = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->is_steamguard_enabled !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->timestamp_steamguard_enabled !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->deprecated_newauthentication !== null) {
            foreach ($this->deprecated_newauthentication as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->deprecated_machine_name_userchosen !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->deprecated_machine_name_userchosen);
        }

        if ($this->deprecated_timestamp_machine_steamguard_enabled !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->deprecated_authentication_exists_from_geoloc_before_mintime !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->deprecated_machine_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->deprecated_machine_id);
        }

        if ($this->session_data !== null) {
            foreach ($this->session_data as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->is_twofactor_enabled !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->timestamp_twofactor_enabled !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->is_phone_verified !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->is_steamguard_enabled = null;
        $this->timestamp_steamguard_enabled = null;
        $this->deprecated_newauthentication = null;
        $this->deprecated_machine_name_userchosen = null;
        $this->deprecated_timestamp_machine_steamguard_enabled = null;
        $this->deprecated_authentication_exists_from_geoloc_before_mintime = null;
        $this->deprecated_machine_id = null;
        $this->session_data = null;
        $this->is_twofactor_enabled = null;
        $this->timestamp_twofactor_enabled = null;
        $this->is_phone_verified = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->is_steamguard_enabled = ($message->is_steamguard_enabled !== null) ? $message->is_steamguard_enabled : $this->is_steamguard_enabled;
        $this->timestamp_steamguard_enabled = ($message->timestamp_steamguard_enabled !== null) ? $message->timestamp_steamguard_enabled : $this->timestamp_steamguard_enabled;
        $this->deprecated_newauthentication = ($message->deprecated_newauthentication !== null) ? $message->deprecated_newauthentication : $this->deprecated_newauthentication;
        $this->deprecated_machine_name_userchosen = ($message->deprecated_machine_name_userchosen !== null) ? $message->deprecated_machine_name_userchosen : $this->deprecated_machine_name_userchosen;
        $this->deprecated_timestamp_machine_steamguard_enabled = ($message->deprecated_timestamp_machine_steamguard_enabled !== null) ? $message->deprecated_timestamp_machine_steamguard_enabled : $this->deprecated_timestamp_machine_steamguard_enabled;
        $this->deprecated_authentication_exists_from_geoloc_before_mintime = ($message->deprecated_authentication_exists_from_geoloc_before_mintime !== null) ? $message->deprecated_authentication_exists_from_geoloc_before_mintime : $this->deprecated_authentication_exists_from_geoloc_before_mintime;
        $this->deprecated_machine_id = ($message->deprecated_machine_id !== null) ? $message->deprecated_machine_id : $this->deprecated_machine_id;
        $this->session_data = ($message->session_data !== null) ? $message->session_data : $this->session_data;
        $this->is_twofactor_enabled = ($message->is_twofactor_enabled !== null) ? $message->is_twofactor_enabled : $this->is_twofactor_enabled;
        $this->timestamp_twofactor_enabled = ($message->timestamp_twofactor_enabled !== null) ? $message->timestamp_twofactor_enabled : $this->timestamp_twofactor_enabled;
        $this->is_phone_verified = ($message->is_phone_verified !== null) ? $message->is_phone_verified : $this->is_phone_verified;
    }


}

