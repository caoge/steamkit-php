<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_credentials.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgCredentials.CCredentials_GetSteamGuardDetails_Response.NewAuthentication
 */
class NewAuthentication extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * timestamp_steamguard_enabled optional fixed32 = 1
     *
     * @var int
     */
    protected $timestamp_steamguard_enabled = null;

    /**
     * is_web_cookie optional bool = 2
     *
     * @var bool
     */
    protected $is_web_cookie = null;

    /**
     * ipaddress optional int32 = 3
     *
     * @var int
     */
    protected $ipaddress = null;

    /**
     * geoloc_info optional string = 4
     *
     * @var string
     */
    protected $geoloc_info = null;

    /**
     * is_remembered optional bool = 5
     *
     * @var bool
     */
    protected $is_remembered = null;

    /**
     * machine_name_user_supplied optional string = 6
     *
     * @var string
     */
    protected $machine_name_user_supplied = null;

    /**
     * status optional int32 = 7
     *
     * @var int
     */
    protected $status = null;

    /**
     * Check if 'timestamp_steamguard_enabled' has a value
     *
     * @return bool
     */
    public function hasTimestampSteamguardEnabled()
    {
        return $this->timestamp_steamguard_enabled !== null;
    }

    /**
     * Get 'timestamp_steamguard_enabled' value
     *
     * @return int
     */
    public function getTimestampSteamguardEnabled()
    {
        return $this->timestamp_steamguard_enabled;
    }

    /**
     * Set 'timestamp_steamguard_enabled' value
     *
     * @param int $value
     */
    public function setTimestampSteamguardEnabled($value = null)
    {
        $this->timestamp_steamguard_enabled = $value;
    }

    /**
     * Check if 'is_web_cookie' has a value
     *
     * @return bool
     */
    public function hasIsWebCookie()
    {
        return $this->is_web_cookie !== null;
    }

    /**
     * Get 'is_web_cookie' value
     *
     * @return bool
     */
    public function getIsWebCookie()
    {
        return $this->is_web_cookie;
    }

    /**
     * Set 'is_web_cookie' value
     *
     * @param bool $value
     */
    public function setIsWebCookie($value = null)
    {
        $this->is_web_cookie = $value;
    }

    /**
     * Check if 'ipaddress' has a value
     *
     * @return bool
     */
    public function hasIpaddress()
    {
        return $this->ipaddress !== null;
    }

    /**
     * Get 'ipaddress' value
     *
     * @return int
     */
    public function getIpaddress()
    {
        return $this->ipaddress;
    }

    /**
     * Set 'ipaddress' value
     *
     * @param int $value
     */
    public function setIpaddress($value = null)
    {
        $this->ipaddress = $value;
    }

    /**
     * Check if 'geoloc_info' has a value
     *
     * @return bool
     */
    public function hasGeolocInfo()
    {
        return $this->geoloc_info !== null;
    }

    /**
     * Get 'geoloc_info' value
     *
     * @return string
     */
    public function getGeolocInfo()
    {
        return $this->geoloc_info;
    }

    /**
     * Set 'geoloc_info' value
     *
     * @param string $value
     */
    public function setGeolocInfo($value = null)
    {
        $this->geoloc_info = $value;
    }

    /**
     * Check if 'is_remembered' has a value
     *
     * @return bool
     */
    public function hasIsRemembered()
    {
        return $this->is_remembered !== null;
    }

    /**
     * Get 'is_remembered' value
     *
     * @return bool
     */
    public function getIsRemembered()
    {
        return $this->is_remembered;
    }

    /**
     * Set 'is_remembered' value
     *
     * @param bool $value
     */
    public function setIsRemembered($value = null)
    {
        $this->is_remembered = $value;
    }

    /**
     * Check if 'machine_name_user_supplied' has a value
     *
     * @return bool
     */
    public function hasMachineNameUserSupplied()
    {
        return $this->machine_name_user_supplied !== null;
    }

    /**
     * Get 'machine_name_user_supplied' value
     *
     * @return string
     */
    public function getMachineNameUserSupplied()
    {
        return $this->machine_name_user_supplied;
    }

    /**
     * Set 'machine_name_user_supplied' value
     *
     * @param string $value
     */
    public function setMachineNameUserSupplied($value = null)
    {
        $this->machine_name_user_supplied = $value;
    }

    /**
     * Check if 'status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->status !== null;
    }

    /**
     * Get 'status' value
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set 'status' value
     *
     * @param int $value
     */
    public function setStatus($value = null)
    {
        $this->status = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'timestamp_steamguard_enabled' => null,
            'is_web_cookie' => null,
            'ipaddress' => null,
            'geoloc_info' => null,
            'is_remembered' => null,
            'machine_name_user_supplied' => null,
            'status' => null
        ], $values);

        $message->setTimestampSteamguardEnabled($values['timestamp_steamguard_enabled']);
        $message->setIsWebCookie($values['is_web_cookie']);
        $message->setIpaddress($values['ipaddress']);
        $message->setGeolocInfo($values['geoloc_info']);
        $message->setIsRemembered($values['is_remembered']);
        $message->setMachineNameUserSupplied($values['machine_name_user_supplied']);
        $message->setStatus($values['status']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'NewAuthentication',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'timestamp_steamguard_enabled',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'is_web_cookie',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'ipaddress',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'geoloc_info',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'is_remembered',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'machine_name_user_supplied',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->timestamp_steamguard_enabled !== null) {
            $writer->writeVarint($stream, 13);
            $writer->writeFixed32($stream, $this->timestamp_steamguard_enabled);
        }

        if ($this->is_web_cookie !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->is_web_cookie);
        }

        if ($this->ipaddress !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->ipaddress);
        }

        if ($this->geoloc_info !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->geoloc_info);
        }

        if ($this->is_remembered !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->is_remembered);
        }

        if ($this->machine_name_user_supplied !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->machine_name_user_supplied);
        }

        if ($this->status !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->status);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 7);

                $this->timestamp_steamguard_enabled = $reader->readFixed32($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_web_cookie = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->ipaddress = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->geoloc_info = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_remembered = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->machine_name_user_supplied = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->status = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->timestamp_steamguard_enabled !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->is_web_cookie !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->ipaddress !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ipaddress);
        }

        if ($this->geoloc_info !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->geoloc_info);
        }

        if ($this->is_remembered !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->machine_name_user_supplied !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->machine_name_user_supplied);
        }

        if ($this->status !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->status);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->timestamp_steamguard_enabled = null;
        $this->is_web_cookie = null;
        $this->ipaddress = null;
        $this->geoloc_info = null;
        $this->is_remembered = null;
        $this->machine_name_user_supplied = null;
        $this->status = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_GetSteamGuardDetails_Response\NewAuthentication) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->timestamp_steamguard_enabled = ($message->timestamp_steamguard_enabled !== null) ? $message->timestamp_steamguard_enabled : $this->timestamp_steamguard_enabled;
        $this->is_web_cookie = ($message->is_web_cookie !== null) ? $message->is_web_cookie : $this->is_web_cookie;
        $this->ipaddress = ($message->ipaddress !== null) ? $message->ipaddress : $this->ipaddress;
        $this->geoloc_info = ($message->geoloc_info !== null) ? $message->geoloc_info : $this->geoloc_info;
        $this->is_remembered = ($message->is_remembered !== null) ? $message->is_remembered : $this->is_remembered;
        $this->machine_name_user_supplied = ($message->machine_name_user_supplied !== null) ? $message->machine_name_user_supplied : $this->machine_name_user_supplied;
        $this->status = ($message->status !== null) ? $message->status : $this->status;
    }


}

