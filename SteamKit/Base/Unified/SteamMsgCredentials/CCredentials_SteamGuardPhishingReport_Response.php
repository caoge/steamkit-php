<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_credentials.steamclient.proto
 */


namespace SteamKit\Base\Unified\SteamMsgCredentials;

/**
 * Protobuf message :
 * SteamKit.Base.Unified.SteamMsgCredentials.CCredentials_SteamGuardPhishingReport_Response
 */
class CCredentials_SteamGuardPhishingReport_Response extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * ipaddress_loginattempt optional uint32 = 1
     *
     * @var int
     */
    protected $ipaddress_loginattempt = null;

    /**
     * countryname_loginattempt optional string = 2
     *
     * @var string
     */
    protected $countryname_loginattempt = null;

    /**
     * statename_loginattempt optional string = 3
     *
     * @var string
     */
    protected $statename_loginattempt = null;

    /**
     * cityname_loginattempt optional string = 4
     *
     * @var string
     */
    protected $cityname_loginattempt = null;

    /**
     * ipaddress_actual optional uint32 = 5
     *
     * @var int
     */
    protected $ipaddress_actual = null;

    /**
     * countryname_actual optional string = 6
     *
     * @var string
     */
    protected $countryname_actual = null;

    /**
     * statename_actual optional string = 7
     *
     * @var string
     */
    protected $statename_actual = null;

    /**
     * cityname_actual optional string = 8
     *
     * @var string
     */
    protected $cityname_actual = null;

    /**
     * steamguard_code optional string = 9
     *
     * @var string
     */
    protected $steamguard_code = null;

    /**
     * Check if 'ipaddress_loginattempt' has a value
     *
     * @return bool
     */
    public function hasIpaddressLoginattempt()
    {
        return $this->ipaddress_loginattempt !== null;
    }

    /**
     * Get 'ipaddress_loginattempt' value
     *
     * @return int
     */
    public function getIpaddressLoginattempt()
    {
        return $this->ipaddress_loginattempt;
    }

    /**
     * Set 'ipaddress_loginattempt' value
     *
     * @param int $value
     */
    public function setIpaddressLoginattempt($value = null)
    {
        $this->ipaddress_loginattempt = $value;
    }

    /**
     * Check if 'countryname_loginattempt' has a value
     *
     * @return bool
     */
    public function hasCountrynameLoginattempt()
    {
        return $this->countryname_loginattempt !== null;
    }

    /**
     * Get 'countryname_loginattempt' value
     *
     * @return string
     */
    public function getCountrynameLoginattempt()
    {
        return $this->countryname_loginattempt;
    }

    /**
     * Set 'countryname_loginattempt' value
     *
     * @param string $value
     */
    public function setCountrynameLoginattempt($value = null)
    {
        $this->countryname_loginattempt = $value;
    }

    /**
     * Check if 'statename_loginattempt' has a value
     *
     * @return bool
     */
    public function hasStatenameLoginattempt()
    {
        return $this->statename_loginattempt !== null;
    }

    /**
     * Get 'statename_loginattempt' value
     *
     * @return string
     */
    public function getStatenameLoginattempt()
    {
        return $this->statename_loginattempt;
    }

    /**
     * Set 'statename_loginattempt' value
     *
     * @param string $value
     */
    public function setStatenameLoginattempt($value = null)
    {
        $this->statename_loginattempt = $value;
    }

    /**
     * Check if 'cityname_loginattempt' has a value
     *
     * @return bool
     */
    public function hasCitynameLoginattempt()
    {
        return $this->cityname_loginattempt !== null;
    }

    /**
     * Get 'cityname_loginattempt' value
     *
     * @return string
     */
    public function getCitynameLoginattempt()
    {
        return $this->cityname_loginattempt;
    }

    /**
     * Set 'cityname_loginattempt' value
     *
     * @param string $value
     */
    public function setCitynameLoginattempt($value = null)
    {
        $this->cityname_loginattempt = $value;
    }

    /**
     * Check if 'ipaddress_actual' has a value
     *
     * @return bool
     */
    public function hasIpaddressActual()
    {
        return $this->ipaddress_actual !== null;
    }

    /**
     * Get 'ipaddress_actual' value
     *
     * @return int
     */
    public function getIpaddressActual()
    {
        return $this->ipaddress_actual;
    }

    /**
     * Set 'ipaddress_actual' value
     *
     * @param int $value
     */
    public function setIpaddressActual($value = null)
    {
        $this->ipaddress_actual = $value;
    }

    /**
     * Check if 'countryname_actual' has a value
     *
     * @return bool
     */
    public function hasCountrynameActual()
    {
        return $this->countryname_actual !== null;
    }

    /**
     * Get 'countryname_actual' value
     *
     * @return string
     */
    public function getCountrynameActual()
    {
        return $this->countryname_actual;
    }

    /**
     * Set 'countryname_actual' value
     *
     * @param string $value
     */
    public function setCountrynameActual($value = null)
    {
        $this->countryname_actual = $value;
    }

    /**
     * Check if 'statename_actual' has a value
     *
     * @return bool
     */
    public function hasStatenameActual()
    {
        return $this->statename_actual !== null;
    }

    /**
     * Get 'statename_actual' value
     *
     * @return string
     */
    public function getStatenameActual()
    {
        return $this->statename_actual;
    }

    /**
     * Set 'statename_actual' value
     *
     * @param string $value
     */
    public function setStatenameActual($value = null)
    {
        $this->statename_actual = $value;
    }

    /**
     * Check if 'cityname_actual' has a value
     *
     * @return bool
     */
    public function hasCitynameActual()
    {
        return $this->cityname_actual !== null;
    }

    /**
     * Get 'cityname_actual' value
     *
     * @return string
     */
    public function getCitynameActual()
    {
        return $this->cityname_actual;
    }

    /**
     * Set 'cityname_actual' value
     *
     * @param string $value
     */
    public function setCitynameActual($value = null)
    {
        $this->cityname_actual = $value;
    }

    /**
     * Check if 'steamguard_code' has a value
     *
     * @return bool
     */
    public function hasSteamguardCode()
    {
        return $this->steamguard_code !== null;
    }

    /**
     * Get 'steamguard_code' value
     *
     * @return string
     */
    public function getSteamguardCode()
    {
        return $this->steamguard_code;
    }

    /**
     * Set 'steamguard_code' value
     *
     * @param string $value
     */
    public function setSteamguardCode($value = null)
    {
        $this->steamguard_code = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'ipaddress_loginattempt' => null,
            'countryname_loginattempt' => null,
            'statename_loginattempt' => null,
            'cityname_loginattempt' => null,
            'ipaddress_actual' => null,
            'countryname_actual' => null,
            'statename_actual' => null,
            'cityname_actual' => null,
            'steamguard_code' => null
        ], $values);

        $message->setIpaddressLoginattempt($values['ipaddress_loginattempt']);
        $message->setCountrynameLoginattempt($values['countryname_loginattempt']);
        $message->setStatenameLoginattempt($values['statename_loginattempt']);
        $message->setCitynameLoginattempt($values['cityname_loginattempt']);
        $message->setIpaddressActual($values['ipaddress_actual']);
        $message->setCountrynameActual($values['countryname_actual']);
        $message->setStatenameActual($values['statename_actual']);
        $message->setCitynameActual($values['cityname_actual']);
        $message->setSteamguardCode($values['steamguard_code']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CCredentials_SteamGuardPhishingReport_Response',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'ipaddress_loginattempt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'countryname_loginattempt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'statename_loginattempt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'cityname_loginattempt',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'ipaddress_actual',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'countryname_actual',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'statename_actual',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'cityname_actual',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'steamguard_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->ipaddress_loginattempt !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->ipaddress_loginattempt);
        }

        if ($this->countryname_loginattempt !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->countryname_loginattempt);
        }

        if ($this->statename_loginattempt !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->statename_loginattempt);
        }

        if ($this->cityname_loginattempt !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->cityname_loginattempt);
        }

        if ($this->ipaddress_actual !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->ipaddress_actual);
        }

        if ($this->countryname_actual !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->countryname_actual);
        }

        if ($this->statename_actual !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->statename_actual);
        }

        if ($this->cityname_actual !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->cityname_actual);
        }

        if ($this->steamguard_code !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->steamguard_code);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ipaddress_loginattempt = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->countryname_loginattempt = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->statename_loginattempt = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->cityname_loginattempt = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ipaddress_actual = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->countryname_actual = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->statename_actual = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->cityname_actual = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->steamguard_code = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->ipaddress_loginattempt !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ipaddress_loginattempt);
        }

        if ($this->countryname_loginattempt !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->countryname_loginattempt);
        }

        if ($this->statename_loginattempt !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->statename_loginattempt);
        }

        if ($this->cityname_loginattempt !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->cityname_loginattempt);
        }

        if ($this->ipaddress_actual !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ipaddress_actual);
        }

        if ($this->countryname_actual !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->countryname_actual);
        }

        if ($this->statename_actual !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->statename_actual);
        }

        if ($this->cityname_actual !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->cityname_actual);
        }

        if ($this->steamguard_code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->steamguard_code);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->ipaddress_loginattempt = null;
        $this->countryname_loginattempt = null;
        $this->statename_loginattempt = null;
        $this->cityname_loginattempt = null;
        $this->ipaddress_actual = null;
        $this->countryname_actual = null;
        $this->statename_actual = null;
        $this->cityname_actual = null;
        $this->steamguard_code = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\Unified\SteamMsgCredentials\CCredentials_SteamGuardPhishingReport_Response) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->ipaddress_loginattempt = ($message->ipaddress_loginattempt !== null) ? $message->ipaddress_loginattempt : $this->ipaddress_loginattempt;
        $this->countryname_loginattempt = ($message->countryname_loginattempt !== null) ? $message->countryname_loginattempt : $this->countryname_loginattempt;
        $this->statename_loginattempt = ($message->statename_loginattempt !== null) ? $message->statename_loginattempt : $this->statename_loginattempt;
        $this->cityname_loginattempt = ($message->cityname_loginattempt !== null) ? $message->cityname_loginattempt : $this->cityname_loginattempt;
        $this->ipaddress_actual = ($message->ipaddress_actual !== null) ? $message->ipaddress_actual : $this->ipaddress_actual;
        $this->countryname_actual = ($message->countryname_actual !== null) ? $message->countryname_actual : $this->countryname_actual;
        $this->statename_actual = ($message->statename_actual !== null) ? $message->statename_actual : $this->statename_actual;
        $this->cityname_actual = ($message->cityname_actual !== null) ? $message->cityname_actual : $this->cityname_actual;
        $this->steamguard_code = ($message->steamguard_code !== null) ? $message->steamguard_code : $this->steamguard_code;
    }


}

