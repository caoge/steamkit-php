<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgClientUCMPublishedFileSubscribed
 */
class CMsgClientUCMPublishedFileSubscribed extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * published_file_id optional fixed64 = 1
     *
     * @var int
     */
    protected $published_file_id = null;

    /**
     * app_id optional uint32 = 2
     *
     * @var int
     */
    protected $app_id = null;

    /**
     * file_hcontent optional fixed64 = 3
     *
     * @var int
     */
    protected $file_hcontent = null;

    /**
     * file_size optional uint32 = 4
     *
     * @var int
     */
    protected $file_size = null;

    /**
     * rtime_subscribed optional uint32 = 5
     *
     * @var int
     */
    protected $rtime_subscribed = null;

    /**
     * is_depot_content optional bool = 6
     *
     * @var bool
     */
    protected $is_depot_content = null;

    /**
     * rtime_updated optional uint32 = 7
     *
     * @var int
     */
    protected $rtime_updated = null;

    /**
     * Check if 'published_file_id' has a value
     *
     * @return bool
     */
    public function hasPublishedFileId()
    {
        return $this->published_file_id !== null;
    }

    /**
     * Get 'published_file_id' value
     *
     * @return int
     */
    public function getPublishedFileId()
    {
        return $this->published_file_id;
    }

    /**
     * Set 'published_file_id' value
     *
     * @param int $value
     */
    public function setPublishedFileId($value = null)
    {
        $this->published_file_id = $value;
    }

    /**
     * Check if 'app_id' has a value
     *
     * @return bool
     */
    public function hasAppId()
    {
        return $this->app_id !== null;
    }

    /**
     * Get 'app_id' value
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * Set 'app_id' value
     *
     * @param int $value
     */
    public function setAppId($value = null)
    {
        $this->app_id = $value;
    }

    /**
     * Check if 'file_hcontent' has a value
     *
     * @return bool
     */
    public function hasFileHcontent()
    {
        return $this->file_hcontent !== null;
    }

    /**
     * Get 'file_hcontent' value
     *
     * @return int
     */
    public function getFileHcontent()
    {
        return $this->file_hcontent;
    }

    /**
     * Set 'file_hcontent' value
     *
     * @param int $value
     */
    public function setFileHcontent($value = null)
    {
        $this->file_hcontent = $value;
    }

    /**
     * Check if 'file_size' has a value
     *
     * @return bool
     */
    public function hasFileSize()
    {
        return $this->file_size !== null;
    }

    /**
     * Get 'file_size' value
     *
     * @return int
     */
    public function getFileSize()
    {
        return $this->file_size;
    }

    /**
     * Set 'file_size' value
     *
     * @param int $value
     */
    public function setFileSize($value = null)
    {
        $this->file_size = $value;
    }

    /**
     * Check if 'rtime_subscribed' has a value
     *
     * @return bool
     */
    public function hasRtimeSubscribed()
    {
        return $this->rtime_subscribed !== null;
    }

    /**
     * Get 'rtime_subscribed' value
     *
     * @return int
     */
    public function getRtimeSubscribed()
    {
        return $this->rtime_subscribed;
    }

    /**
     * Set 'rtime_subscribed' value
     *
     * @param int $value
     */
    public function setRtimeSubscribed($value = null)
    {
        $this->rtime_subscribed = $value;
    }

    /**
     * Check if 'is_depot_content' has a value
     *
     * @return bool
     */
    public function hasIsDepotContent()
    {
        return $this->is_depot_content !== null;
    }

    /**
     * Get 'is_depot_content' value
     *
     * @return bool
     */
    public function getIsDepotContent()
    {
        return $this->is_depot_content;
    }

    /**
     * Set 'is_depot_content' value
     *
     * @param bool $value
     */
    public function setIsDepotContent($value = null)
    {
        $this->is_depot_content = $value;
    }

    /**
     * Check if 'rtime_updated' has a value
     *
     * @return bool
     */
    public function hasRtimeUpdated()
    {
        return $this->rtime_updated !== null;
    }

    /**
     * Get 'rtime_updated' value
     *
     * @return int
     */
    public function getRtimeUpdated()
    {
        return $this->rtime_updated;
    }

    /**
     * Set 'rtime_updated' value
     *
     * @param int $value
     */
    public function setRtimeUpdated($value = null)
    {
        $this->rtime_updated = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'published_file_id' => null,
            'app_id' => null,
            'file_hcontent' => null,
            'file_size' => null,
            'rtime_subscribed' => null,
            'is_depot_content' => null,
            'rtime_updated' => null
        ], $values);

        $message->setPublishedFileId($values['published_file_id']);
        $message->setAppId($values['app_id']);
        $message->setFileHcontent($values['file_hcontent']);
        $message->setFileSize($values['file_size']);
        $message->setRtimeSubscribed($values['rtime_subscribed']);
        $message->setIsDepotContent($values['is_depot_content']);
        $message->setRtimeUpdated($values['rtime_updated']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientUCMPublishedFileSubscribed',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'published_file_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'file_hcontent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'file_size',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'rtime_subscribed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'is_depot_content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'rtime_updated',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->published_file_id !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->published_file_id);
        }

        if ($this->app_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->app_id);
        }

        if ($this->file_hcontent !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeFixed64($stream, $this->file_hcontent);
        }

        if ($this->file_size !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->file_size);
        }

        if ($this->rtime_subscribed !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->rtime_subscribed);
        }

        if ($this->is_depot_content !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->is_depot_content);
        }

        if ($this->rtime_updated !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->rtime_updated);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->published_file_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->file_hcontent = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->file_size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->rtime_subscribed = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_depot_content = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->rtime_updated = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->published_file_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_id);
        }

        if ($this->file_hcontent !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->file_size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->file_size);
        }

        if ($this->rtime_subscribed !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->rtime_subscribed);
        }

        if ($this->is_depot_content !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->rtime_updated !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->rtime_updated);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->published_file_id = null;
        $this->app_id = null;
        $this->file_hcontent = null;
        $this->file_size = null;
        $this->rtime_subscribed = null;
        $this->is_depot_content = null;
        $this->rtime_updated = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMPublishedFileSubscribed) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->published_file_id = ($message->published_file_id !== null) ? $message->published_file_id : $this->published_file_id;
        $this->app_id = ($message->app_id !== null) ? $message->app_id : $this->app_id;
        $this->file_hcontent = ($message->file_hcontent !== null) ? $message->file_hcontent : $this->file_hcontent;
        $this->file_size = ($message->file_size !== null) ? $message->file_size : $this->file_size;
        $this->rtime_subscribed = ($message->rtime_subscribed !== null) ? $message->rtime_subscribed : $this->rtime_subscribed;
        $this->is_depot_content = ($message->is_depot_content !== null) ? $message->is_depot_content : $this->is_depot_content;
        $this->rtime_updated = ($message->rtime_updated !== null) ? $message->rtime_updated : $this->rtime_updated;
    }


}

