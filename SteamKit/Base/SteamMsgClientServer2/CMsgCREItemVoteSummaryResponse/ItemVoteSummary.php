<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2\CMsgCREItemVoteSummaryResponse;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgCREItemVoteSummaryResponse.ItemVoteSummary
 */
class ItemVoteSummary extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * published_file_id optional fixed64 = 1
     *
     * @var int
     */
    protected $published_file_id = null;

    /**
     * votes_for optional int32 = 2
     *
     * @var int
     */
    protected $votes_for = null;

    /**
     * votes_against optional int32 = 3
     *
     * @var int
     */
    protected $votes_against = null;

    /**
     * reports optional int32 = 4
     *
     * @var int
     */
    protected $reports = null;

    /**
     * score optional float = 5
     *
     * @var float
     */
    protected $score = null;

    /**
     * Check if 'published_file_id' has a value
     *
     * @return bool
     */
    public function hasPublishedFileId()
    {
        return $this->published_file_id !== null;
    }

    /**
     * Get 'published_file_id' value
     *
     * @return int
     */
    public function getPublishedFileId()
    {
        return $this->published_file_id;
    }

    /**
     * Set 'published_file_id' value
     *
     * @param int $value
     */
    public function setPublishedFileId($value = null)
    {
        $this->published_file_id = $value;
    }

    /**
     * Check if 'votes_for' has a value
     *
     * @return bool
     */
    public function hasVotesFor()
    {
        return $this->votes_for !== null;
    }

    /**
     * Get 'votes_for' value
     *
     * @return int
     */
    public function getVotesFor()
    {
        return $this->votes_for;
    }

    /**
     * Set 'votes_for' value
     *
     * @param int $value
     */
    public function setVotesFor($value = null)
    {
        $this->votes_for = $value;
    }

    /**
     * Check if 'votes_against' has a value
     *
     * @return bool
     */
    public function hasVotesAgainst()
    {
        return $this->votes_against !== null;
    }

    /**
     * Get 'votes_against' value
     *
     * @return int
     */
    public function getVotesAgainst()
    {
        return $this->votes_against;
    }

    /**
     * Set 'votes_against' value
     *
     * @param int $value
     */
    public function setVotesAgainst($value = null)
    {
        $this->votes_against = $value;
    }

    /**
     * Check if 'reports' has a value
     *
     * @return bool
     */
    public function hasReports()
    {
        return $this->reports !== null;
    }

    /**
     * Get 'reports' value
     *
     * @return int
     */
    public function getReports()
    {
        return $this->reports;
    }

    /**
     * Set 'reports' value
     *
     * @param int $value
     */
    public function setReports($value = null)
    {
        $this->reports = $value;
    }

    /**
     * Check if 'score' has a value
     *
     * @return bool
     */
    public function hasScore()
    {
        return $this->score !== null;
    }

    /**
     * Get 'score' value
     *
     * @return float
     */
    public function getScore()
    {
        return $this->score;
    }

    /**
     * Set 'score' value
     *
     * @param float $value
     */
    public function setScore($value = null)
    {
        $this->score = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'published_file_id' => null,
            'votes_for' => null,
            'votes_against' => null,
            'reports' => null,
            'score' => null
        ], $values);

        $message->setPublishedFileId($values['published_file_id']);
        $message->setVotesFor($values['votes_for']);
        $message->setVotesAgainst($values['votes_against']);
        $message->setReports($values['reports']);
        $message->setScore($values['score']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ItemVoteSummary',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'published_file_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'votes_for',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'votes_against',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'reports',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'score',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->published_file_id !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->published_file_id);
        }

        if ($this->votes_for !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->votes_for);
        }

        if ($this->votes_against !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->votes_against);
        }

        if ($this->reports !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->reports);
        }

        if ($this->score !== null) {
            $writer->writeVarint($stream, 45);
            $writer->writeFloat($stream, $this->score);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->published_file_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->votes_for = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->votes_against = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->reports = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->score = $reader->readFloat($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->published_file_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->votes_for !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->votes_for);
        }

        if ($this->votes_against !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->votes_against);
        }

        if ($this->reports !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->reports);
        }

        if ($this->score !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->published_file_id = null;
        $this->votes_for = null;
        $this->votes_against = null;
        $this->reports = null;
        $this->score = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgCREItemVoteSummaryResponse\ItemVoteSummary) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->published_file_id = ($message->published_file_id !== null) ? $message->published_file_id : $this->published_file_id;
        $this->votes_for = ($message->votes_for !== null) ? $message->votes_for : $this->votes_for;
        $this->votes_against = ($message->votes_against !== null) ? $message->votes_against : $this->votes_against;
        $this->reports = ($message->reports !== null) ? $message->reports : $this->reports;
        $this->score = ($message->score !== null) ? $message->score : $this->score;
    }


}

