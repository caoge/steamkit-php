<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer2.CMsgGameServerData
 */
class CMsgGameServerData extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * steam_id_gs optional fixed64 = 1
     *
     * @var int
     */
    protected $steam_id_gs = null;

    /**
     * ip optional uint32 = 2
     *
     * @var int
     */
    protected $ip = null;

    /**
     * query_port optional uint32 = 3
     *
     * @var int
     */
    protected $query_port = null;

    /**
     * game_port optional uint32 = 4
     *
     * @var int
     */
    protected $game_port = null;

    /**
     * sourcetv_port optional uint32 = 5
     *
     * @var int
     */
    protected $sourcetv_port = null;

    /**
     * name optional string = 22
     *
     * @var string
     */
    protected $name = null;

    /**
     * app_id optional uint32 = 6
     *
     * @var int
     */
    protected $app_id = null;

    /**
     * gamedir optional string = 7
     *
     * @var string
     */
    protected $gamedir = null;

    /**
     * version optional string = 8
     *
     * @var string
     */
    protected $version = null;

    /**
     * product optional string = 9
     *
     * @var string
     */
    protected $product = null;

    /**
     * region optional string = 10
     *
     * @var string
     */
    protected $region = null;

    /**
     * players repeated message = 11
     *
     * @var \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgGameServerData\Player>
     */
    protected $players = null;

    /**
     * max_players optional uint32 = 12
     *
     * @var int
     */
    protected $max_players = null;

    /**
     * bot_count optional uint32 = 13
     *
     * @var int
     */
    protected $bot_count = null;

    /**
     * password optional bool = 14
     *
     * @var bool
     */
    protected $password = null;

    /**
     * secure optional bool = 15
     *
     * @var bool
     */
    protected $secure = null;

    /**
     * dedicated optional bool = 16
     *
     * @var bool
     */
    protected $dedicated = null;

    /**
     * os optional string = 17
     *
     * @var string
     */
    protected $os = null;

    /**
     * game_data optional string = 18
     *
     * @var string
     */
    protected $game_data = null;

    /**
     * game_data_version optional uint32 = 19
     *
     * @var int
     */
    protected $game_data_version = null;

    /**
     * game_type optional string = 20
     *
     * @var string
     */
    protected $game_type = null;

    /**
     * map optional string = 21
     *
     * @var string
     */
    protected $map = null;

    /**
     * Check if 'steam_id_gs' has a value
     *
     * @return bool
     */
    public function hasSteamIdGs()
    {
        return $this->steam_id_gs !== null;
    }

    /**
     * Get 'steam_id_gs' value
     *
     * @return int
     */
    public function getSteamIdGs()
    {
        return $this->steam_id_gs;
    }

    /**
     * Set 'steam_id_gs' value
     *
     * @param int $value
     */
    public function setSteamIdGs($value = null)
    {
        $this->steam_id_gs = $value;
    }

    /**
     * Check if 'ip' has a value
     *
     * @return bool
     */
    public function hasIp()
    {
        return $this->ip !== null;
    }

    /**
     * Get 'ip' value
     *
     * @return int
     */
    public function getIp()
    {
        return $this->ip;
    }

    /**
     * Set 'ip' value
     *
     * @param int $value
     */
    public function setIp($value = null)
    {
        $this->ip = $value;
    }

    /**
     * Check if 'query_port' has a value
     *
     * @return bool
     */
    public function hasQueryPort()
    {
        return $this->query_port !== null;
    }

    /**
     * Get 'query_port' value
     *
     * @return int
     */
    public function getQueryPort()
    {
        return $this->query_port;
    }

    /**
     * Set 'query_port' value
     *
     * @param int $value
     */
    public function setQueryPort($value = null)
    {
        $this->query_port = $value;
    }

    /**
     * Check if 'game_port' has a value
     *
     * @return bool
     */
    public function hasGamePort()
    {
        return $this->game_port !== null;
    }

    /**
     * Get 'game_port' value
     *
     * @return int
     */
    public function getGamePort()
    {
        return $this->game_port;
    }

    /**
     * Set 'game_port' value
     *
     * @param int $value
     */
    public function setGamePort($value = null)
    {
        $this->game_port = $value;
    }

    /**
     * Check if 'sourcetv_port' has a value
     *
     * @return bool
     */
    public function hasSourcetvPort()
    {
        return $this->sourcetv_port !== null;
    }

    /**
     * Get 'sourcetv_port' value
     *
     * @return int
     */
    public function getSourcetvPort()
    {
        return $this->sourcetv_port;
    }

    /**
     * Set 'sourcetv_port' value
     *
     * @param int $value
     */
    public function setSourcetvPort($value = null)
    {
        $this->sourcetv_port = $value;
    }

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'app_id' has a value
     *
     * @return bool
     */
    public function hasAppId()
    {
        return $this->app_id !== null;
    }

    /**
     * Get 'app_id' value
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * Set 'app_id' value
     *
     * @param int $value
     */
    public function setAppId($value = null)
    {
        $this->app_id = $value;
    }

    /**
     * Check if 'gamedir' has a value
     *
     * @return bool
     */
    public function hasGamedir()
    {
        return $this->gamedir !== null;
    }

    /**
     * Get 'gamedir' value
     *
     * @return string
     */
    public function getGamedir()
    {
        return $this->gamedir;
    }

    /**
     * Set 'gamedir' value
     *
     * @param string $value
     */
    public function setGamedir($value = null)
    {
        $this->gamedir = $value;
    }

    /**
     * Check if 'version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->version !== null;
    }

    /**
     * Get 'version' value
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set 'version' value
     *
     * @param string $value
     */
    public function setVersion($value = null)
    {
        $this->version = $value;
    }

    /**
     * Check if 'product' has a value
     *
     * @return bool
     */
    public function hasProduct()
    {
        return $this->product !== null;
    }

    /**
     * Get 'product' value
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->product;
    }

    /**
     * Set 'product' value
     *
     * @param string $value
     */
    public function setProduct($value = null)
    {
        $this->product = $value;
    }

    /**
     * Check if 'region' has a value
     *
     * @return bool
     */
    public function hasRegion()
    {
        return $this->region !== null;
    }

    /**
     * Get 'region' value
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->region;
    }

    /**
     * Set 'region' value
     *
     * @param string $value
     */
    public function setRegion($value = null)
    {
        $this->region = $value;
    }

    /**
     * Check if 'players' has a value
     *
     * @return bool
     */
    public function hasPlayersList()
    {
        return $this->players !== null;
    }

    /**
     * Get 'players' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgGameServerData\Player>
     */
    public function getPlayersList()
    {
        return $this->players;
    }

    /**
     * Set 'players' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgGameServerData\Player> $value
     */
    public function setPlayersList(\Protobuf\Collection $value = null)
    {
        $this->players = $value;
    }

    /**
     * Add a new element to 'players'
     *
     * @param \SteamKit\Base\SteamMsgClientServer2\CMsgGameServerData\Player $value
     */
    public function addPlayers(\SteamKit\Base\SteamMsgClientServer2\CMsgGameServerData\Player $value)
    {
        if ($this->players === null) {
            $this->players = new \Protobuf\MessageCollection();
        }

        $this->players->add($value);
    }

    /**
     * Check if 'max_players' has a value
     *
     * @return bool
     */
    public function hasMaxPlayers()
    {
        return $this->max_players !== null;
    }

    /**
     * Get 'max_players' value
     *
     * @return int
     */
    public function getMaxPlayers()
    {
        return $this->max_players;
    }

    /**
     * Set 'max_players' value
     *
     * @param int $value
     */
    public function setMaxPlayers($value = null)
    {
        $this->max_players = $value;
    }

    /**
     * Check if 'bot_count' has a value
     *
     * @return bool
     */
    public function hasBotCount()
    {
        return $this->bot_count !== null;
    }

    /**
     * Get 'bot_count' value
     *
     * @return int
     */
    public function getBotCount()
    {
        return $this->bot_count;
    }

    /**
     * Set 'bot_count' value
     *
     * @param int $value
     */
    public function setBotCount($value = null)
    {
        $this->bot_count = $value;
    }

    /**
     * Check if 'password' has a value
     *
     * @return bool
     */
    public function hasPassword()
    {
        return $this->password !== null;
    }

    /**
     * Get 'password' value
     *
     * @return bool
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set 'password' value
     *
     * @param bool $value
     */
    public function setPassword($value = null)
    {
        $this->password = $value;
    }

    /**
     * Check if 'secure' has a value
     *
     * @return bool
     */
    public function hasSecure()
    {
        return $this->secure !== null;
    }

    /**
     * Get 'secure' value
     *
     * @return bool
     */
    public function getSecure()
    {
        return $this->secure;
    }

    /**
     * Set 'secure' value
     *
     * @param bool $value
     */
    public function setSecure($value = null)
    {
        $this->secure = $value;
    }

    /**
     * Check if 'dedicated' has a value
     *
     * @return bool
     */
    public function hasDedicated()
    {
        return $this->dedicated !== null;
    }

    /**
     * Get 'dedicated' value
     *
     * @return bool
     */
    public function getDedicated()
    {
        return $this->dedicated;
    }

    /**
     * Set 'dedicated' value
     *
     * @param bool $value
     */
    public function setDedicated($value = null)
    {
        $this->dedicated = $value;
    }

    /**
     * Check if 'os' has a value
     *
     * @return bool
     */
    public function hasOs()
    {
        return $this->os !== null;
    }

    /**
     * Get 'os' value
     *
     * @return string
     */
    public function getOs()
    {
        return $this->os;
    }

    /**
     * Set 'os' value
     *
     * @param string $value
     */
    public function setOs($value = null)
    {
        $this->os = $value;
    }

    /**
     * Check if 'game_data' has a value
     *
     * @return bool
     */
    public function hasGameData()
    {
        return $this->game_data !== null;
    }

    /**
     * Get 'game_data' value
     *
     * @return string
     */
    public function getGameData()
    {
        return $this->game_data;
    }

    /**
     * Set 'game_data' value
     *
     * @param string $value
     */
    public function setGameData($value = null)
    {
        $this->game_data = $value;
    }

    /**
     * Check if 'game_data_version' has a value
     *
     * @return bool
     */
    public function hasGameDataVersion()
    {
        return $this->game_data_version !== null;
    }

    /**
     * Get 'game_data_version' value
     *
     * @return int
     */
    public function getGameDataVersion()
    {
        return $this->game_data_version;
    }

    /**
     * Set 'game_data_version' value
     *
     * @param int $value
     */
    public function setGameDataVersion($value = null)
    {
        $this->game_data_version = $value;
    }

    /**
     * Check if 'game_type' has a value
     *
     * @return bool
     */
    public function hasGameType()
    {
        return $this->game_type !== null;
    }

    /**
     * Get 'game_type' value
     *
     * @return string
     */
    public function getGameType()
    {
        return $this->game_type;
    }

    /**
     * Set 'game_type' value
     *
     * @param string $value
     */
    public function setGameType($value = null)
    {
        $this->game_type = $value;
    }

    /**
     * Check if 'map' has a value
     *
     * @return bool
     */
    public function hasMap()
    {
        return $this->map !== null;
    }

    /**
     * Get 'map' value
     *
     * @return string
     */
    public function getMap()
    {
        return $this->map;
    }

    /**
     * Set 'map' value
     *
     * @param string $value
     */
    public function setMap($value = null)
    {
        $this->map = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'steam_id_gs' => null,
            'ip' => null,
            'query_port' => null,
            'game_port' => null,
            'sourcetv_port' => null,
            'name' => null,
            'app_id' => null,
            'gamedir' => null,
            'version' => null,
            'product' => null,
            'region' => null,
            'players' => [],
            'max_players' => null,
            'bot_count' => null,
            'password' => null,
            'secure' => null,
            'dedicated' => null,
            'os' => null,
            'game_data' => null,
            'game_data_version' => null,
            'game_type' => null,
            'map' => null
        ], $values);

        $message->setSteamIdGs($values['steam_id_gs']);
        $message->setIp($values['ip']);
        $message->setQueryPort($values['query_port']);
        $message->setGamePort($values['game_port']);
        $message->setSourcetvPort($values['sourcetv_port']);
        $message->setName($values['name']);
        $message->setAppId($values['app_id']);
        $message->setGamedir($values['gamedir']);
        $message->setVersion($values['version']);
        $message->setProduct($values['product']);
        $message->setRegion($values['region']);
        $message->setMaxPlayers($values['max_players']);
        $message->setBotCount($values['bot_count']);
        $message->setPassword($values['password']);
        $message->setSecure($values['secure']);
        $message->setDedicated($values['dedicated']);
        $message->setOs($values['os']);
        $message->setGameData($values['game_data']);
        $message->setGameDataVersion($values['game_data_version']);
        $message->setGameType($values['game_type']);
        $message->setMap($values['map']);

        foreach ($values['players'] as $item) {
            $message->addPlayers($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgGameServerData',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'steam_id_gs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'query_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'game_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'sourcetv_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'gamedir',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'product',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'region',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'players',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.SteamMsgClientServer2.CMsgGameServerData.Player'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'max_players',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'bot_count',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'secure',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'dedicated',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'os',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'game_data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'game_data_version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'game_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'map',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->steam_id_gs !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->steam_id_gs);
        }

        if ($this->ip !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->ip);
        }

        if ($this->query_port !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->query_port);
        }

        if ($this->game_port !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->game_port);
        }

        if ($this->sourcetv_port !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->sourcetv_port);
        }

        if ($this->name !== null) {
            $writer->writeVarint($stream, 178);
            $writer->writeString($stream, $this->name);
        }

        if ($this->app_id !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->app_id);
        }

        if ($this->gamedir !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->gamedir);
        }

        if ($this->version !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->version);
        }

        if ($this->product !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->product);
        }

        if ($this->region !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->region);
        }

        if ($this->players !== null) {
            foreach ($this->players as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->max_players !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->max_players);
        }

        if ($this->bot_count !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->bot_count);
        }

        if ($this->password !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->password);
        }

        if ($this->secure !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeBool($stream, $this->secure);
        }

        if ($this->dedicated !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeBool($stream, $this->dedicated);
        }

        if ($this->os !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->os);
        }

        if ($this->game_data !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeString($stream, $this->game_data);
        }

        if ($this->game_data_version !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->game_data_version);
        }

        if ($this->game_type !== null) {
            $writer->writeVarint($stream, 162);
            $writer->writeString($stream, $this->game_type);
        }

        if ($this->map !== null) {
            $writer->writeVarint($stream, 170);
            $writer->writeString($stream, $this->map);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->steam_id_gs = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->query_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->game_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->sourcetv_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->gamedir = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->version = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->product = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->region = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\SteamMsgClientServer2\CMsgGameServerData\Player();

                if ($this->players === null) {
                    $this->players = new \Protobuf\MessageCollection();
                }

                $this->players->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->max_players = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->bot_count = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->password = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->secure = $reader->readBool($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->dedicated = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->os = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->game_data = $reader->readString($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->game_data_version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->game_type = $reader->readString($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->map = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->steam_id_gs !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->ip !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ip);
        }

        if ($this->query_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->query_port);
        }

        if ($this->game_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->game_port);
        }

        if ($this->sourcetv_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sourcetv_port);
        }

        if ($this->name !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_id);
        }

        if ($this->gamedir !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->gamedir);
        }

        if ($this->version !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->version);
        }

        if ($this->product !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->product);
        }

        if ($this->region !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->region);
        }

        if ($this->players !== null) {
            foreach ($this->players as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->max_players !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_players);
        }

        if ($this->bot_count !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->bot_count);
        }

        if ($this->password !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->secure !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->dedicated !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->os !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->os);
        }

        if ($this->game_data !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->game_data);
        }

        if ($this->game_data_version !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->game_data_version);
        }

        if ($this->game_type !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->game_type);
        }

        if ($this->map !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->map);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->steam_id_gs = null;
        $this->ip = null;
        $this->query_port = null;
        $this->game_port = null;
        $this->sourcetv_port = null;
        $this->name = null;
        $this->app_id = null;
        $this->gamedir = null;
        $this->version = null;
        $this->product = null;
        $this->region = null;
        $this->players = null;
        $this->max_players = null;
        $this->bot_count = null;
        $this->password = null;
        $this->secure = null;
        $this->dedicated = null;
        $this->os = null;
        $this->game_data = null;
        $this->game_data_version = null;
        $this->game_type = null;
        $this->map = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgGameServerData) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->steam_id_gs = ($message->steam_id_gs !== null) ? $message->steam_id_gs : $this->steam_id_gs;
        $this->ip = ($message->ip !== null) ? $message->ip : $this->ip;
        $this->query_port = ($message->query_port !== null) ? $message->query_port : $this->query_port;
        $this->game_port = ($message->game_port !== null) ? $message->game_port : $this->game_port;
        $this->sourcetv_port = ($message->sourcetv_port !== null) ? $message->sourcetv_port : $this->sourcetv_port;
        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->app_id = ($message->app_id !== null) ? $message->app_id : $this->app_id;
        $this->gamedir = ($message->gamedir !== null) ? $message->gamedir : $this->gamedir;
        $this->version = ($message->version !== null) ? $message->version : $this->version;
        $this->product = ($message->product !== null) ? $message->product : $this->product;
        $this->region = ($message->region !== null) ? $message->region : $this->region;
        $this->players = ($message->players !== null) ? $message->players : $this->players;
        $this->max_players = ($message->max_players !== null) ? $message->max_players : $this->max_players;
        $this->bot_count = ($message->bot_count !== null) ? $message->bot_count : $this->bot_count;
        $this->password = ($message->password !== null) ? $message->password : $this->password;
        $this->secure = ($message->secure !== null) ? $message->secure : $this->secure;
        $this->dedicated = ($message->dedicated !== null) ? $message->dedicated : $this->dedicated;
        $this->os = ($message->os !== null) ? $message->os : $this->os;
        $this->game_data = ($message->game_data !== null) ? $message->game_data : $this->game_data;
        $this->game_data_version = ($message->game_data_version !== null) ? $message->game_data_version : $this->game_data_version;
        $this->game_type = ($message->game_type !== null) ? $message->game_type : $this->game_type;
        $this->map = ($message->map !== null) ? $message->map : $this->map;
    }


}

