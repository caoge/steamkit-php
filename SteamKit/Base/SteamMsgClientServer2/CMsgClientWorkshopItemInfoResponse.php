<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgClientWorkshopItemInfoResponse
 */
class CMsgClientWorkshopItemInfoResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * eresult optional int32 = 1
     *
     * @var int
     */
    protected $eresult = null;

    /**
     * update_time optional uint32 = 2
     *
     * @var int
     */
    protected $update_time = null;

    /**
     * workshop_items repeated message = 3
     *
     * @var \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientWorkshopItemInfoResponse\WorkshopItemInfo>
     */
    protected $workshop_items = null;

    /**
     * private_items repeated fixed64 = 4
     *
     * @var \Protobuf\Collection
     */
    protected $private_items = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->eresult = '2';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'eresult' has a value
     *
     * @return bool
     */
    public function hasEresult()
    {
        return $this->eresult !== null;
    }

    /**
     * Get 'eresult' value
     *
     * @return int
     */
    public function getEresult()
    {
        return $this->eresult;
    }

    /**
     * Set 'eresult' value
     *
     * @param int $value
     */
    public function setEresult($value = null)
    {
        $this->eresult = $value;
    }

    /**
     * Check if 'update_time' has a value
     *
     * @return bool
     */
    public function hasUpdateTime()
    {
        return $this->update_time !== null;
    }

    /**
     * Get 'update_time' value
     *
     * @return int
     */
    public function getUpdateTime()
    {
        return $this->update_time;
    }

    /**
     * Set 'update_time' value
     *
     * @param int $value
     */
    public function setUpdateTime($value = null)
    {
        $this->update_time = $value;
    }

    /**
     * Check if 'workshop_items' has a value
     *
     * @return bool
     */
    public function hasWorkshopItemsList()
    {
        return $this->workshop_items !== null;
    }

    /**
     * Get 'workshop_items' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientWorkshopItemInfoResponse\WorkshopItemInfo>
     */
    public function getWorkshopItemsList()
    {
        return $this->workshop_items;
    }

    /**
     * Set 'workshop_items' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientWorkshopItemInfoResponse\WorkshopItemInfo> $value
     */
    public function setWorkshopItemsList(\Protobuf\Collection $value = null)
    {
        $this->workshop_items = $value;
    }

    /**
     * Add a new element to 'workshop_items'
     *
     * @param
     * \SteamKit\Base\SteamMsgClientServer2\CMsgClientWorkshopItemInfoResponse\WorkshopItemInfo
     * $value
     */
    public function addWorkshopItems(\SteamKit\Base\SteamMsgClientServer2\CMsgClientWorkshopItemInfoResponse\WorkshopItemInfo $value)
    {
        if ($this->workshop_items === null) {
            $this->workshop_items = new \Protobuf\MessageCollection();
        }

        $this->workshop_items->add($value);
    }

    /**
     * Check if 'private_items' has a value
     *
     * @return bool
     */
    public function hasPrivateItemsList()
    {
        return $this->private_items !== null;
    }

    /**
     * Get 'private_items' value
     *
     * @return \Protobuf\Collection
     */
    public function getPrivateItemsList()
    {
        return $this->private_items;
    }

    /**
     * Set 'private_items' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setPrivateItemsList(\Protobuf\Collection $value = null)
    {
        $this->private_items = $value;
    }

    /**
     * Add a new element to 'private_items'
     *
     * @param int $value
     */
    public function addPrivateItems($value)
    {
        if ($this->private_items === null) {
            $this->private_items = new \Protobuf\ScalarCollection();
        }

        $this->private_items->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'eresult' => '2',
            'update_time' => null,
            'workshop_items' => [],
            'private_items' => []
        ], $values);

        $message->setEresult($values['eresult']);
        $message->setUpdateTime($values['update_time']);

        foreach ($values['workshop_items'] as $item) {
            $message->addWorkshopItems($item);
        }

        foreach ($values['private_items'] as $item) {
            $message->addPrivateItems($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientWorkshopItemInfoResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'eresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'update_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'workshop_items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.SteamMsgClientServer2.CMsgClientWorkshopItemInfoResponse.WorkshopItemInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'private_items',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->eresult !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->eresult);
        }

        if ($this->update_time !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->update_time);
        }

        if ($this->workshop_items !== null) {
            foreach ($this->workshop_items as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->private_items !== null) {
            foreach ($this->private_items as $val) {
                $writer->writeVarint($stream, 33);
                $writer->writeFixed64($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->eresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->update_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\SteamMsgClientServer2\CMsgClientWorkshopItemInfoResponse\WorkshopItemInfo();

                if ($this->workshop_items === null) {
                    $this->workshop_items = new \Protobuf\MessageCollection();
                }

                $this->workshop_items->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                if ($this->private_items === null) {
                    $this->private_items = new \Protobuf\ScalarCollection();
                }

                $this->private_items->add($reader->readFixed64($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->eresult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult);
        }

        if ($this->update_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->update_time);
        }

        if ($this->workshop_items !== null) {
            foreach ($this->workshop_items as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->private_items !== null) {
            foreach ($this->private_items as $val) {
                $size += 1;
                $size += 8;
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->eresult = '2';
        $this->update_time = null;
        $this->workshop_items = null;
        $this->private_items = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientWorkshopItemInfoResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->eresult = ($message->eresult !== null) ? $message->eresult : $this->eresult;
        $this->update_time = ($message->update_time !== null) ? $message->update_time : $this->update_time;
        $this->workshop_items = ($message->workshop_items !== null) ? $message->workshop_items : $this->workshop_items;
        $this->private_items = ($message->private_items !== null) ? $message->private_items : $this->private_items;
    }


}

