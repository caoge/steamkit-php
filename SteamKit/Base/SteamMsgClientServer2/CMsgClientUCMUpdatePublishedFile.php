<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgClientUCMUpdatePublishedFile
 */
class CMsgClientUCMUpdatePublishedFile extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * app_id optional uint32 = 1
     *
     * @var int
     */
    protected $app_id = null;

    /**
     * published_file_id optional fixed64 = 2
     *
     * @var int
     */
    protected $published_file_id = null;

    /**
     * file_name optional string = 3
     *
     * @var string
     */
    protected $file_name = null;

    /**
     * preview_file_name optional string = 4
     *
     * @var string
     */
    protected $preview_file_name = null;

    /**
     * title optional string = 5
     *
     * @var string
     */
    protected $title = null;

    /**
     * description optional string = 6
     *
     * @var string
     */
    protected $description = null;

    /**
     * tags repeated string = 7
     *
     * @var \Protobuf\Collection
     */
    protected $tags = null;

    /**
     * visibility optional int32 = 8
     *
     * @var int
     */
    protected $visibility = null;

    /**
     * update_file optional bool = 9
     *
     * @var bool
     */
    protected $update_file = null;

    /**
     * update_preview_file optional bool = 10
     *
     * @var bool
     */
    protected $update_preview_file = null;

    /**
     * update_title optional bool = 11
     *
     * @var bool
     */
    protected $update_title = null;

    /**
     * update_description optional bool = 12
     *
     * @var bool
     */
    protected $update_description = null;

    /**
     * update_tags optional bool = 13
     *
     * @var bool
     */
    protected $update_tags = null;

    /**
     * update_visibility optional bool = 14
     *
     * @var bool
     */
    protected $update_visibility = null;

    /**
     * change_description optional string = 15
     *
     * @var string
     */
    protected $change_description = null;

    /**
     * update_url optional bool = 16
     *
     * @var bool
     */
    protected $update_url = null;

    /**
     * url optional string = 17
     *
     * @var string
     */
    protected $url = null;

    /**
     * update_content_manifest optional bool = 18
     *
     * @var bool
     */
    protected $update_content_manifest = null;

    /**
     * content_manifest optional fixed64 = 19
     *
     * @var int
     */
    protected $content_manifest = null;

    /**
     * metadata optional string = 20
     *
     * @var string
     */
    protected $metadata = null;

    /**
     * update_metadata optional bool = 21
     *
     * @var bool
     */
    protected $update_metadata = null;

    /**
     * language optional int32 = 22
     *
     * @var int
     */
    protected $language = null;

    /**
     * removed_kvtags repeated string = 23
     *
     * @var \Protobuf\Collection
     */
    protected $removed_kvtags = null;

    /**
     * kvtags repeated message = 24
     *
     * @var \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\KeyValueTag>
     */
    protected $kvtags = null;

    /**
     * previews repeated message = 25
     *
     * @var \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\AdditionalPreview>
     */
    protected $previews = null;

    /**
     * previews_to_remove repeated int32 = 26
     *
     * @var \Protobuf\Collection
     */
    protected $previews_to_remove = null;

    /**
     * clear_in_progress optional bool = 27
     *
     * @var bool
     */
    protected $clear_in_progress = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->language = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'app_id' has a value
     *
     * @return bool
     */
    public function hasAppId()
    {
        return $this->app_id !== null;
    }

    /**
     * Get 'app_id' value
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * Set 'app_id' value
     *
     * @param int $value
     */
    public function setAppId($value = null)
    {
        $this->app_id = $value;
    }

    /**
     * Check if 'published_file_id' has a value
     *
     * @return bool
     */
    public function hasPublishedFileId()
    {
        return $this->published_file_id !== null;
    }

    /**
     * Get 'published_file_id' value
     *
     * @return int
     */
    public function getPublishedFileId()
    {
        return $this->published_file_id;
    }

    /**
     * Set 'published_file_id' value
     *
     * @param int $value
     */
    public function setPublishedFileId($value = null)
    {
        $this->published_file_id = $value;
    }

    /**
     * Check if 'file_name' has a value
     *
     * @return bool
     */
    public function hasFileName()
    {
        return $this->file_name !== null;
    }

    /**
     * Get 'file_name' value
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->file_name;
    }

    /**
     * Set 'file_name' value
     *
     * @param string $value
     */
    public function setFileName($value = null)
    {
        $this->file_name = $value;
    }

    /**
     * Check if 'preview_file_name' has a value
     *
     * @return bool
     */
    public function hasPreviewFileName()
    {
        return $this->preview_file_name !== null;
    }

    /**
     * Get 'preview_file_name' value
     *
     * @return string
     */
    public function getPreviewFileName()
    {
        return $this->preview_file_name;
    }

    /**
     * Set 'preview_file_name' value
     *
     * @param string $value
     */
    public function setPreviewFileName($value = null)
    {
        $this->preview_file_name = $value;
    }

    /**
     * Check if 'title' has a value
     *
     * @return bool
     */
    public function hasTitle()
    {
        return $this->title !== null;
    }

    /**
     * Get 'title' value
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set 'title' value
     *
     * @param string $value
     */
    public function setTitle($value = null)
    {
        $this->title = $value;
    }

    /**
     * Check if 'description' has a value
     *
     * @return bool
     */
    public function hasDescription()
    {
        return $this->description !== null;
    }

    /**
     * Get 'description' value
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set 'description' value
     *
     * @param string $value
     */
    public function setDescription($value = null)
    {
        $this->description = $value;
    }

    /**
     * Check if 'tags' has a value
     *
     * @return bool
     */
    public function hasTagsList()
    {
        return $this->tags !== null;
    }

    /**
     * Get 'tags' value
     *
     * @return \Protobuf\Collection
     */
    public function getTagsList()
    {
        return $this->tags;
    }

    /**
     * Set 'tags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTagsList(\Protobuf\Collection $value = null)
    {
        $this->tags = $value;
    }

    /**
     * Add a new element to 'tags'
     *
     * @param string $value
     */
    public function addTags($value)
    {
        if ($this->tags === null) {
            $this->tags = new \Protobuf\ScalarCollection();
        }

        $this->tags->add($value);
    }

    /**
     * Check if 'visibility' has a value
     *
     * @return bool
     */
    public function hasVisibility()
    {
        return $this->visibility !== null;
    }

    /**
     * Get 'visibility' value
     *
     * @return int
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    /**
     * Set 'visibility' value
     *
     * @param int $value
     */
    public function setVisibility($value = null)
    {
        $this->visibility = $value;
    }

    /**
     * Check if 'update_file' has a value
     *
     * @return bool
     */
    public function hasUpdateFile()
    {
        return $this->update_file !== null;
    }

    /**
     * Get 'update_file' value
     *
     * @return bool
     */
    public function getUpdateFile()
    {
        return $this->update_file;
    }

    /**
     * Set 'update_file' value
     *
     * @param bool $value
     */
    public function setUpdateFile($value = null)
    {
        $this->update_file = $value;
    }

    /**
     * Check if 'update_preview_file' has a value
     *
     * @return bool
     */
    public function hasUpdatePreviewFile()
    {
        return $this->update_preview_file !== null;
    }

    /**
     * Get 'update_preview_file' value
     *
     * @return bool
     */
    public function getUpdatePreviewFile()
    {
        return $this->update_preview_file;
    }

    /**
     * Set 'update_preview_file' value
     *
     * @param bool $value
     */
    public function setUpdatePreviewFile($value = null)
    {
        $this->update_preview_file = $value;
    }

    /**
     * Check if 'update_title' has a value
     *
     * @return bool
     */
    public function hasUpdateTitle()
    {
        return $this->update_title !== null;
    }

    /**
     * Get 'update_title' value
     *
     * @return bool
     */
    public function getUpdateTitle()
    {
        return $this->update_title;
    }

    /**
     * Set 'update_title' value
     *
     * @param bool $value
     */
    public function setUpdateTitle($value = null)
    {
        $this->update_title = $value;
    }

    /**
     * Check if 'update_description' has a value
     *
     * @return bool
     */
    public function hasUpdateDescription()
    {
        return $this->update_description !== null;
    }

    /**
     * Get 'update_description' value
     *
     * @return bool
     */
    public function getUpdateDescription()
    {
        return $this->update_description;
    }

    /**
     * Set 'update_description' value
     *
     * @param bool $value
     */
    public function setUpdateDescription($value = null)
    {
        $this->update_description = $value;
    }

    /**
     * Check if 'update_tags' has a value
     *
     * @return bool
     */
    public function hasUpdateTags()
    {
        return $this->update_tags !== null;
    }

    /**
     * Get 'update_tags' value
     *
     * @return bool
     */
    public function getUpdateTags()
    {
        return $this->update_tags;
    }

    /**
     * Set 'update_tags' value
     *
     * @param bool $value
     */
    public function setUpdateTags($value = null)
    {
        $this->update_tags = $value;
    }

    /**
     * Check if 'update_visibility' has a value
     *
     * @return bool
     */
    public function hasUpdateVisibility()
    {
        return $this->update_visibility !== null;
    }

    /**
     * Get 'update_visibility' value
     *
     * @return bool
     */
    public function getUpdateVisibility()
    {
        return $this->update_visibility;
    }

    /**
     * Set 'update_visibility' value
     *
     * @param bool $value
     */
    public function setUpdateVisibility($value = null)
    {
        $this->update_visibility = $value;
    }

    /**
     * Check if 'change_description' has a value
     *
     * @return bool
     */
    public function hasChangeDescription()
    {
        return $this->change_description !== null;
    }

    /**
     * Get 'change_description' value
     *
     * @return string
     */
    public function getChangeDescription()
    {
        return $this->change_description;
    }

    /**
     * Set 'change_description' value
     *
     * @param string $value
     */
    public function setChangeDescription($value = null)
    {
        $this->change_description = $value;
    }

    /**
     * Check if 'update_url' has a value
     *
     * @return bool
     */
    public function hasUpdateUrl()
    {
        return $this->update_url !== null;
    }

    /**
     * Get 'update_url' value
     *
     * @return bool
     */
    public function getUpdateUrl()
    {
        return $this->update_url;
    }

    /**
     * Set 'update_url' value
     *
     * @param bool $value
     */
    public function setUpdateUrl($value = null)
    {
        $this->update_url = $value;
    }

    /**
     * Check if 'url' has a value
     *
     * @return bool
     */
    public function hasUrl()
    {
        return $this->url !== null;
    }

    /**
     * Get 'url' value
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Set 'url' value
     *
     * @param string $value
     */
    public function setUrl($value = null)
    {
        $this->url = $value;
    }

    /**
     * Check if 'update_content_manifest' has a value
     *
     * @return bool
     */
    public function hasUpdateContentManifest()
    {
        return $this->update_content_manifest !== null;
    }

    /**
     * Get 'update_content_manifest' value
     *
     * @return bool
     */
    public function getUpdateContentManifest()
    {
        return $this->update_content_manifest;
    }

    /**
     * Set 'update_content_manifest' value
     *
     * @param bool $value
     */
    public function setUpdateContentManifest($value = null)
    {
        $this->update_content_manifest = $value;
    }

    /**
     * Check if 'content_manifest' has a value
     *
     * @return bool
     */
    public function hasContentManifest()
    {
        return $this->content_manifest !== null;
    }

    /**
     * Get 'content_manifest' value
     *
     * @return int
     */
    public function getContentManifest()
    {
        return $this->content_manifest;
    }

    /**
     * Set 'content_manifest' value
     *
     * @param int $value
     */
    public function setContentManifest($value = null)
    {
        $this->content_manifest = $value;
    }

    /**
     * Check if 'metadata' has a value
     *
     * @return bool
     */
    public function hasMetadata()
    {
        return $this->metadata !== null;
    }

    /**
     * Get 'metadata' value
     *
     * @return string
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set 'metadata' value
     *
     * @param string $value
     */
    public function setMetadata($value = null)
    {
        $this->metadata = $value;
    }

    /**
     * Check if 'update_metadata' has a value
     *
     * @return bool
     */
    public function hasUpdateMetadata()
    {
        return $this->update_metadata !== null;
    }

    /**
     * Get 'update_metadata' value
     *
     * @return bool
     */
    public function getUpdateMetadata()
    {
        return $this->update_metadata;
    }

    /**
     * Set 'update_metadata' value
     *
     * @param bool $value
     */
    public function setUpdateMetadata($value = null)
    {
        $this->update_metadata = $value;
    }

    /**
     * Check if 'language' has a value
     *
     * @return bool
     */
    public function hasLanguage()
    {
        return $this->language !== null;
    }

    /**
     * Get 'language' value
     *
     * @return int
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * Set 'language' value
     *
     * @param int $value
     */
    public function setLanguage($value = null)
    {
        $this->language = $value;
    }

    /**
     * Check if 'removed_kvtags' has a value
     *
     * @return bool
     */
    public function hasRemovedKvtagsList()
    {
        return $this->removed_kvtags !== null;
    }

    /**
     * Get 'removed_kvtags' value
     *
     * @return \Protobuf\Collection
     */
    public function getRemovedKvtagsList()
    {
        return $this->removed_kvtags;
    }

    /**
     * Set 'removed_kvtags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setRemovedKvtagsList(\Protobuf\Collection $value = null)
    {
        $this->removed_kvtags = $value;
    }

    /**
     * Add a new element to 'removed_kvtags'
     *
     * @param string $value
     */
    public function addRemovedKvtags($value)
    {
        if ($this->removed_kvtags === null) {
            $this->removed_kvtags = new \Protobuf\ScalarCollection();
        }

        $this->removed_kvtags->add($value);
    }

    /**
     * Check if 'kvtags' has a value
     *
     * @return bool
     */
    public function hasKvtagsList()
    {
        return $this->kvtags !== null;
    }

    /**
     * Get 'kvtags' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\KeyValueTag>
     */
    public function getKvtagsList()
    {
        return $this->kvtags;
    }

    /**
     * Set 'kvtags' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\KeyValueTag> $value
     */
    public function setKvtagsList(\Protobuf\Collection $value = null)
    {
        $this->kvtags = $value;
    }

    /**
     * Add a new element to 'kvtags'
     *
     * @param
     * \SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\KeyValueTag
     * $value
     */
    public function addKvtags(\SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\KeyValueTag $value)
    {
        if ($this->kvtags === null) {
            $this->kvtags = new \Protobuf\MessageCollection();
        }

        $this->kvtags->add($value);
    }

    /**
     * Check if 'previews' has a value
     *
     * @return bool
     */
    public function hasPreviewsList()
    {
        return $this->previews !== null;
    }

    /**
     * Get 'previews' value
     *
     * @return \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\AdditionalPreview>
     */
    public function getPreviewsList()
    {
        return $this->previews;
    }

    /**
     * Set 'previews' value
     *
     * @param \Protobuf\Collection<\SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\AdditionalPreview> $value
     */
    public function setPreviewsList(\Protobuf\Collection $value = null)
    {
        $this->previews = $value;
    }

    /**
     * Add a new element to 'previews'
     *
     * @param
     * \SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\AdditionalPreview
     * $value
     */
    public function addPreviews(\SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\AdditionalPreview $value)
    {
        if ($this->previews === null) {
            $this->previews = new \Protobuf\MessageCollection();
        }

        $this->previews->add($value);
    }

    /**
     * Check if 'previews_to_remove' has a value
     *
     * @return bool
     */
    public function hasPreviewsToRemoveList()
    {
        return $this->previews_to_remove !== null;
    }

    /**
     * Get 'previews_to_remove' value
     *
     * @return \Protobuf\Collection
     */
    public function getPreviewsToRemoveList()
    {
        return $this->previews_to_remove;
    }

    /**
     * Set 'previews_to_remove' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setPreviewsToRemoveList(\Protobuf\Collection $value = null)
    {
        $this->previews_to_remove = $value;
    }

    /**
     * Add a new element to 'previews_to_remove'
     *
     * @param int $value
     */
    public function addPreviewsToRemove($value)
    {
        if ($this->previews_to_remove === null) {
            $this->previews_to_remove = new \Protobuf\ScalarCollection();
        }

        $this->previews_to_remove->add($value);
    }

    /**
     * Check if 'clear_in_progress' has a value
     *
     * @return bool
     */
    public function hasClearInProgress()
    {
        return $this->clear_in_progress !== null;
    }

    /**
     * Get 'clear_in_progress' value
     *
     * @return bool
     */
    public function getClearInProgress()
    {
        return $this->clear_in_progress;
    }

    /**
     * Set 'clear_in_progress' value
     *
     * @param bool $value
     */
    public function setClearInProgress($value = null)
    {
        $this->clear_in_progress = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'app_id' => null,
            'published_file_id' => null,
            'file_name' => null,
            'preview_file_name' => null,
            'title' => null,
            'description' => null,
            'tags' => [],
            'visibility' => null,
            'update_file' => null,
            'update_preview_file' => null,
            'update_title' => null,
            'update_description' => null,
            'update_tags' => null,
            'update_visibility' => null,
            'change_description' => null,
            'update_url' => null,
            'url' => null,
            'update_content_manifest' => null,
            'content_manifest' => null,
            'metadata' => null,
            'update_metadata' => null,
            'language' => '0',
            'removed_kvtags' => [],
            'kvtags' => [],
            'previews' => [],
            'previews_to_remove' => [],
            'clear_in_progress' => null
        ], $values);

        $message->setAppId($values['app_id']);
        $message->setPublishedFileId($values['published_file_id']);
        $message->setFileName($values['file_name']);
        $message->setPreviewFileName($values['preview_file_name']);
        $message->setTitle($values['title']);
        $message->setDescription($values['description']);
        $message->setVisibility($values['visibility']);
        $message->setUpdateFile($values['update_file']);
        $message->setUpdatePreviewFile($values['update_preview_file']);
        $message->setUpdateTitle($values['update_title']);
        $message->setUpdateDescription($values['update_description']);
        $message->setUpdateTags($values['update_tags']);
        $message->setUpdateVisibility($values['update_visibility']);
        $message->setChangeDescription($values['change_description']);
        $message->setUpdateUrl($values['update_url']);
        $message->setUrl($values['url']);
        $message->setUpdateContentManifest($values['update_content_manifest']);
        $message->setContentManifest($values['content_manifest']);
        $message->setMetadata($values['metadata']);
        $message->setUpdateMetadata($values['update_metadata']);
        $message->setLanguage($values['language']);
        $message->setClearInProgress($values['clear_in_progress']);

        foreach ($values['tags'] as $item) {
            $message->addTags($item);
        }

        foreach ($values['removed_kvtags'] as $item) {
            $message->addRemovedKvtags($item);
        }

        foreach ($values['kvtags'] as $item) {
            $message->addKvtags($item);
        }

        foreach ($values['previews'] as $item) {
            $message->addPreviews($item);
        }

        foreach ($values['previews_to_remove'] as $item) {
            $message->addPreviewsToRemove($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientUCMUpdatePublishedFile',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'published_file_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'file_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'preview_file_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'title',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'visibility',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'update_file',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'update_preview_file',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'update_title',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'update_description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'update_tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'update_visibility',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'change_description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'update_url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'update_content_manifest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'content_manifest',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'update_metadata',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'language',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'removed_kvtags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'kvtags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.SteamMsgClientServer2.CMsgClientUCMUpdatePublishedFile.KeyValueTag'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'previews',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.SteamKit.Base.SteamMsgClientServer2.CMsgClientUCMUpdatePublishedFile.AdditionalPreview'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'previews_to_remove',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'clear_in_progress',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->app_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->app_id);
        }

        if ($this->published_file_id !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeFixed64($stream, $this->published_file_id);
        }

        if ($this->file_name !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->file_name);
        }

        if ($this->preview_file_name !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->preview_file_name);
        }

        if ($this->title !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->title);
        }

        if ($this->description !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->description);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->visibility !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->visibility);
        }

        if ($this->update_file !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->update_file);
        }

        if ($this->update_preview_file !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->update_preview_file);
        }

        if ($this->update_title !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->update_title);
        }

        if ($this->update_description !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->update_description);
        }

        if ($this->update_tags !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->update_tags);
        }

        if ($this->update_visibility !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->update_visibility);
        }

        if ($this->change_description !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeString($stream, $this->change_description);
        }

        if ($this->update_url !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeBool($stream, $this->update_url);
        }

        if ($this->url !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeString($stream, $this->url);
        }

        if ($this->update_content_manifest !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeBool($stream, $this->update_content_manifest);
        }

        if ($this->content_manifest !== null) {
            $writer->writeVarint($stream, 153);
            $writer->writeFixed64($stream, $this->content_manifest);
        }

        if ($this->metadata !== null) {
            $writer->writeVarint($stream, 162);
            $writer->writeString($stream, $this->metadata);
        }

        if ($this->update_metadata !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeBool($stream, $this->update_metadata);
        }

        if ($this->language !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeVarint($stream, $this->language);
        }

        if ($this->removed_kvtags !== null) {
            foreach ($this->removed_kvtags as $val) {
                $writer->writeVarint($stream, 186);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->kvtags !== null) {
            foreach ($this->kvtags as $val) {
                $writer->writeVarint($stream, 194);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->previews !== null) {
            foreach ($this->previews as $val) {
                $writer->writeVarint($stream, 202);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->previews_to_remove !== null) {
            foreach ($this->previews_to_remove as $val) {
                $writer->writeVarint($stream, 208);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->clear_in_progress !== null) {
            $writer->writeVarint($stream, 216);
            $writer->writeBool($stream, $this->clear_in_progress);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->published_file_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->file_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->preview_file_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->title = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->description = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->tags === null) {
                    $this->tags = new \Protobuf\ScalarCollection();
                }

                $this->tags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->visibility = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_file = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_preview_file = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_title = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_description = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_tags = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_visibility = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->change_description = $reader->readString($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_url = $reader->readBool($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->url = $reader->readString($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_content_manifest = $reader->readBool($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->content_manifest = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->metadata = $reader->readString($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->update_metadata = $reader->readBool($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->language = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->removed_kvtags === null) {
                    $this->removed_kvtags = new \Protobuf\ScalarCollection();
                }

                $this->removed_kvtags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\KeyValueTag();

                if ($this->kvtags === null) {
                    $this->kvtags = new \Protobuf\MessageCollection();
                }

                $this->kvtags->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile\AdditionalPreview();

                if ($this->previews === null) {
                    $this->previews = new \Protobuf\MessageCollection();
                }

                $this->previews->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                if ($this->previews_to_remove === null) {
                    $this->previews_to_remove = new \Protobuf\ScalarCollection();
                }

                $this->previews_to_remove->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->clear_in_progress = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_id);
        }

        if ($this->published_file_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->file_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->file_name);
        }

        if ($this->preview_file_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->preview_file_name);
        }

        if ($this->title !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->title);
        }

        if ($this->description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->description);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->visibility !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->visibility);
        }

        if ($this->update_file !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->update_preview_file !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->update_title !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->update_description !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->update_tags !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->update_visibility !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->change_description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->change_description);
        }

        if ($this->update_url !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->url !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->url);
        }

        if ($this->update_content_manifest !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->content_manifest !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->metadata !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->metadata);
        }

        if ($this->update_metadata !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->language !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->language);
        }

        if ($this->removed_kvtags !== null) {
            foreach ($this->removed_kvtags as $val) {
                $size += 2;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->kvtags !== null) {
            foreach ($this->kvtags as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->previews !== null) {
            foreach ($this->previews as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->previews_to_remove !== null) {
            foreach ($this->previews_to_remove as $val) {
                $size += 2;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->clear_in_progress !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->app_id = null;
        $this->published_file_id = null;
        $this->file_name = null;
        $this->preview_file_name = null;
        $this->title = null;
        $this->description = null;
        $this->tags = null;
        $this->visibility = null;
        $this->update_file = null;
        $this->update_preview_file = null;
        $this->update_title = null;
        $this->update_description = null;
        $this->update_tags = null;
        $this->update_visibility = null;
        $this->change_description = null;
        $this->update_url = null;
        $this->url = null;
        $this->update_content_manifest = null;
        $this->content_manifest = null;
        $this->metadata = null;
        $this->update_metadata = null;
        $this->language = '0';
        $this->removed_kvtags = null;
        $this->kvtags = null;
        $this->previews = null;
        $this->previews_to_remove = null;
        $this->clear_in_progress = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientUCMUpdatePublishedFile) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->app_id = ($message->app_id !== null) ? $message->app_id : $this->app_id;
        $this->published_file_id = ($message->published_file_id !== null) ? $message->published_file_id : $this->published_file_id;
        $this->file_name = ($message->file_name !== null) ? $message->file_name : $this->file_name;
        $this->preview_file_name = ($message->preview_file_name !== null) ? $message->preview_file_name : $this->preview_file_name;
        $this->title = ($message->title !== null) ? $message->title : $this->title;
        $this->description = ($message->description !== null) ? $message->description : $this->description;
        $this->tags = ($message->tags !== null) ? $message->tags : $this->tags;
        $this->visibility = ($message->visibility !== null) ? $message->visibility : $this->visibility;
        $this->update_file = ($message->update_file !== null) ? $message->update_file : $this->update_file;
        $this->update_preview_file = ($message->update_preview_file !== null) ? $message->update_preview_file : $this->update_preview_file;
        $this->update_title = ($message->update_title !== null) ? $message->update_title : $this->update_title;
        $this->update_description = ($message->update_description !== null) ? $message->update_description : $this->update_description;
        $this->update_tags = ($message->update_tags !== null) ? $message->update_tags : $this->update_tags;
        $this->update_visibility = ($message->update_visibility !== null) ? $message->update_visibility : $this->update_visibility;
        $this->change_description = ($message->change_description !== null) ? $message->change_description : $this->change_description;
        $this->update_url = ($message->update_url !== null) ? $message->update_url : $this->update_url;
        $this->url = ($message->url !== null) ? $message->url : $this->url;
        $this->update_content_manifest = ($message->update_content_manifest !== null) ? $message->update_content_manifest : $this->update_content_manifest;
        $this->content_manifest = ($message->content_manifest !== null) ? $message->content_manifest : $this->content_manifest;
        $this->metadata = ($message->metadata !== null) ? $message->metadata : $this->metadata;
        $this->update_metadata = ($message->update_metadata !== null) ? $message->update_metadata : $this->update_metadata;
        $this->language = ($message->language !== null) ? $message->language : $this->language;
        $this->removed_kvtags = ($message->removed_kvtags !== null) ? $message->removed_kvtags : $this->removed_kvtags;
        $this->kvtags = ($message->kvtags !== null) ? $message->kvtags : $this->kvtags;
        $this->previews = ($message->previews !== null) ? $message->previews : $this->previews;
        $this->previews_to_remove = ($message->previews_to_remove !== null) ? $message->previews_to_remove : $this->previews_to_remove;
        $this->clear_in_progress = ($message->clear_in_progress !== null) ? $message->clear_in_progress : $this->clear_in_progress;
    }


}

