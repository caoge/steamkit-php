<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer2.CMsgDRMDownloadResponse
 */
class CMsgDRMDownloadResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * eresult optional uint32 = 1
     *
     * @var int
     */
    protected $eresult = null;

    /**
     * app_id optional uint32 = 2
     *
     * @var int
     */
    protected $app_id = null;

    /**
     * blob_download_type optional uint32 = 3
     *
     * @var int
     */
    protected $blob_download_type = null;

    /**
     * merge_guid optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $merge_guid = null;

    /**
     * download_file_dfs_ip optional uint32 = 5
     *
     * @var int
     */
    protected $download_file_dfs_ip = null;

    /**
     * download_file_dfs_port optional uint32 = 6
     *
     * @var int
     */
    protected $download_file_dfs_port = null;

    /**
     * download_file_url optional string = 7
     *
     * @var string
     */
    protected $download_file_url = null;

    /**
     * module_path optional string = 8
     *
     * @var string
     */
    protected $module_path = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->eresult = '2';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'eresult' has a value
     *
     * @return bool
     */
    public function hasEresult()
    {
        return $this->eresult !== null;
    }

    /**
     * Get 'eresult' value
     *
     * @return int
     */
    public function getEresult()
    {
        return $this->eresult;
    }

    /**
     * Set 'eresult' value
     *
     * @param int $value
     */
    public function setEresult($value = null)
    {
        $this->eresult = $value;
    }

    /**
     * Check if 'app_id' has a value
     *
     * @return bool
     */
    public function hasAppId()
    {
        return $this->app_id !== null;
    }

    /**
     * Get 'app_id' value
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }

    /**
     * Set 'app_id' value
     *
     * @param int $value
     */
    public function setAppId($value = null)
    {
        $this->app_id = $value;
    }

    /**
     * Check if 'blob_download_type' has a value
     *
     * @return bool
     */
    public function hasBlobDownloadType()
    {
        return $this->blob_download_type !== null;
    }

    /**
     * Get 'blob_download_type' value
     *
     * @return int
     */
    public function getBlobDownloadType()
    {
        return $this->blob_download_type;
    }

    /**
     * Set 'blob_download_type' value
     *
     * @param int $value
     */
    public function setBlobDownloadType($value = null)
    {
        $this->blob_download_type = $value;
    }

    /**
     * Check if 'merge_guid' has a value
     *
     * @return bool
     */
    public function hasMergeGuid()
    {
        return $this->merge_guid !== null;
    }

    /**
     * Get 'merge_guid' value
     *
     * @return \Protobuf\Stream
     */
    public function getMergeGuid()
    {
        return $this->merge_guid;
    }

    /**
     * Set 'merge_guid' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setMergeGuid($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->merge_guid = $value;
    }

    /**
     * Check if 'download_file_dfs_ip' has a value
     *
     * @return bool
     */
    public function hasDownloadFileDfsIp()
    {
        return $this->download_file_dfs_ip !== null;
    }

    /**
     * Get 'download_file_dfs_ip' value
     *
     * @return int
     */
    public function getDownloadFileDfsIp()
    {
        return $this->download_file_dfs_ip;
    }

    /**
     * Set 'download_file_dfs_ip' value
     *
     * @param int $value
     */
    public function setDownloadFileDfsIp($value = null)
    {
        $this->download_file_dfs_ip = $value;
    }

    /**
     * Check if 'download_file_dfs_port' has a value
     *
     * @return bool
     */
    public function hasDownloadFileDfsPort()
    {
        return $this->download_file_dfs_port !== null;
    }

    /**
     * Get 'download_file_dfs_port' value
     *
     * @return int
     */
    public function getDownloadFileDfsPort()
    {
        return $this->download_file_dfs_port;
    }

    /**
     * Set 'download_file_dfs_port' value
     *
     * @param int $value
     */
    public function setDownloadFileDfsPort($value = null)
    {
        $this->download_file_dfs_port = $value;
    }

    /**
     * Check if 'download_file_url' has a value
     *
     * @return bool
     */
    public function hasDownloadFileUrl()
    {
        return $this->download_file_url !== null;
    }

    /**
     * Get 'download_file_url' value
     *
     * @return string
     */
    public function getDownloadFileUrl()
    {
        return $this->download_file_url;
    }

    /**
     * Set 'download_file_url' value
     *
     * @param string $value
     */
    public function setDownloadFileUrl($value = null)
    {
        $this->download_file_url = $value;
    }

    /**
     * Check if 'module_path' has a value
     *
     * @return bool
     */
    public function hasModulePath()
    {
        return $this->module_path !== null;
    }

    /**
     * Get 'module_path' value
     *
     * @return string
     */
    public function getModulePath()
    {
        return $this->module_path;
    }

    /**
     * Set 'module_path' value
     *
     * @param string $value
     */
    public function setModulePath($value = null)
    {
        $this->module_path = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'eresult' => '2',
            'app_id' => null,
            'blob_download_type' => null,
            'merge_guid' => null,
            'download_file_dfs_ip' => null,
            'download_file_dfs_port' => null,
            'download_file_url' => null,
            'module_path' => null
        ], $values);

        $message->setEresult($values['eresult']);
        $message->setAppId($values['app_id']);
        $message->setBlobDownloadType($values['blob_download_type']);
        $message->setMergeGuid($values['merge_guid']);
        $message->setDownloadFileDfsIp($values['download_file_dfs_ip']);
        $message->setDownloadFileDfsPort($values['download_file_dfs_port']);
        $message->setDownloadFileUrl($values['download_file_url']);
        $message->setModulePath($values['module_path']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgDRMDownloadResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'eresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'app_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'blob_download_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'merge_guid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'download_file_dfs_ip',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'download_file_dfs_port',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'download_file_url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'module_path',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->eresult !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->eresult);
        }

        if ($this->app_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->app_id);
        }

        if ($this->blob_download_type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->blob_download_type);
        }

        if ($this->merge_guid !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->merge_guid);
        }

        if ($this->download_file_dfs_ip !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->download_file_dfs_ip);
        }

        if ($this->download_file_dfs_port !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->download_file_dfs_port);
        }

        if ($this->download_file_url !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->download_file_url);
        }

        if ($this->module_path !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->module_path);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->eresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->app_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->blob_download_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->merge_guid = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->download_file_dfs_ip = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->download_file_dfs_port = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->download_file_url = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->module_path = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->eresult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult);
        }

        if ($this->app_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_id);
        }

        if ($this->blob_download_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->blob_download_type);
        }

        if ($this->merge_guid !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->merge_guid);
        }

        if ($this->download_file_dfs_ip !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->download_file_dfs_ip);
        }

        if ($this->download_file_dfs_port !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->download_file_dfs_port);
        }

        if ($this->download_file_url !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->download_file_url);
        }

        if ($this->module_path !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->module_path);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->eresult = '2';
        $this->app_id = null;
        $this->blob_download_type = null;
        $this->merge_guid = null;
        $this->download_file_dfs_ip = null;
        $this->download_file_dfs_port = null;
        $this->download_file_url = null;
        $this->module_path = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgDRMDownloadResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->eresult = ($message->eresult !== null) ? $message->eresult : $this->eresult;
        $this->app_id = ($message->app_id !== null) ? $message->app_id : $this->app_id;
        $this->blob_download_type = ($message->blob_download_type !== null) ? $message->blob_download_type : $this->blob_download_type;
        $this->merge_guid = ($message->merge_guid !== null) ? $message->merge_guid : $this->merge_guid;
        $this->download_file_dfs_ip = ($message->download_file_dfs_ip !== null) ? $message->download_file_dfs_ip : $this->download_file_dfs_ip;
        $this->download_file_dfs_port = ($message->download_file_dfs_port !== null) ? $message->download_file_dfs_port : $this->download_file_dfs_port;
        $this->download_file_url = ($message->download_file_url !== null) ? $message->download_file_url : $this->download_file_url;
        $this->module_path = ($message->module_path !== null) ? $message->module_path : $this->module_path;
    }


}

