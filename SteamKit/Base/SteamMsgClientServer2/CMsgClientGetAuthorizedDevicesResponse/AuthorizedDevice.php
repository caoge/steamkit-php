<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2\CMsgClientGetAuthorizedDevicesResponse;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice
 */
class AuthorizedDevice extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * auth_device_token optional uint64 = 1
     *
     * @var int
     */
    protected $auth_device_token = null;

    /**
     * device_name optional string = 2
     *
     * @var string
     */
    protected $device_name = null;

    /**
     * last_access_time optional uint32 = 3
     *
     * @var int
     */
    protected $last_access_time = null;

    /**
     * borrower_id optional uint32 = 4
     *
     * @var int
     */
    protected $borrower_id = null;

    /**
     * is_pending optional bool = 5
     *
     * @var bool
     */
    protected $is_pending = null;

    /**
     * app_played optional uint32 = 6
     *
     * @var int
     */
    protected $app_played = null;

    /**
     * Check if 'auth_device_token' has a value
     *
     * @return bool
     */
    public function hasAuthDeviceToken()
    {
        return $this->auth_device_token !== null;
    }

    /**
     * Get 'auth_device_token' value
     *
     * @return int
     */
    public function getAuthDeviceToken()
    {
        return $this->auth_device_token;
    }

    /**
     * Set 'auth_device_token' value
     *
     * @param int $value
     */
    public function setAuthDeviceToken($value = null)
    {
        $this->auth_device_token = $value;
    }

    /**
     * Check if 'device_name' has a value
     *
     * @return bool
     */
    public function hasDeviceName()
    {
        return $this->device_name !== null;
    }

    /**
     * Get 'device_name' value
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->device_name;
    }

    /**
     * Set 'device_name' value
     *
     * @param string $value
     */
    public function setDeviceName($value = null)
    {
        $this->device_name = $value;
    }

    /**
     * Check if 'last_access_time' has a value
     *
     * @return bool
     */
    public function hasLastAccessTime()
    {
        return $this->last_access_time !== null;
    }

    /**
     * Get 'last_access_time' value
     *
     * @return int
     */
    public function getLastAccessTime()
    {
        return $this->last_access_time;
    }

    /**
     * Set 'last_access_time' value
     *
     * @param int $value
     */
    public function setLastAccessTime($value = null)
    {
        $this->last_access_time = $value;
    }

    /**
     * Check if 'borrower_id' has a value
     *
     * @return bool
     */
    public function hasBorrowerId()
    {
        return $this->borrower_id !== null;
    }

    /**
     * Get 'borrower_id' value
     *
     * @return int
     */
    public function getBorrowerId()
    {
        return $this->borrower_id;
    }

    /**
     * Set 'borrower_id' value
     *
     * @param int $value
     */
    public function setBorrowerId($value = null)
    {
        $this->borrower_id = $value;
    }

    /**
     * Check if 'is_pending' has a value
     *
     * @return bool
     */
    public function hasIsPending()
    {
        return $this->is_pending !== null;
    }

    /**
     * Get 'is_pending' value
     *
     * @return bool
     */
    public function getIsPending()
    {
        return $this->is_pending;
    }

    /**
     * Set 'is_pending' value
     *
     * @param bool $value
     */
    public function setIsPending($value = null)
    {
        $this->is_pending = $value;
    }

    /**
     * Check if 'app_played' has a value
     *
     * @return bool
     */
    public function hasAppPlayed()
    {
        return $this->app_played !== null;
    }

    /**
     * Get 'app_played' value
     *
     * @return int
     */
    public function getAppPlayed()
    {
        return $this->app_played;
    }

    /**
     * Set 'app_played' value
     *
     * @param int $value
     */
    public function setAppPlayed($value = null)
    {
        $this->app_played = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'auth_device_token' => null,
            'device_name' => null,
            'last_access_time' => null,
            'borrower_id' => null,
            'is_pending' => null,
            'app_played' => null
        ], $values);

        $message->setAuthDeviceToken($values['auth_device_token']);
        $message->setDeviceName($values['device_name']);
        $message->setLastAccessTime($values['last_access_time']);
        $message->setBorrowerId($values['borrower_id']);
        $message->setIsPending($values['is_pending']);
        $message->setAppPlayed($values['app_played']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'AuthorizedDevice',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'auth_device_token',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'device_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'last_access_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'borrower_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'is_pending',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'app_played',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->auth_device_token !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->auth_device_token);
        }

        if ($this->device_name !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->device_name);
        }

        if ($this->last_access_time !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->last_access_time);
        }

        if ($this->borrower_id !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->borrower_id);
        }

        if ($this->is_pending !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->is_pending);
        }

        if ($this->app_played !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->app_played);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->auth_device_token = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_access_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->borrower_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_pending = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->app_played = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->auth_device_token !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->auth_device_token);
        }

        if ($this->device_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_name);
        }

        if ($this->last_access_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->last_access_time);
        }

        if ($this->borrower_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->borrower_id);
        }

        if ($this->is_pending !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->app_played !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->app_played);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->auth_device_token = null;
        $this->device_name = null;
        $this->last_access_time = null;
        $this->borrower_id = null;
        $this->is_pending = null;
        $this->app_played = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientGetAuthorizedDevicesResponse\AuthorizedDevice) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->auth_device_token = ($message->auth_device_token !== null) ? $message->auth_device_token : $this->auth_device_token;
        $this->device_name = ($message->device_name !== null) ? $message->device_name : $this->device_name;
        $this->last_access_time = ($message->last_access_time !== null) ? $message->last_access_time : $this->last_access_time;
        $this->borrower_id = ($message->borrower_id !== null) ? $message->borrower_id : $this->borrower_id;
        $this->is_pending = ($message->is_pending !== null) ? $message->is_pending : $this->is_pending;
        $this->app_played = ($message->app_played !== null) ? $message->app_played : $this->app_played;
    }


}

