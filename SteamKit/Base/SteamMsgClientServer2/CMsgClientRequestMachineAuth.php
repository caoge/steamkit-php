<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgClientRequestMachineAuth
 */
class CMsgClientRequestMachineAuth extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * filename optional string = 1
     *
     * @var string
     */
    protected $filename = null;

    /**
     * eresult_sentryfile optional uint32 = 2
     *
     * @var int
     */
    protected $eresult_sentryfile = null;

    /**
     * filesize optional uint32 = 3
     *
     * @var int
     */
    protected $filesize = null;

    /**
     * sha_sentryfile optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $sha_sentryfile = null;

    /**
     * lock_account_action optional int32 = 6
     *
     * @var int
     */
    protected $lock_account_action = null;

    /**
     * otp_type optional uint32 = 7
     *
     * @var int
     */
    protected $otp_type = null;

    /**
     * otp_identifier optional string = 8
     *
     * @var string
     */
    protected $otp_identifier = null;

    /**
     * otp_sharedsecret optional bytes = 9
     *
     * @var \Protobuf\Stream
     */
    protected $otp_sharedsecret = null;

    /**
     * otp_value optional uint32 = 10
     *
     * @var int
     */
    protected $otp_value = null;

    /**
     * machine_name optional string = 11
     *
     * @var string
     */
    protected $machine_name = null;

    /**
     * machine_name_userchosen optional string = 12
     *
     * @var string
     */
    protected $machine_name_userchosen = null;

    /**
     * Check if 'filename' has a value
     *
     * @return bool
     */
    public function hasFilename()
    {
        return $this->filename !== null;
    }

    /**
     * Get 'filename' value
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * Set 'filename' value
     *
     * @param string $value
     */
    public function setFilename($value = null)
    {
        $this->filename = $value;
    }

    /**
     * Check if 'eresult_sentryfile' has a value
     *
     * @return bool
     */
    public function hasEresultSentryfile()
    {
        return $this->eresult_sentryfile !== null;
    }

    /**
     * Get 'eresult_sentryfile' value
     *
     * @return int
     */
    public function getEresultSentryfile()
    {
        return $this->eresult_sentryfile;
    }

    /**
     * Set 'eresult_sentryfile' value
     *
     * @param int $value
     */
    public function setEresultSentryfile($value = null)
    {
        $this->eresult_sentryfile = $value;
    }

    /**
     * Check if 'filesize' has a value
     *
     * @return bool
     */
    public function hasFilesize()
    {
        return $this->filesize !== null;
    }

    /**
     * Get 'filesize' value
     *
     * @return int
     */
    public function getFilesize()
    {
        return $this->filesize;
    }

    /**
     * Set 'filesize' value
     *
     * @param int $value
     */
    public function setFilesize($value = null)
    {
        $this->filesize = $value;
    }

    /**
     * Check if 'sha_sentryfile' has a value
     *
     * @return bool
     */
    public function hasShaSentryfile()
    {
        return $this->sha_sentryfile !== null;
    }

    /**
     * Get 'sha_sentryfile' value
     *
     * @return \Protobuf\Stream
     */
    public function getShaSentryfile()
    {
        return $this->sha_sentryfile;
    }

    /**
     * Set 'sha_sentryfile' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setShaSentryfile($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->sha_sentryfile = $value;
    }

    /**
     * Check if 'lock_account_action' has a value
     *
     * @return bool
     */
    public function hasLockAccountAction()
    {
        return $this->lock_account_action !== null;
    }

    /**
     * Get 'lock_account_action' value
     *
     * @return int
     */
    public function getLockAccountAction()
    {
        return $this->lock_account_action;
    }

    /**
     * Set 'lock_account_action' value
     *
     * @param int $value
     */
    public function setLockAccountAction($value = null)
    {
        $this->lock_account_action = $value;
    }

    /**
     * Check if 'otp_type' has a value
     *
     * @return bool
     */
    public function hasOtpType()
    {
        return $this->otp_type !== null;
    }

    /**
     * Get 'otp_type' value
     *
     * @return int
     */
    public function getOtpType()
    {
        return $this->otp_type;
    }

    /**
     * Set 'otp_type' value
     *
     * @param int $value
     */
    public function setOtpType($value = null)
    {
        $this->otp_type = $value;
    }

    /**
     * Check if 'otp_identifier' has a value
     *
     * @return bool
     */
    public function hasOtpIdentifier()
    {
        return $this->otp_identifier !== null;
    }

    /**
     * Get 'otp_identifier' value
     *
     * @return string
     */
    public function getOtpIdentifier()
    {
        return $this->otp_identifier;
    }

    /**
     * Set 'otp_identifier' value
     *
     * @param string $value
     */
    public function setOtpIdentifier($value = null)
    {
        $this->otp_identifier = $value;
    }

    /**
     * Check if 'otp_sharedsecret' has a value
     *
     * @return bool
     */
    public function hasOtpSharedsecret()
    {
        return $this->otp_sharedsecret !== null;
    }

    /**
     * Get 'otp_sharedsecret' value
     *
     * @return \Protobuf\Stream
     */
    public function getOtpSharedsecret()
    {
        return $this->otp_sharedsecret;
    }

    /**
     * Set 'otp_sharedsecret' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setOtpSharedsecret($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->otp_sharedsecret = $value;
    }

    /**
     * Check if 'otp_value' has a value
     *
     * @return bool
     */
    public function hasOtpValue()
    {
        return $this->otp_value !== null;
    }

    /**
     * Get 'otp_value' value
     *
     * @return int
     */
    public function getOtpValue()
    {
        return $this->otp_value;
    }

    /**
     * Set 'otp_value' value
     *
     * @param int $value
     */
    public function setOtpValue($value = null)
    {
        $this->otp_value = $value;
    }

    /**
     * Check if 'machine_name' has a value
     *
     * @return bool
     */
    public function hasMachineName()
    {
        return $this->machine_name !== null;
    }

    /**
     * Get 'machine_name' value
     *
     * @return string
     */
    public function getMachineName()
    {
        return $this->machine_name;
    }

    /**
     * Set 'machine_name' value
     *
     * @param string $value
     */
    public function setMachineName($value = null)
    {
        $this->machine_name = $value;
    }

    /**
     * Check if 'machine_name_userchosen' has a value
     *
     * @return bool
     */
    public function hasMachineNameUserchosen()
    {
        return $this->machine_name_userchosen !== null;
    }

    /**
     * Get 'machine_name_userchosen' value
     *
     * @return string
     */
    public function getMachineNameUserchosen()
    {
        return $this->machine_name_userchosen;
    }

    /**
     * Set 'machine_name_userchosen' value
     *
     * @param string $value
     */
    public function setMachineNameUserchosen($value = null)
    {
        $this->machine_name_userchosen = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'filename' => null,
            'eresult_sentryfile' => null,
            'filesize' => null,
            'sha_sentryfile' => null,
            'lock_account_action' => null,
            'otp_type' => null,
            'otp_identifier' => null,
            'otp_sharedsecret' => null,
            'otp_value' => null,
            'machine_name' => null,
            'machine_name_userchosen' => null
        ], $values);

        $message->setFilename($values['filename']);
        $message->setEresultSentryfile($values['eresult_sentryfile']);
        $message->setFilesize($values['filesize']);
        $message->setShaSentryfile($values['sha_sentryfile']);
        $message->setLockAccountAction($values['lock_account_action']);
        $message->setOtpType($values['otp_type']);
        $message->setOtpIdentifier($values['otp_identifier']);
        $message->setOtpSharedsecret($values['otp_sharedsecret']);
        $message->setOtpValue($values['otp_value']);
        $message->setMachineName($values['machine_name']);
        $message->setMachineNameUserchosen($values['machine_name_userchosen']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientRequestMachineAuth',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'filename',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'eresult_sentryfile',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'filesize',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'sha_sentryfile',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'lock_account_action',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'otp_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'otp_identifier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'otp_sharedsecret',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'otp_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'machine_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'machine_name_userchosen',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->filename !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->filename);
        }

        if ($this->eresult_sentryfile !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->eresult_sentryfile);
        }

        if ($this->filesize !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->filesize);
        }

        if ($this->sha_sentryfile !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->sha_sentryfile);
        }

        if ($this->lock_account_action !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->lock_account_action);
        }

        if ($this->otp_type !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->otp_type);
        }

        if ($this->otp_identifier !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->otp_identifier);
        }

        if ($this->otp_sharedsecret !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeByteStream($stream, $this->otp_sharedsecret);
        }

        if ($this->otp_value !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->otp_value);
        }

        if ($this->machine_name !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->machine_name);
        }

        if ($this->machine_name_userchosen !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->machine_name_userchosen);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->filename = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->eresult_sentryfile = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->filesize = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->sha_sentryfile = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->lock_account_action = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->otp_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->otp_identifier = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->otp_sharedsecret = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->otp_value = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->machine_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->machine_name_userchosen = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->filename !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->filename);
        }

        if ($this->eresult_sentryfile !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eresult_sentryfile);
        }

        if ($this->filesize !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->filesize);
        }

        if ($this->sha_sentryfile !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->sha_sentryfile);
        }

        if ($this->lock_account_action !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->lock_account_action);
        }

        if ($this->otp_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->otp_type);
        }

        if ($this->otp_identifier !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->otp_identifier);
        }

        if ($this->otp_sharedsecret !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->otp_sharedsecret);
        }

        if ($this->otp_value !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->otp_value);
        }

        if ($this->machine_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->machine_name);
        }

        if ($this->machine_name_userchosen !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->machine_name_userchosen);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->filename = null;
        $this->eresult_sentryfile = null;
        $this->filesize = null;
        $this->sha_sentryfile = null;
        $this->lock_account_action = null;
        $this->otp_type = null;
        $this->otp_identifier = null;
        $this->otp_sharedsecret = null;
        $this->otp_value = null;
        $this->machine_name = null;
        $this->machine_name_userchosen = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientRequestMachineAuth) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->filename = ($message->filename !== null) ? $message->filename : $this->filename;
        $this->eresult_sentryfile = ($message->eresult_sentryfile !== null) ? $message->eresult_sentryfile : $this->eresult_sentryfile;
        $this->filesize = ($message->filesize !== null) ? $message->filesize : $this->filesize;
        $this->sha_sentryfile = ($message->sha_sentryfile !== null) ? $message->sha_sentryfile : $this->sha_sentryfile;
        $this->lock_account_action = ($message->lock_account_action !== null) ? $message->lock_account_action : $this->lock_account_action;
        $this->otp_type = ($message->otp_type !== null) ? $message->otp_type : $this->otp_type;
        $this->otp_identifier = ($message->otp_identifier !== null) ? $message->otp_identifier : $this->otp_identifier;
        $this->otp_sharedsecret = ($message->otp_sharedsecret !== null) ? $message->otp_sharedsecret : $this->otp_sharedsecret;
        $this->otp_value = ($message->otp_value !== null) ? $message->otp_value : $this->otp_value;
        $this->machine_name = ($message->machine_name !== null) ? $message->machine_name : $this->machine_name;
        $this->machine_name_userchosen = ($message->machine_name_userchosen !== null) ? $message->machine_name_userchosen : $this->machine_name_userchosen;
    }


}

