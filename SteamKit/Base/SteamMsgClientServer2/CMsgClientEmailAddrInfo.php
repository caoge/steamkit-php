<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer2.CMsgClientEmailAddrInfo
 */
class CMsgClientEmailAddrInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * email_address optional string = 1
     *
     * @var string
     */
    protected $email_address = null;

    /**
     * email_is_validated optional bool = 2
     *
     * @var bool
     */
    protected $email_is_validated = null;

    /**
     * email_validation_changed optional bool = 3
     *
     * @var bool
     */
    protected $email_validation_changed = null;

    /**
     * credential_change_requires_code optional bool = 4
     *
     * @var bool
     */
    protected $credential_change_requires_code = null;

    /**
     * password_or_secretqa_change_requires_code optional bool = 5
     *
     * @var bool
     */
    protected $password_or_secretqa_change_requires_code = null;

    /**
     * remind_user_about_email optional bool = 6
     *
     * @var bool
     */
    protected $remind_user_about_email = null;

    /**
     * Check if 'email_address' has a value
     *
     * @return bool
     */
    public function hasEmailAddress()
    {
        return $this->email_address !== null;
    }

    /**
     * Get 'email_address' value
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->email_address;
    }

    /**
     * Set 'email_address' value
     *
     * @param string $value
     */
    public function setEmailAddress($value = null)
    {
        $this->email_address = $value;
    }

    /**
     * Check if 'email_is_validated' has a value
     *
     * @return bool
     */
    public function hasEmailIsValidated()
    {
        return $this->email_is_validated !== null;
    }

    /**
     * Get 'email_is_validated' value
     *
     * @return bool
     */
    public function getEmailIsValidated()
    {
        return $this->email_is_validated;
    }

    /**
     * Set 'email_is_validated' value
     *
     * @param bool $value
     */
    public function setEmailIsValidated($value = null)
    {
        $this->email_is_validated = $value;
    }

    /**
     * Check if 'email_validation_changed' has a value
     *
     * @return bool
     */
    public function hasEmailValidationChanged()
    {
        return $this->email_validation_changed !== null;
    }

    /**
     * Get 'email_validation_changed' value
     *
     * @return bool
     */
    public function getEmailValidationChanged()
    {
        return $this->email_validation_changed;
    }

    /**
     * Set 'email_validation_changed' value
     *
     * @param bool $value
     */
    public function setEmailValidationChanged($value = null)
    {
        $this->email_validation_changed = $value;
    }

    /**
     * Check if 'credential_change_requires_code' has a value
     *
     * @return bool
     */
    public function hasCredentialChangeRequiresCode()
    {
        return $this->credential_change_requires_code !== null;
    }

    /**
     * Get 'credential_change_requires_code' value
     *
     * @return bool
     */
    public function getCredentialChangeRequiresCode()
    {
        return $this->credential_change_requires_code;
    }

    /**
     * Set 'credential_change_requires_code' value
     *
     * @param bool $value
     */
    public function setCredentialChangeRequiresCode($value = null)
    {
        $this->credential_change_requires_code = $value;
    }

    /**
     * Check if 'password_or_secretqa_change_requires_code' has a value
     *
     * @return bool
     */
    public function hasPasswordOrSecretqaChangeRequiresCode()
    {
        return $this->password_or_secretqa_change_requires_code !== null;
    }

    /**
     * Get 'password_or_secretqa_change_requires_code' value
     *
     * @return bool
     */
    public function getPasswordOrSecretqaChangeRequiresCode()
    {
        return $this->password_or_secretqa_change_requires_code;
    }

    /**
     * Set 'password_or_secretqa_change_requires_code' value
     *
     * @param bool $value
     */
    public function setPasswordOrSecretqaChangeRequiresCode($value = null)
    {
        $this->password_or_secretqa_change_requires_code = $value;
    }

    /**
     * Check if 'remind_user_about_email' has a value
     *
     * @return bool
     */
    public function hasRemindUserAboutEmail()
    {
        return $this->remind_user_about_email !== null;
    }

    /**
     * Get 'remind_user_about_email' value
     *
     * @return bool
     */
    public function getRemindUserAboutEmail()
    {
        return $this->remind_user_about_email;
    }

    /**
     * Set 'remind_user_about_email' value
     *
     * @param bool $value
     */
    public function setRemindUserAboutEmail($value = null)
    {
        $this->remind_user_about_email = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'email_address' => null,
            'email_is_validated' => null,
            'email_validation_changed' => null,
            'credential_change_requires_code' => null,
            'password_or_secretqa_change_requires_code' => null,
            'remind_user_about_email' => null
        ], $values);

        $message->setEmailAddress($values['email_address']);
        $message->setEmailIsValidated($values['email_is_validated']);
        $message->setEmailValidationChanged($values['email_validation_changed']);
        $message->setCredentialChangeRequiresCode($values['credential_change_requires_code']);
        $message->setPasswordOrSecretqaChangeRequiresCode($values['password_or_secretqa_change_requires_code']);
        $message->setRemindUserAboutEmail($values['remind_user_about_email']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientEmailAddrInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'email_address',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'email_is_validated',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'email_validation_changed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'credential_change_requires_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'password_or_secretqa_change_requires_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'remind_user_about_email',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->email_address !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->email_address);
        }

        if ($this->email_is_validated !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->email_is_validated);
        }

        if ($this->email_validation_changed !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->email_validation_changed);
        }

        if ($this->credential_change_requires_code !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->credential_change_requires_code);
        }

        if ($this->password_or_secretqa_change_requires_code !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->password_or_secretqa_change_requires_code);
        }

        if ($this->remind_user_about_email !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->remind_user_about_email);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->email_address = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->email_is_validated = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->email_validation_changed = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->credential_change_requires_code = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->password_or_secretqa_change_requires_code = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->remind_user_about_email = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->email_address !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->email_address);
        }

        if ($this->email_is_validated !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->email_validation_changed !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->credential_change_requires_code !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->password_or_secretqa_change_requires_code !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->remind_user_about_email !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->email_address = null;
        $this->email_is_validated = null;
        $this->email_validation_changed = null;
        $this->credential_change_requires_code = null;
        $this->password_or_secretqa_change_requires_code = null;
        $this->remind_user_about_email = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientEmailAddrInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->email_address = ($message->email_address !== null) ? $message->email_address : $this->email_address;
        $this->email_is_validated = ($message->email_is_validated !== null) ? $message->email_is_validated : $this->email_is_validated;
        $this->email_validation_changed = ($message->email_validation_changed !== null) ? $message->email_validation_changed : $this->email_validation_changed;
        $this->credential_change_requires_code = ($message->credential_change_requires_code !== null) ? $message->credential_change_requires_code : $this->credential_change_requires_code;
        $this->password_or_secretqa_change_requires_code = ($message->password_or_secretqa_change_requires_code !== null) ? $message->password_or_secretqa_change_requires_code : $this->password_or_secretqa_change_requires_code;
        $this->remind_user_about_email = ($message->remind_user_about_email !== null) ? $message->remind_user_about_email : $this->remind_user_about_email;
    }


}

