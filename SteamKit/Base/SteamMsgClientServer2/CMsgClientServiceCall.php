<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer2.CMsgClientServiceCall
 */
class CMsgClientServiceCall extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * sysid_routing optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $sysid_routing = null;

    /**
     * call_handle optional uint32 = 2
     *
     * @var int
     */
    protected $call_handle = null;

    /**
     * module_crc optional uint32 = 3
     *
     * @var int
     */
    protected $module_crc = null;

    /**
     * module_hash optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $module_hash = null;

    /**
     * function_id optional uint32 = 5
     *
     * @var int
     */
    protected $function_id = null;

    /**
     * cub_output_max optional uint32 = 6
     *
     * @var int
     */
    protected $cub_output_max = null;

    /**
     * flags optional uint32 = 7
     *
     * @var int
     */
    protected $flags = null;

    /**
     * callparameter optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $callparameter = null;

    /**
     * ping_only optional bool = 9
     *
     * @var bool
     */
    protected $ping_only = null;

    /**
     * max_outstanding_calls optional uint32 = 10
     *
     * @var int
     */
    protected $max_outstanding_calls = null;

    /**
     * Check if 'sysid_routing' has a value
     *
     * @return bool
     */
    public function hasSysidRouting()
    {
        return $this->sysid_routing !== null;
    }

    /**
     * Get 'sysid_routing' value
     *
     * @return \Protobuf\Stream
     */
    public function getSysidRouting()
    {
        return $this->sysid_routing;
    }

    /**
     * Set 'sysid_routing' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSysidRouting($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->sysid_routing = $value;
    }

    /**
     * Check if 'call_handle' has a value
     *
     * @return bool
     */
    public function hasCallHandle()
    {
        return $this->call_handle !== null;
    }

    /**
     * Get 'call_handle' value
     *
     * @return int
     */
    public function getCallHandle()
    {
        return $this->call_handle;
    }

    /**
     * Set 'call_handle' value
     *
     * @param int $value
     */
    public function setCallHandle($value = null)
    {
        $this->call_handle = $value;
    }

    /**
     * Check if 'module_crc' has a value
     *
     * @return bool
     */
    public function hasModuleCrc()
    {
        return $this->module_crc !== null;
    }

    /**
     * Get 'module_crc' value
     *
     * @return int
     */
    public function getModuleCrc()
    {
        return $this->module_crc;
    }

    /**
     * Set 'module_crc' value
     *
     * @param int $value
     */
    public function setModuleCrc($value = null)
    {
        $this->module_crc = $value;
    }

    /**
     * Check if 'module_hash' has a value
     *
     * @return bool
     */
    public function hasModuleHash()
    {
        return $this->module_hash !== null;
    }

    /**
     * Get 'module_hash' value
     *
     * @return \Protobuf\Stream
     */
    public function getModuleHash()
    {
        return $this->module_hash;
    }

    /**
     * Set 'module_hash' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setModuleHash($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->module_hash = $value;
    }

    /**
     * Check if 'function_id' has a value
     *
     * @return bool
     */
    public function hasFunctionId()
    {
        return $this->function_id !== null;
    }

    /**
     * Get 'function_id' value
     *
     * @return int
     */
    public function getFunctionId()
    {
        return $this->function_id;
    }

    /**
     * Set 'function_id' value
     *
     * @param int $value
     */
    public function setFunctionId($value = null)
    {
        $this->function_id = $value;
    }

    /**
     * Check if 'cub_output_max' has a value
     *
     * @return bool
     */
    public function hasCubOutputMax()
    {
        return $this->cub_output_max !== null;
    }

    /**
     * Get 'cub_output_max' value
     *
     * @return int
     */
    public function getCubOutputMax()
    {
        return $this->cub_output_max;
    }

    /**
     * Set 'cub_output_max' value
     *
     * @param int $value
     */
    public function setCubOutputMax($value = null)
    {
        $this->cub_output_max = $value;
    }

    /**
     * Check if 'flags' has a value
     *
     * @return bool
     */
    public function hasFlags()
    {
        return $this->flags !== null;
    }

    /**
     * Get 'flags' value
     *
     * @return int
     */
    public function getFlags()
    {
        return $this->flags;
    }

    /**
     * Set 'flags' value
     *
     * @param int $value
     */
    public function setFlags($value = null)
    {
        $this->flags = $value;
    }

    /**
     * Check if 'callparameter' has a value
     *
     * @return bool
     */
    public function hasCallparameter()
    {
        return $this->callparameter !== null;
    }

    /**
     * Get 'callparameter' value
     *
     * @return \Protobuf\Stream
     */
    public function getCallparameter()
    {
        return $this->callparameter;
    }

    /**
     * Set 'callparameter' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setCallparameter($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->callparameter = $value;
    }

    /**
     * Check if 'ping_only' has a value
     *
     * @return bool
     */
    public function hasPingOnly()
    {
        return $this->ping_only !== null;
    }

    /**
     * Get 'ping_only' value
     *
     * @return bool
     */
    public function getPingOnly()
    {
        return $this->ping_only;
    }

    /**
     * Set 'ping_only' value
     *
     * @param bool $value
     */
    public function setPingOnly($value = null)
    {
        $this->ping_only = $value;
    }

    /**
     * Check if 'max_outstanding_calls' has a value
     *
     * @return bool
     */
    public function hasMaxOutstandingCalls()
    {
        return $this->max_outstanding_calls !== null;
    }

    /**
     * Get 'max_outstanding_calls' value
     *
     * @return int
     */
    public function getMaxOutstandingCalls()
    {
        return $this->max_outstanding_calls;
    }

    /**
     * Set 'max_outstanding_calls' value
     *
     * @param int $value
     */
    public function setMaxOutstandingCalls($value = null)
    {
        $this->max_outstanding_calls = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'sysid_routing' => null,
            'call_handle' => null,
            'module_crc' => null,
            'module_hash' => null,
            'function_id' => null,
            'cub_output_max' => null,
            'flags' => null,
            'callparameter' => null,
            'ping_only' => null,
            'max_outstanding_calls' => null
        ], $values);

        $message->setSysidRouting($values['sysid_routing']);
        $message->setCallHandle($values['call_handle']);
        $message->setModuleCrc($values['module_crc']);
        $message->setModuleHash($values['module_hash']);
        $message->setFunctionId($values['function_id']);
        $message->setCubOutputMax($values['cub_output_max']);
        $message->setFlags($values['flags']);
        $message->setCallparameter($values['callparameter']);
        $message->setPingOnly($values['ping_only']);
        $message->setMaxOutstandingCalls($values['max_outstanding_calls']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientServiceCall',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'sysid_routing',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'call_handle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'module_crc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'module_hash',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'function_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'cub_output_max',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'callparameter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'ping_only',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'max_outstanding_calls',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->sysid_routing !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->sysid_routing);
        }

        if ($this->call_handle !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->call_handle);
        }

        if ($this->module_crc !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->module_crc);
        }

        if ($this->module_hash !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->module_hash);
        }

        if ($this->function_id !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->function_id);
        }

        if ($this->cub_output_max !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->cub_output_max);
        }

        if ($this->flags !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->flags);
        }

        if ($this->callparameter !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->callparameter);
        }

        if ($this->ping_only !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->ping_only);
        }

        if ($this->max_outstanding_calls !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->max_outstanding_calls);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->sysid_routing = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->call_handle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->module_crc = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->module_hash = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->function_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->cub_output_max = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->callparameter = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->ping_only = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->max_outstanding_calls = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->sysid_routing !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->sysid_routing);
        }

        if ($this->call_handle !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->call_handle);
        }

        if ($this->module_crc !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->module_crc);
        }

        if ($this->module_hash !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->module_hash);
        }

        if ($this->function_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->function_id);
        }

        if ($this->cub_output_max !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->cub_output_max);
        }

        if ($this->flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->flags);
        }

        if ($this->callparameter !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->callparameter);
        }

        if ($this->ping_only !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->max_outstanding_calls !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_outstanding_calls);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->sysid_routing = null;
        $this->call_handle = null;
        $this->module_crc = null;
        $this->module_hash = null;
        $this->function_id = null;
        $this->cub_output_max = null;
        $this->flags = null;
        $this->callparameter = null;
        $this->ping_only = null;
        $this->max_outstanding_calls = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientServiceCall) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->sysid_routing = ($message->sysid_routing !== null) ? $message->sysid_routing : $this->sysid_routing;
        $this->call_handle = ($message->call_handle !== null) ? $message->call_handle : $this->call_handle;
        $this->module_crc = ($message->module_crc !== null) ? $message->module_crc : $this->module_crc;
        $this->module_hash = ($message->module_hash !== null) ? $message->module_hash : $this->module_hash;
        $this->function_id = ($message->function_id !== null) ? $message->function_id : $this->function_id;
        $this->cub_output_max = ($message->cub_output_max !== null) ? $message->cub_output_max : $this->cub_output_max;
        $this->flags = ($message->flags !== null) ? $message->flags : $this->flags;
        $this->callparameter = ($message->callparameter !== null) ? $message->callparameter : $this->callparameter;
        $this->ping_only = ($message->ping_only !== null) ? $message->ping_only : $this->ping_only;
        $this->max_outstanding_calls = ($message->max_outstanding_calls !== null) ? $message->max_outstanding_calls : $this->max_outstanding_calls;
    }


}

