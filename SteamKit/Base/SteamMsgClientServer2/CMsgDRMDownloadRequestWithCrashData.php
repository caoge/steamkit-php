<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgDRMDownloadRequestWithCrashData
 */
class CMsgDRMDownloadRequestWithCrashData extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * download_flags optional uint32 = 1
     *
     * @var int
     */
    protected $download_flags = null;

    /**
     * download_types_known optional uint32 = 2
     *
     * @var int
     */
    protected $download_types_known = null;

    /**
     * guid_drm optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $guid_drm = null;

    /**
     * guid_split optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $guid_split = null;

    /**
     * guid_merge optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $guid_merge = null;

    /**
     * module_name optional string = 6
     *
     * @var string
     */
    protected $module_name = null;

    /**
     * module_path optional string = 7
     *
     * @var string
     */
    protected $module_path = null;

    /**
     * crash_data optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $crash_data = null;

    /**
     * Check if 'download_flags' has a value
     *
     * @return bool
     */
    public function hasDownloadFlags()
    {
        return $this->download_flags !== null;
    }

    /**
     * Get 'download_flags' value
     *
     * @return int
     */
    public function getDownloadFlags()
    {
        return $this->download_flags;
    }

    /**
     * Set 'download_flags' value
     *
     * @param int $value
     */
    public function setDownloadFlags($value = null)
    {
        $this->download_flags = $value;
    }

    /**
     * Check if 'download_types_known' has a value
     *
     * @return bool
     */
    public function hasDownloadTypesKnown()
    {
        return $this->download_types_known !== null;
    }

    /**
     * Get 'download_types_known' value
     *
     * @return int
     */
    public function getDownloadTypesKnown()
    {
        return $this->download_types_known;
    }

    /**
     * Set 'download_types_known' value
     *
     * @param int $value
     */
    public function setDownloadTypesKnown($value = null)
    {
        $this->download_types_known = $value;
    }

    /**
     * Check if 'guid_drm' has a value
     *
     * @return bool
     */
    public function hasGuidDrm()
    {
        return $this->guid_drm !== null;
    }

    /**
     * Get 'guid_drm' value
     *
     * @return \Protobuf\Stream
     */
    public function getGuidDrm()
    {
        return $this->guid_drm;
    }

    /**
     * Set 'guid_drm' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGuidDrm($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->guid_drm = $value;
    }

    /**
     * Check if 'guid_split' has a value
     *
     * @return bool
     */
    public function hasGuidSplit()
    {
        return $this->guid_split !== null;
    }

    /**
     * Get 'guid_split' value
     *
     * @return \Protobuf\Stream
     */
    public function getGuidSplit()
    {
        return $this->guid_split;
    }

    /**
     * Set 'guid_split' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGuidSplit($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->guid_split = $value;
    }

    /**
     * Check if 'guid_merge' has a value
     *
     * @return bool
     */
    public function hasGuidMerge()
    {
        return $this->guid_merge !== null;
    }

    /**
     * Get 'guid_merge' value
     *
     * @return \Protobuf\Stream
     */
    public function getGuidMerge()
    {
        return $this->guid_merge;
    }

    /**
     * Set 'guid_merge' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setGuidMerge($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->guid_merge = $value;
    }

    /**
     * Check if 'module_name' has a value
     *
     * @return bool
     */
    public function hasModuleName()
    {
        return $this->module_name !== null;
    }

    /**
     * Get 'module_name' value
     *
     * @return string
     */
    public function getModuleName()
    {
        return $this->module_name;
    }

    /**
     * Set 'module_name' value
     *
     * @param string $value
     */
    public function setModuleName($value = null)
    {
        $this->module_name = $value;
    }

    /**
     * Check if 'module_path' has a value
     *
     * @return bool
     */
    public function hasModulePath()
    {
        return $this->module_path !== null;
    }

    /**
     * Get 'module_path' value
     *
     * @return string
     */
    public function getModulePath()
    {
        return $this->module_path;
    }

    /**
     * Set 'module_path' value
     *
     * @param string $value
     */
    public function setModulePath($value = null)
    {
        $this->module_path = $value;
    }

    /**
     * Check if 'crash_data' has a value
     *
     * @return bool
     */
    public function hasCrashData()
    {
        return $this->crash_data !== null;
    }

    /**
     * Get 'crash_data' value
     *
     * @return \Protobuf\Stream
     */
    public function getCrashData()
    {
        return $this->crash_data;
    }

    /**
     * Set 'crash_data' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setCrashData($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->crash_data = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'download_flags' => null,
            'download_types_known' => null,
            'guid_drm' => null,
            'guid_split' => null,
            'guid_merge' => null,
            'module_name' => null,
            'module_path' => null,
            'crash_data' => null
        ], $values);

        $message->setDownloadFlags($values['download_flags']);
        $message->setDownloadTypesKnown($values['download_types_known']);
        $message->setGuidDrm($values['guid_drm']);
        $message->setGuidSplit($values['guid_split']);
        $message->setGuidMerge($values['guid_merge']);
        $message->setModuleName($values['module_name']);
        $message->setModulePath($values['module_path']);
        $message->setCrashData($values['crash_data']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgDRMDownloadRequestWithCrashData',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'download_flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'download_types_known',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'guid_drm',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'guid_split',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'guid_merge',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'module_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'module_path',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'crash_data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->download_flags !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->download_flags);
        }

        if ($this->download_types_known !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->download_types_known);
        }

        if ($this->guid_drm !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->guid_drm);
        }

        if ($this->guid_split !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->guid_split);
        }

        if ($this->guid_merge !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->guid_merge);
        }

        if ($this->module_name !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->module_name);
        }

        if ($this->module_path !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->module_path);
        }

        if ($this->crash_data !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->crash_data);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->download_flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->download_types_known = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->guid_drm = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->guid_split = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->guid_merge = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->module_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->module_path = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->crash_data = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->download_flags !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->download_flags);
        }

        if ($this->download_types_known !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->download_types_known);
        }

        if ($this->guid_drm !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->guid_drm);
        }

        if ($this->guid_split !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->guid_split);
        }

        if ($this->guid_merge !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->guid_merge);
        }

        if ($this->module_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->module_name);
        }

        if ($this->module_path !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->module_path);
        }

        if ($this->crash_data !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->crash_data);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->download_flags = null;
        $this->download_types_known = null;
        $this->guid_drm = null;
        $this->guid_split = null;
        $this->guid_merge = null;
        $this->module_name = null;
        $this->module_path = null;
        $this->crash_data = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgDRMDownloadRequestWithCrashData) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->download_flags = ($message->download_flags !== null) ? $message->download_flags : $this->download_flags;
        $this->download_types_known = ($message->download_types_known !== null) ? $message->download_types_known : $this->download_types_known;
        $this->guid_drm = ($message->guid_drm !== null) ? $message->guid_drm : $this->guid_drm;
        $this->guid_split = ($message->guid_split !== null) ? $message->guid_split : $this->guid_split;
        $this->guid_merge = ($message->guid_merge !== null) ? $message->guid_merge : $this->guid_merge;
        $this->module_name = ($message->module_name !== null) ? $message->module_name : $this->module_name;
        $this->module_path = ($message->module_path !== null) ? $message->module_path : $this->module_path;
        $this->crash_data = ($message->crash_data !== null) ? $message->crash_data : $this->crash_data;
    }


}

