<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgClientDPCheckSpecialSurveyResponse
 */
class CMsgClientDPCheckSpecialSurveyResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * eResult optional uint32 = 1
     *
     * @var int
     */
    protected $eResult = null;

    /**
     * state optional uint32 = 2
     *
     * @var int
     */
    protected $state = null;

    /**
     * name optional string = 3
     *
     * @var string
     */
    protected $name = null;

    /**
     * custom_url optional string = 4
     *
     * @var string
     */
    protected $custom_url = null;

    /**
     * include_software optional bool = 5
     *
     * @var bool
     */
    protected $include_software = null;

    /**
     * token optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $token = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->eResult = '2';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'eResult' has a value
     *
     * @return bool
     */
    public function hasEResult()
    {
        return $this->eResult !== null;
    }

    /**
     * Get 'eResult' value
     *
     * @return int
     */
    public function getEResult()
    {
        return $this->eResult;
    }

    /**
     * Set 'eResult' value
     *
     * @param int $value
     */
    public function setEResult($value = null)
    {
        $this->eResult = $value;
    }

    /**
     * Check if 'state' has a value
     *
     * @return bool
     */
    public function hasState()
    {
        return $this->state !== null;
    }

    /**
     * Get 'state' value
     *
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set 'state' value
     *
     * @param int $value
     */
    public function setState($value = null)
    {
        $this->state = $value;
    }

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'custom_url' has a value
     *
     * @return bool
     */
    public function hasCustomUrl()
    {
        return $this->custom_url !== null;
    }

    /**
     * Get 'custom_url' value
     *
     * @return string
     */
    public function getCustomUrl()
    {
        return $this->custom_url;
    }

    /**
     * Set 'custom_url' value
     *
     * @param string $value
     */
    public function setCustomUrl($value = null)
    {
        $this->custom_url = $value;
    }

    /**
     * Check if 'include_software' has a value
     *
     * @return bool
     */
    public function hasIncludeSoftware()
    {
        return $this->include_software !== null;
    }

    /**
     * Get 'include_software' value
     *
     * @return bool
     */
    public function getIncludeSoftware()
    {
        return $this->include_software;
    }

    /**
     * Set 'include_software' value
     *
     * @param bool $value
     */
    public function setIncludeSoftware($value = null)
    {
        $this->include_software = $value;
    }

    /**
     * Check if 'token' has a value
     *
     * @return bool
     */
    public function hasToken()
    {
        return $this->token !== null;
    }

    /**
     * Get 'token' value
     *
     * @return \Protobuf\Stream
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Set 'token' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setToken($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->token = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'eResult' => '2',
            'state' => null,
            'name' => null,
            'custom_url' => null,
            'include_software' => null,
            'token' => null
        ], $values);

        $message->setEResult($values['eResult']);
        $message->setState($values['state']);
        $message->setName($values['name']);
        $message->setCustomUrl($values['custom_url']);
        $message->setIncludeSoftware($values['include_software']);
        $message->setToken($values['token']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientDPCheckSpecialSurveyResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'eResult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '2'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'custom_url',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'include_software',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'token',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->eResult !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->eResult);
        }

        if ($this->state !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->state);
        }

        if ($this->name !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->name);
        }

        if ($this->custom_url !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->custom_url);
        }

        if ($this->include_software !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->include_software);
        }

        if ($this->token !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->token);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->eResult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->state = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->custom_url = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->include_software = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->token = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->eResult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eResult);
        }

        if ($this->state !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->state);
        }

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->custom_url !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->custom_url);
        }

        if ($this->include_software !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->token !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->token);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->eResult = '2';
        $this->state = null;
        $this->name = null;
        $this->custom_url = null;
        $this->include_software = null;
        $this->token = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientDPCheckSpecialSurveyResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->eResult = ($message->eResult !== null) ? $message->eResult : $this->eResult;
        $this->state = ($message->state !== null) ? $message->state : $this->state;
        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->custom_url = ($message->custom_url !== null) ? $message->custom_url : $this->custom_url;
        $this->include_software = ($message->include_software !== null) ? $message->include_software : $this->include_software;
        $this->token = ($message->token !== null) ? $message->token : $this->token;
    }


}

