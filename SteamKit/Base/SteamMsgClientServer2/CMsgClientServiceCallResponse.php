<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgClientServiceCallResponse
 */
class CMsgClientServiceCallResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * sysid_routing optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $sysid_routing = null;

    /**
     * call_handle optional uint32 = 2
     *
     * @var int
     */
    protected $call_handle = null;

    /**
     * module_crc optional uint32 = 3
     *
     * @var int
     */
    protected $module_crc = null;

    /**
     * module_hash optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $module_hash = null;

    /**
     * ecallresult optional uint32 = 5
     *
     * @var int
     */
    protected $ecallresult = null;

    /**
     * result_content optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $result_content = null;

    /**
     * os_version_info optional bytes = 7
     *
     * @var \Protobuf\Stream
     */
    protected $os_version_info = null;

    /**
     * system_info optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $system_info = null;

    /**
     * load_address optional fixed64 = 9
     *
     * @var int
     */
    protected $load_address = null;

    /**
     * exception_record optional bytes = 10
     *
     * @var \Protobuf\Stream
     */
    protected $exception_record = null;

    /**
     * portable_os_version_info optional bytes = 11
     *
     * @var \Protobuf\Stream
     */
    protected $portable_os_version_info = null;

    /**
     * portable_system_info optional bytes = 12
     *
     * @var \Protobuf\Stream
     */
    protected $portable_system_info = null;

    /**
     * was_converted optional bool = 13
     *
     * @var bool
     */
    protected $was_converted = null;

    /**
     * internal_result optional uint32 = 14
     *
     * @var int
     */
    protected $internal_result = null;

    /**
     * current_count optional uint32 = 15
     *
     * @var int
     */
    protected $current_count = null;

    /**
     * last_call_handle optional uint32 = 16
     *
     * @var int
     */
    protected $last_call_handle = null;

    /**
     * last_call_module_crc optional uint32 = 17
     *
     * @var int
     */
    protected $last_call_module_crc = null;

    /**
     * last_call_sysid_routing optional bytes = 18
     *
     * @var \Protobuf\Stream
     */
    protected $last_call_sysid_routing = null;

    /**
     * last_ecallresult optional uint32 = 19
     *
     * @var int
     */
    protected $last_ecallresult = null;

    /**
     * last_callissue_delta optional uint32 = 20
     *
     * @var int
     */
    protected $last_callissue_delta = null;

    /**
     * last_callcomplete_delta optional uint32 = 21
     *
     * @var int
     */
    protected $last_callcomplete_delta = null;

    /**
     * Check if 'sysid_routing' has a value
     *
     * @return bool
     */
    public function hasSysidRouting()
    {
        return $this->sysid_routing !== null;
    }

    /**
     * Get 'sysid_routing' value
     *
     * @return \Protobuf\Stream
     */
    public function getSysidRouting()
    {
        return $this->sysid_routing;
    }

    /**
     * Set 'sysid_routing' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSysidRouting($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->sysid_routing = $value;
    }

    /**
     * Check if 'call_handle' has a value
     *
     * @return bool
     */
    public function hasCallHandle()
    {
        return $this->call_handle !== null;
    }

    /**
     * Get 'call_handle' value
     *
     * @return int
     */
    public function getCallHandle()
    {
        return $this->call_handle;
    }

    /**
     * Set 'call_handle' value
     *
     * @param int $value
     */
    public function setCallHandle($value = null)
    {
        $this->call_handle = $value;
    }

    /**
     * Check if 'module_crc' has a value
     *
     * @return bool
     */
    public function hasModuleCrc()
    {
        return $this->module_crc !== null;
    }

    /**
     * Get 'module_crc' value
     *
     * @return int
     */
    public function getModuleCrc()
    {
        return $this->module_crc;
    }

    /**
     * Set 'module_crc' value
     *
     * @param int $value
     */
    public function setModuleCrc($value = null)
    {
        $this->module_crc = $value;
    }

    /**
     * Check if 'module_hash' has a value
     *
     * @return bool
     */
    public function hasModuleHash()
    {
        return $this->module_hash !== null;
    }

    /**
     * Get 'module_hash' value
     *
     * @return \Protobuf\Stream
     */
    public function getModuleHash()
    {
        return $this->module_hash;
    }

    /**
     * Set 'module_hash' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setModuleHash($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->module_hash = $value;
    }

    /**
     * Check if 'ecallresult' has a value
     *
     * @return bool
     */
    public function hasEcallresult()
    {
        return $this->ecallresult !== null;
    }

    /**
     * Get 'ecallresult' value
     *
     * @return int
     */
    public function getEcallresult()
    {
        return $this->ecallresult;
    }

    /**
     * Set 'ecallresult' value
     *
     * @param int $value
     */
    public function setEcallresult($value = null)
    {
        $this->ecallresult = $value;
    }

    /**
     * Check if 'result_content' has a value
     *
     * @return bool
     */
    public function hasResultContent()
    {
        return $this->result_content !== null;
    }

    /**
     * Get 'result_content' value
     *
     * @return \Protobuf\Stream
     */
    public function getResultContent()
    {
        return $this->result_content;
    }

    /**
     * Set 'result_content' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setResultContent($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->result_content = $value;
    }

    /**
     * Check if 'os_version_info' has a value
     *
     * @return bool
     */
    public function hasOsVersionInfo()
    {
        return $this->os_version_info !== null;
    }

    /**
     * Get 'os_version_info' value
     *
     * @return \Protobuf\Stream
     */
    public function getOsVersionInfo()
    {
        return $this->os_version_info;
    }

    /**
     * Set 'os_version_info' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setOsVersionInfo($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->os_version_info = $value;
    }

    /**
     * Check if 'system_info' has a value
     *
     * @return bool
     */
    public function hasSystemInfo()
    {
        return $this->system_info !== null;
    }

    /**
     * Get 'system_info' value
     *
     * @return \Protobuf\Stream
     */
    public function getSystemInfo()
    {
        return $this->system_info;
    }

    /**
     * Set 'system_info' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSystemInfo($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->system_info = $value;
    }

    /**
     * Check if 'load_address' has a value
     *
     * @return bool
     */
    public function hasLoadAddress()
    {
        return $this->load_address !== null;
    }

    /**
     * Get 'load_address' value
     *
     * @return int
     */
    public function getLoadAddress()
    {
        return $this->load_address;
    }

    /**
     * Set 'load_address' value
     *
     * @param int $value
     */
    public function setLoadAddress($value = null)
    {
        $this->load_address = $value;
    }

    /**
     * Check if 'exception_record' has a value
     *
     * @return bool
     */
    public function hasExceptionRecord()
    {
        return $this->exception_record !== null;
    }

    /**
     * Get 'exception_record' value
     *
     * @return \Protobuf\Stream
     */
    public function getExceptionRecord()
    {
        return $this->exception_record;
    }

    /**
     * Set 'exception_record' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setExceptionRecord($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->exception_record = $value;
    }

    /**
     * Check if 'portable_os_version_info' has a value
     *
     * @return bool
     */
    public function hasPortableOsVersionInfo()
    {
        return $this->portable_os_version_info !== null;
    }

    /**
     * Get 'portable_os_version_info' value
     *
     * @return \Protobuf\Stream
     */
    public function getPortableOsVersionInfo()
    {
        return $this->portable_os_version_info;
    }

    /**
     * Set 'portable_os_version_info' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPortableOsVersionInfo($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->portable_os_version_info = $value;
    }

    /**
     * Check if 'portable_system_info' has a value
     *
     * @return bool
     */
    public function hasPortableSystemInfo()
    {
        return $this->portable_system_info !== null;
    }

    /**
     * Get 'portable_system_info' value
     *
     * @return \Protobuf\Stream
     */
    public function getPortableSystemInfo()
    {
        return $this->portable_system_info;
    }

    /**
     * Set 'portable_system_info' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPortableSystemInfo($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->portable_system_info = $value;
    }

    /**
     * Check if 'was_converted' has a value
     *
     * @return bool
     */
    public function hasWasConverted()
    {
        return $this->was_converted !== null;
    }

    /**
     * Get 'was_converted' value
     *
     * @return bool
     */
    public function getWasConverted()
    {
        return $this->was_converted;
    }

    /**
     * Set 'was_converted' value
     *
     * @param bool $value
     */
    public function setWasConverted($value = null)
    {
        $this->was_converted = $value;
    }

    /**
     * Check if 'internal_result' has a value
     *
     * @return bool
     */
    public function hasInternalResult()
    {
        return $this->internal_result !== null;
    }

    /**
     * Get 'internal_result' value
     *
     * @return int
     */
    public function getInternalResult()
    {
        return $this->internal_result;
    }

    /**
     * Set 'internal_result' value
     *
     * @param int $value
     */
    public function setInternalResult($value = null)
    {
        $this->internal_result = $value;
    }

    /**
     * Check if 'current_count' has a value
     *
     * @return bool
     */
    public function hasCurrentCount()
    {
        return $this->current_count !== null;
    }

    /**
     * Get 'current_count' value
     *
     * @return int
     */
    public function getCurrentCount()
    {
        return $this->current_count;
    }

    /**
     * Set 'current_count' value
     *
     * @param int $value
     */
    public function setCurrentCount($value = null)
    {
        $this->current_count = $value;
    }

    /**
     * Check if 'last_call_handle' has a value
     *
     * @return bool
     */
    public function hasLastCallHandle()
    {
        return $this->last_call_handle !== null;
    }

    /**
     * Get 'last_call_handle' value
     *
     * @return int
     */
    public function getLastCallHandle()
    {
        return $this->last_call_handle;
    }

    /**
     * Set 'last_call_handle' value
     *
     * @param int $value
     */
    public function setLastCallHandle($value = null)
    {
        $this->last_call_handle = $value;
    }

    /**
     * Check if 'last_call_module_crc' has a value
     *
     * @return bool
     */
    public function hasLastCallModuleCrc()
    {
        return $this->last_call_module_crc !== null;
    }

    /**
     * Get 'last_call_module_crc' value
     *
     * @return int
     */
    public function getLastCallModuleCrc()
    {
        return $this->last_call_module_crc;
    }

    /**
     * Set 'last_call_module_crc' value
     *
     * @param int $value
     */
    public function setLastCallModuleCrc($value = null)
    {
        $this->last_call_module_crc = $value;
    }

    /**
     * Check if 'last_call_sysid_routing' has a value
     *
     * @return bool
     */
    public function hasLastCallSysidRouting()
    {
        return $this->last_call_sysid_routing !== null;
    }

    /**
     * Get 'last_call_sysid_routing' value
     *
     * @return \Protobuf\Stream
     */
    public function getLastCallSysidRouting()
    {
        return $this->last_call_sysid_routing;
    }

    /**
     * Set 'last_call_sysid_routing' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setLastCallSysidRouting($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->last_call_sysid_routing = $value;
    }

    /**
     * Check if 'last_ecallresult' has a value
     *
     * @return bool
     */
    public function hasLastEcallresult()
    {
        return $this->last_ecallresult !== null;
    }

    /**
     * Get 'last_ecallresult' value
     *
     * @return int
     */
    public function getLastEcallresult()
    {
        return $this->last_ecallresult;
    }

    /**
     * Set 'last_ecallresult' value
     *
     * @param int $value
     */
    public function setLastEcallresult($value = null)
    {
        $this->last_ecallresult = $value;
    }

    /**
     * Check if 'last_callissue_delta' has a value
     *
     * @return bool
     */
    public function hasLastCallissueDelta()
    {
        return $this->last_callissue_delta !== null;
    }

    /**
     * Get 'last_callissue_delta' value
     *
     * @return int
     */
    public function getLastCallissueDelta()
    {
        return $this->last_callissue_delta;
    }

    /**
     * Set 'last_callissue_delta' value
     *
     * @param int $value
     */
    public function setLastCallissueDelta($value = null)
    {
        $this->last_callissue_delta = $value;
    }

    /**
     * Check if 'last_callcomplete_delta' has a value
     *
     * @return bool
     */
    public function hasLastCallcompleteDelta()
    {
        return $this->last_callcomplete_delta !== null;
    }

    /**
     * Get 'last_callcomplete_delta' value
     *
     * @return int
     */
    public function getLastCallcompleteDelta()
    {
        return $this->last_callcomplete_delta;
    }

    /**
     * Set 'last_callcomplete_delta' value
     *
     * @param int $value
     */
    public function setLastCallcompleteDelta($value = null)
    {
        $this->last_callcomplete_delta = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'sysid_routing' => null,
            'call_handle' => null,
            'module_crc' => null,
            'module_hash' => null,
            'ecallresult' => null,
            'result_content' => null,
            'os_version_info' => null,
            'system_info' => null,
            'load_address' => null,
            'exception_record' => null,
            'portable_os_version_info' => null,
            'portable_system_info' => null,
            'was_converted' => null,
            'internal_result' => null,
            'current_count' => null,
            'last_call_handle' => null,
            'last_call_module_crc' => null,
            'last_call_sysid_routing' => null,
            'last_ecallresult' => null,
            'last_callissue_delta' => null,
            'last_callcomplete_delta' => null
        ], $values);

        $message->setSysidRouting($values['sysid_routing']);
        $message->setCallHandle($values['call_handle']);
        $message->setModuleCrc($values['module_crc']);
        $message->setModuleHash($values['module_hash']);
        $message->setEcallresult($values['ecallresult']);
        $message->setResultContent($values['result_content']);
        $message->setOsVersionInfo($values['os_version_info']);
        $message->setSystemInfo($values['system_info']);
        $message->setLoadAddress($values['load_address']);
        $message->setExceptionRecord($values['exception_record']);
        $message->setPortableOsVersionInfo($values['portable_os_version_info']);
        $message->setPortableSystemInfo($values['portable_system_info']);
        $message->setWasConverted($values['was_converted']);
        $message->setInternalResult($values['internal_result']);
        $message->setCurrentCount($values['current_count']);
        $message->setLastCallHandle($values['last_call_handle']);
        $message->setLastCallModuleCrc($values['last_call_module_crc']);
        $message->setLastCallSysidRouting($values['last_call_sysid_routing']);
        $message->setLastEcallresult($values['last_ecallresult']);
        $message->setLastCallissueDelta($values['last_callissue_delta']);
        $message->setLastCallcompleteDelta($values['last_callcomplete_delta']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientServiceCallResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'sysid_routing',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'call_handle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'module_crc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'module_hash',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'ecallresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'result_content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'os_version_info',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'system_info',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'load_address',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'exception_record',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'portable_os_version_info',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'portable_system_info',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'was_converted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'internal_result',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'current_count',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'last_call_handle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'last_call_module_crc',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'last_call_sysid_routing',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'last_ecallresult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'last_callissue_delta',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'last_callcomplete_delta',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->sysid_routing !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->sysid_routing);
        }

        if ($this->call_handle !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->call_handle);
        }

        if ($this->module_crc !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->module_crc);
        }

        if ($this->module_hash !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->module_hash);
        }

        if ($this->ecallresult !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->ecallresult);
        }

        if ($this->result_content !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->result_content);
        }

        if ($this->os_version_info !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeByteStream($stream, $this->os_version_info);
        }

        if ($this->system_info !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->system_info);
        }

        if ($this->load_address !== null) {
            $writer->writeVarint($stream, 73);
            $writer->writeFixed64($stream, $this->load_address);
        }

        if ($this->exception_record !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeByteStream($stream, $this->exception_record);
        }

        if ($this->portable_os_version_info !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeByteStream($stream, $this->portable_os_version_info);
        }

        if ($this->portable_system_info !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeByteStream($stream, $this->portable_system_info);
        }

        if ($this->was_converted !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->was_converted);
        }

        if ($this->internal_result !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->internal_result);
        }

        if ($this->current_count !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->current_count);
        }

        if ($this->last_call_handle !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->last_call_handle);
        }

        if ($this->last_call_module_crc !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->last_call_module_crc);
        }

        if ($this->last_call_sysid_routing !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeByteStream($stream, $this->last_call_sysid_routing);
        }

        if ($this->last_ecallresult !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->last_ecallresult);
        }

        if ($this->last_callissue_delta !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->last_callissue_delta);
        }

        if ($this->last_callcomplete_delta !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->last_callcomplete_delta);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->sysid_routing = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->call_handle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->module_crc = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->module_hash = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->ecallresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->result_content = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->os_version_info = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->system_info = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->load_address = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->exception_record = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->portable_os_version_info = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->portable_system_info = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->was_converted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->internal_result = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->current_count = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_call_handle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_call_module_crc = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->last_call_sysid_routing = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_ecallresult = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_callissue_delta = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_callcomplete_delta = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->sysid_routing !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->sysid_routing);
        }

        if ($this->call_handle !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->call_handle);
        }

        if ($this->module_crc !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->module_crc);
        }

        if ($this->module_hash !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->module_hash);
        }

        if ($this->ecallresult !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ecallresult);
        }

        if ($this->result_content !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->result_content);
        }

        if ($this->os_version_info !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->os_version_info);
        }

        if ($this->system_info !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->system_info);
        }

        if ($this->load_address !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->exception_record !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->exception_record);
        }

        if ($this->portable_os_version_info !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->portable_os_version_info);
        }

        if ($this->portable_system_info !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->portable_system_info);
        }

        if ($this->was_converted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->internal_result !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->internal_result);
        }

        if ($this->current_count !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->current_count);
        }

        if ($this->last_call_handle !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->last_call_handle);
        }

        if ($this->last_call_module_crc !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->last_call_module_crc);
        }

        if ($this->last_call_sysid_routing !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->last_call_sysid_routing);
        }

        if ($this->last_ecallresult !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->last_ecallresult);
        }

        if ($this->last_callissue_delta !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->last_callissue_delta);
        }

        if ($this->last_callcomplete_delta !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->last_callcomplete_delta);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->sysid_routing = null;
        $this->call_handle = null;
        $this->module_crc = null;
        $this->module_hash = null;
        $this->ecallresult = null;
        $this->result_content = null;
        $this->os_version_info = null;
        $this->system_info = null;
        $this->load_address = null;
        $this->exception_record = null;
        $this->portable_os_version_info = null;
        $this->portable_system_info = null;
        $this->was_converted = null;
        $this->internal_result = null;
        $this->current_count = null;
        $this->last_call_handle = null;
        $this->last_call_module_crc = null;
        $this->last_call_sysid_routing = null;
        $this->last_ecallresult = null;
        $this->last_callissue_delta = null;
        $this->last_callcomplete_delta = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientServiceCallResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->sysid_routing = ($message->sysid_routing !== null) ? $message->sysid_routing : $this->sysid_routing;
        $this->call_handle = ($message->call_handle !== null) ? $message->call_handle : $this->call_handle;
        $this->module_crc = ($message->module_crc !== null) ? $message->module_crc : $this->module_crc;
        $this->module_hash = ($message->module_hash !== null) ? $message->module_hash : $this->module_hash;
        $this->ecallresult = ($message->ecallresult !== null) ? $message->ecallresult : $this->ecallresult;
        $this->result_content = ($message->result_content !== null) ? $message->result_content : $this->result_content;
        $this->os_version_info = ($message->os_version_info !== null) ? $message->os_version_info : $this->os_version_info;
        $this->system_info = ($message->system_info !== null) ? $message->system_info : $this->system_info;
        $this->load_address = ($message->load_address !== null) ? $message->load_address : $this->load_address;
        $this->exception_record = ($message->exception_record !== null) ? $message->exception_record : $this->exception_record;
        $this->portable_os_version_info = ($message->portable_os_version_info !== null) ? $message->portable_os_version_info : $this->portable_os_version_info;
        $this->portable_system_info = ($message->portable_system_info !== null) ? $message->portable_system_info : $this->portable_system_info;
        $this->was_converted = ($message->was_converted !== null) ? $message->was_converted : $this->was_converted;
        $this->internal_result = ($message->internal_result !== null) ? $message->internal_result : $this->internal_result;
        $this->current_count = ($message->current_count !== null) ? $message->current_count : $this->current_count;
        $this->last_call_handle = ($message->last_call_handle !== null) ? $message->last_call_handle : $this->last_call_handle;
        $this->last_call_module_crc = ($message->last_call_module_crc !== null) ? $message->last_call_module_crc : $this->last_call_module_crc;
        $this->last_call_sysid_routing = ($message->last_call_sysid_routing !== null) ? $message->last_call_sysid_routing : $this->last_call_sysid_routing;
        $this->last_ecallresult = ($message->last_ecallresult !== null) ? $message->last_ecallresult : $this->last_ecallresult;
        $this->last_callissue_delta = ($message->last_callissue_delta !== null) ? $message->last_callissue_delta : $this->last_callissue_delta;
        $this->last_callcomplete_delta = ($message->last_callcomplete_delta !== null) ? $message->last_callcomplete_delta : $this->last_callcomplete_delta;
    }


}

