<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message : SteamKit.Base.SteamMsgClientServer2.CMsgClientEmailChange
 */
class CMsgClientEmailChange extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * password optional string = 1
     *
     * @var string
     */
    protected $password = null;

    /**
     * email optional string = 2
     *
     * @var string
     */
    protected $email = null;

    /**
     * code optional string = 3
     *
     * @var string
     */
    protected $code = null;

    /**
     * final optional bool = 4
     *
     * @var bool
     */
    protected $final = null;

    /**
     * newmethod optional bool = 5
     *
     * @var bool
     */
    protected $newmethod = null;

    /**
     * twofactor_code optional string = 6
     *
     * @var string
     */
    protected $twofactor_code = null;

    /**
     * sms_code optional string = 7
     *
     * @var string
     */
    protected $sms_code = null;

    /**
     * client_supports_sms optional bool = 8
     *
     * @var bool
     */
    protected $client_supports_sms = null;

    /**
     * Check if 'password' has a value
     *
     * @return bool
     */
    public function hasPassword()
    {
        return $this->password !== null;
    }

    /**
     * Get 'password' value
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set 'password' value
     *
     * @param string $value
     */
    public function setPassword($value = null)
    {
        $this->password = $value;
    }

    /**
     * Check if 'email' has a value
     *
     * @return bool
     */
    public function hasEmail()
    {
        return $this->email !== null;
    }

    /**
     * Get 'email' value
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set 'email' value
     *
     * @param string $value
     */
    public function setEmail($value = null)
    {
        $this->email = $value;
    }

    /**
     * Check if 'code' has a value
     *
     * @return bool
     */
    public function hasCode()
    {
        return $this->code !== null;
    }

    /**
     * Get 'code' value
     *
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Set 'code' value
     *
     * @param string $value
     */
    public function setCode($value = null)
    {
        $this->code = $value;
    }

    /**
     * Check if 'final' has a value
     *
     * @return bool
     */
    public function hasFinal()
    {
        return $this->final !== null;
    }

    /**
     * Get 'final' value
     *
     * @return bool
     */
    public function getFinal()
    {
        return $this->final;
    }

    /**
     * Set 'final' value
     *
     * @param bool $value
     */
    public function setFinal($value = null)
    {
        $this->final = $value;
    }

    /**
     * Check if 'newmethod' has a value
     *
     * @return bool
     */
    public function hasNewmethod()
    {
        return $this->newmethod !== null;
    }

    /**
     * Get 'newmethod' value
     *
     * @return bool
     */
    public function getNewmethod()
    {
        return $this->newmethod;
    }

    /**
     * Set 'newmethod' value
     *
     * @param bool $value
     */
    public function setNewmethod($value = null)
    {
        $this->newmethod = $value;
    }

    /**
     * Check if 'twofactor_code' has a value
     *
     * @return bool
     */
    public function hasTwofactorCode()
    {
        return $this->twofactor_code !== null;
    }

    /**
     * Get 'twofactor_code' value
     *
     * @return string
     */
    public function getTwofactorCode()
    {
        return $this->twofactor_code;
    }

    /**
     * Set 'twofactor_code' value
     *
     * @param string $value
     */
    public function setTwofactorCode($value = null)
    {
        $this->twofactor_code = $value;
    }

    /**
     * Check if 'sms_code' has a value
     *
     * @return bool
     */
    public function hasSmsCode()
    {
        return $this->sms_code !== null;
    }

    /**
     * Get 'sms_code' value
     *
     * @return string
     */
    public function getSmsCode()
    {
        return $this->sms_code;
    }

    /**
     * Set 'sms_code' value
     *
     * @param string $value
     */
    public function setSmsCode($value = null)
    {
        $this->sms_code = $value;
    }

    /**
     * Check if 'client_supports_sms' has a value
     *
     * @return bool
     */
    public function hasClientSupportsSms()
    {
        return $this->client_supports_sms !== null;
    }

    /**
     * Get 'client_supports_sms' value
     *
     * @return bool
     */
    public function getClientSupportsSms()
    {
        return $this->client_supports_sms;
    }

    /**
     * Set 'client_supports_sms' value
     *
     * @param bool $value
     */
    public function setClientSupportsSms($value = null)
    {
        $this->client_supports_sms = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'password' => null,
            'email' => null,
            'code' => null,
            'final' => null,
            'newmethod' => null,
            'twofactor_code' => null,
            'sms_code' => null,
            'client_supports_sms' => null
        ], $values);

        $message->setPassword($values['password']);
        $message->setEmail($values['email']);
        $message->setCode($values['code']);
        $message->setFinal($values['final']);
        $message->setNewmethod($values['newmethod']);
        $message->setTwofactorCode($values['twofactor_code']);
        $message->setSmsCode($values['sms_code']);
        $message->setClientSupportsSms($values['client_supports_sms']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientEmailChange',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'password',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'email',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'final',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'newmethod',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'twofactor_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'sms_code',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'client_supports_sms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->password !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->password);
        }

        if ($this->email !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->email);
        }

        if ($this->code !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->code);
        }

        if ($this->final !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->final);
        }

        if ($this->newmethod !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->newmethod);
        }

        if ($this->twofactor_code !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->twofactor_code);
        }

        if ($this->sms_code !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->sms_code);
        }

        if ($this->client_supports_sms !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->client_supports_sms);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->password = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->email = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->code = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->final = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->newmethod = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->twofactor_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sms_code = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->client_supports_sms = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->password !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->password);
        }

        if ($this->email !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->email);
        }

        if ($this->code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->code);
        }

        if ($this->final !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->newmethod !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->twofactor_code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->twofactor_code);
        }

        if ($this->sms_code !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->sms_code);
        }

        if ($this->client_supports_sms !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->password = null;
        $this->email = null;
        $this->code = null;
        $this->final = null;
        $this->newmethod = null;
        $this->twofactor_code = null;
        $this->sms_code = null;
        $this->client_supports_sms = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientEmailChange) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->password = ($message->password !== null) ? $message->password : $this->password;
        $this->email = ($message->email !== null) ? $message->email : $this->email;
        $this->code = ($message->code !== null) ? $message->code : $this->code;
        $this->final = ($message->final !== null) ? $message->final : $this->final;
        $this->newmethod = ($message->newmethod !== null) ? $message->newmethod : $this->newmethod;
        $this->twofactor_code = ($message->twofactor_code !== null) ? $message->twofactor_code : $this->twofactor_code;
        $this->sms_code = ($message->sms_code !== null) ? $message->sms_code : $this->sms_code;
        $this->client_supports_sms = ($message->client_supports_sms !== null) ? $message->client_supports_sms : $this->client_supports_sms;
    }


}

