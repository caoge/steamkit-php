<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : steamclient/steammessages_clientserver_2.proto
 */


namespace SteamKit\Base\SteamMsgClientServer2;

/**
 * Protobuf message :
 * SteamKit.Base.SteamMsgClientServer2.CMsgClientActivateOEMLicense
 */
class CMsgClientActivateOEMLicense extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * bios_manufacturer optional string = 1
     *
     * @var string
     */
    protected $bios_manufacturer = null;

    /**
     * bios_serialnumber optional string = 2
     *
     * @var string
     */
    protected $bios_serialnumber = null;

    /**
     * license_file optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $license_file = null;

    /**
     * mainboard_manufacturer optional string = 4
     *
     * @var string
     */
    protected $mainboard_manufacturer = null;

    /**
     * mainboard_product optional string = 5
     *
     * @var string
     */
    protected $mainboard_product = null;

    /**
     * mainboard_serialnumber optional string = 6
     *
     * @var string
     */
    protected $mainboard_serialnumber = null;

    /**
     * Check if 'bios_manufacturer' has a value
     *
     * @return bool
     */
    public function hasBiosManufacturer()
    {
        return $this->bios_manufacturer !== null;
    }

    /**
     * Get 'bios_manufacturer' value
     *
     * @return string
     */
    public function getBiosManufacturer()
    {
        return $this->bios_manufacturer;
    }

    /**
     * Set 'bios_manufacturer' value
     *
     * @param string $value
     */
    public function setBiosManufacturer($value = null)
    {
        $this->bios_manufacturer = $value;
    }

    /**
     * Check if 'bios_serialnumber' has a value
     *
     * @return bool
     */
    public function hasBiosSerialnumber()
    {
        return $this->bios_serialnumber !== null;
    }

    /**
     * Get 'bios_serialnumber' value
     *
     * @return string
     */
    public function getBiosSerialnumber()
    {
        return $this->bios_serialnumber;
    }

    /**
     * Set 'bios_serialnumber' value
     *
     * @param string $value
     */
    public function setBiosSerialnumber($value = null)
    {
        $this->bios_serialnumber = $value;
    }

    /**
     * Check if 'license_file' has a value
     *
     * @return bool
     */
    public function hasLicenseFile()
    {
        return $this->license_file !== null;
    }

    /**
     * Get 'license_file' value
     *
     * @return \Protobuf\Stream
     */
    public function getLicenseFile()
    {
        return $this->license_file;
    }

    /**
     * Set 'license_file' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setLicenseFile($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->license_file = $value;
    }

    /**
     * Check if 'mainboard_manufacturer' has a value
     *
     * @return bool
     */
    public function hasMainboardManufacturer()
    {
        return $this->mainboard_manufacturer !== null;
    }

    /**
     * Get 'mainboard_manufacturer' value
     *
     * @return string
     */
    public function getMainboardManufacturer()
    {
        return $this->mainboard_manufacturer;
    }

    /**
     * Set 'mainboard_manufacturer' value
     *
     * @param string $value
     */
    public function setMainboardManufacturer($value = null)
    {
        $this->mainboard_manufacturer = $value;
    }

    /**
     * Check if 'mainboard_product' has a value
     *
     * @return bool
     */
    public function hasMainboardProduct()
    {
        return $this->mainboard_product !== null;
    }

    /**
     * Get 'mainboard_product' value
     *
     * @return string
     */
    public function getMainboardProduct()
    {
        return $this->mainboard_product;
    }

    /**
     * Set 'mainboard_product' value
     *
     * @param string $value
     */
    public function setMainboardProduct($value = null)
    {
        $this->mainboard_product = $value;
    }

    /**
     * Check if 'mainboard_serialnumber' has a value
     *
     * @return bool
     */
    public function hasMainboardSerialnumber()
    {
        return $this->mainboard_serialnumber !== null;
    }

    /**
     * Get 'mainboard_serialnumber' value
     *
     * @return string
     */
    public function getMainboardSerialnumber()
    {
        return $this->mainboard_serialnumber;
    }

    /**
     * Set 'mainboard_serialnumber' value
     *
     * @param string $value
     */
    public function setMainboardSerialnumber($value = null)
    {
        $this->mainboard_serialnumber = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'bios_manufacturer' => null,
            'bios_serialnumber' => null,
            'license_file' => null,
            'mainboard_manufacturer' => null,
            'mainboard_product' => null,
            'mainboard_serialnumber' => null
        ], $values);

        $message->setBiosManufacturer($values['bios_manufacturer']);
        $message->setBiosSerialnumber($values['bios_serialnumber']);
        $message->setLicenseFile($values['license_file']);
        $message->setMainboardManufacturer($values['mainboard_manufacturer']);
        $message->setMainboardProduct($values['mainboard_product']);
        $message->setMainboardSerialnumber($values['mainboard_serialnumber']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CMsgClientActivateOEMLicense',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'bios_manufacturer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'bios_serialnumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'license_file',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'mainboard_manufacturer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'mainboard_product',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'mainboard_serialnumber',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->bios_manufacturer !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->bios_manufacturer);
        }

        if ($this->bios_serialnumber !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->bios_serialnumber);
        }

        if ($this->license_file !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->license_file);
        }

        if ($this->mainboard_manufacturer !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->mainboard_manufacturer);
        }

        if ($this->mainboard_product !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->mainboard_product);
        }

        if ($this->mainboard_serialnumber !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->mainboard_serialnumber);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->bios_manufacturer = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->bios_serialnumber = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->license_file = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->mainboard_manufacturer = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->mainboard_product = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->mainboard_serialnumber = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->bios_manufacturer !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->bios_manufacturer);
        }

        if ($this->bios_serialnumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->bios_serialnumber);
        }

        if ($this->license_file !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->license_file);
        }

        if ($this->mainboard_manufacturer !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->mainboard_manufacturer);
        }

        if ($this->mainboard_product !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->mainboard_product);
        }

        if ($this->mainboard_serialnumber !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->mainboard_serialnumber);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->bios_manufacturer = null;
        $this->bios_serialnumber = null;
        $this->license_file = null;
        $this->mainboard_manufacturer = null;
        $this->mainboard_product = null;
        $this->mainboard_serialnumber = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \SteamKit\Base\SteamMsgClientServer2\CMsgClientActivateOEMLicense) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->bios_manufacturer = ($message->bios_manufacturer !== null) ? $message->bios_manufacturer : $this->bios_manufacturer;
        $this->bios_serialnumber = ($message->bios_serialnumber !== null) ? $message->bios_serialnumber : $this->bios_serialnumber;
        $this->license_file = ($message->license_file !== null) ? $message->license_file : $this->license_file;
        $this->mainboard_manufacturer = ($message->mainboard_manufacturer !== null) ? $message->mainboard_manufacturer : $this->mainboard_manufacturer;
        $this->mainboard_product = ($message->mainboard_product !== null) ? $message->mainboard_product : $this->mainboard_product;
        $this->mainboard_serialnumber = ($message->mainboard_serialnumber !== null) ? $message->mainboard_serialnumber : $this->mainboard_serialnumber;
    }


}

